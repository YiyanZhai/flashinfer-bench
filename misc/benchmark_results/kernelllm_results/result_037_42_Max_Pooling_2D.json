{
  "device_info": {
    "device_name": "NVIDIA GeForce RTX 4090",
    "device_id": 0,
    "device_str": "cuda:0",
    "compute_capability": [
      8,
      9
    ],
    "total_memory": 25386352640,
    "driver_version": "12.4",
    "backend": "triton"
  },
  "kernel_spec": {
    "description_file": "benchmark/level1/42_Max_Pooling_2D.py",
    "generator_file": "generators/kernelllm_generator.py",
    "warmup": 5,
    "iterations": 10,
    "max_diff_limit": 1e-05,
    "report_n": 10,
    "correctness_trials": 1,
    "seed": 42,
    "backend": "triton",
    "use_ncu": false
  },
  "baseline_time": 0.02222079932689667,
  "success_rate": 0.0,
  "avg_speedup": 0.0,
  "max_speedup": 0.0,
  "compilation_success_rate": 0.2,
  "correctness_success_rate": 0.0,
  "generations": [
    {
      "round": 0,
      "compiled": true,
      "correctness": false,
      "max_diff": Infinity,
      "avg_diff": Infinity,
      "runtime": null,
      "speedup": null,
      "generated_code": "import torch\nimport triton\nimport triton.language as tl\nfrom torch._inductor.runtime.triton_heuristics import grid\nfrom torch._C import _cuda_getCurrentRawStream as get_raw_stream\nfrom torch._inductor.runtime import triton_helpers\nimport torch.nn as nn\nassert_size_stride = torch._C._dynamo.guards.assert_size_stride\nempty_strided_cuda = torch._C._dynamo.guards._empty_strided_cuda\n\n\n@triton.jit\ndef triton_poi_fused_max_pool2d_with_indices_0(in_ptr0, out_ptr0, xnumel,\n    XBLOCK: tl.constexpr):\n    xoffset = tl.program_id(0) * XBLOCK\n    xindex = xoffset + tl.arange(0, XBLOCK)[:]\n    tl.full([XBLOCK], True, tl.int1)\n    x1 = xindex // 128 % 128\n    x0 = xindex % 128\n    x3 = xindex\n    tmp0 = -3 + 2 * x1\n    tmp1 = tl.full([1], 0, tl.int64)\n    tmp2 = tmp0 >= tmp1\n    tmp3 = tl.full([1], 128, tl.int64)\n    tmp4 = tmp0 < tmp3\n    tmp5 = tmp2 & tmp4\n    tmp6 = -3 + 2 * x0\n    tmp7 = tmp6 >= tmp1\n    tmp8 = tmp6 < tmp3\n    tmp9 = tmp7 & tmp8\n    tmp10 = tmp5 & tmp9\n    tmp11 = tl.load(in_ptr0 + (-129 + 2 * x0 + 256 * x1), tmp10,\n        eviction_policy='evict_last', other=float('-inf'))\n    tmp12 = -2 + 2 * x0\n    tmp13 = tmp12 >= tmp1\n    tmp14 = tmp12 < tmp3\n    tmp15 = tmp13 & tmp14\n    tmp16 = tmp5 & tmp15\n    tmp17 = tl.load(in_ptr0 + (-128 + 2 * x0 + 256 * x1), tmp16,\n        eviction_policy='evict_last', other=float('-inf'))\n    tmp18 = triton_helpers.maximum(tmp17, tmp11)\n    tmp19 = -1 + 2 * x0\n    tmp20 = tmp19 >= tmp1\n    tmp21 = tmp19 < tmp3\n    tmp22 = tmp20 & tmp21\n    tmp23 = tmp5 & tmp22\n    tmp24 = tl.load(in_ptr0 + (-127 + 2 * x0 + 256 * x1), tmp23,\n        eviction_policy='evict_last', other=float('-inf'))\n    tmp25 = triton_helpers.maximum(tmp24, tmp18)\n    tmp26 = 2 * x0\n    tmp27 = tmp26 >= tmp1\n    tmp28 = tmp26 < tmp3\n    tmp29 = tmp27 & tmp28\n    tmp30 = tmp5 & tmp29\n    tmp31 = tl.load(in_ptr0 + (-126 + 2 * x0 + 256 * x1), tmp30,\n        eviction_policy='evict_last', other=float('-inf'))\n    tmp32 = triton_helpers.maximum(tmp31, tmp25)\n    tmp33 = 2 * x1\n    tmp34 = tmp33 >= tmp1\n    tmp35 = tmp33 < tmp3\n    tmp36 = tmp34 & tmp35\n    tmp37 = tmp36 & tmp9\n    tmp38 = tl.load(in_ptr0 + (-1 + 2 * x0 + 256 * x1), tmp37,\n        eviction_policy='evict_last', other=float('-inf'))\n    tmp39 = triton_helpers.maximum(tmp38, tmp32)\n    tmp40 = tmp36 & tmp15\n    tmp41 = tl.load(in_ptr0 + (2 * x0 + 256 * x1), tmp40, eviction_policy\n        ='evict_last', other=float('-inf'))\n    tmp42 = triton_helpers.maximum(tmp41, tmp39)\n    tmp43 = tmp36 & tmp22\n    tmp44 = tl.load(in_ptr0 + (1 + 2 * x0 + 256 * x1), tmp43,\n        eviction_policy='evict_last', other=float('-inf'))\n    tmp45 = triton_helpers.maximum(tmp44, tmp42)\n    tmp46 = tmp36 & tmp29\n    tmp47 = tl.load(in_ptr0 + (2 + 2 * x0 + 256 * x1), tmp46,\n        eviction_policy='evict_last', other=float('-inf'))\n    tmp48 = triton_helpers.maximum(tmp47, tmp45)\n    tmp49 = 1 + 2 * x1\n    tmp50 = tmp49 >= tmp1\n    tmp51 = tmp49 < tmp3\n    tmp52 = tmp50 & tmp51\n    tmp53 = tmp52 & tmp9\n    tmp54 = tl.load(in_ptr0 + (63 + 2 * x0 + 256 * x1), tmp53,\n        eviction_policy='evict_last', other=float('-inf'))\n    tmp55 = triton_helpers.maximum(tmp54, tmp48)\n    tmp56 = tmp52 & tmp15\n    tmp57 = tl.load(in_ptr0 + (64 + 2 * x0 + 256 * x1), tmp56,\n        eviction_policy='evict_last', other=float('-inf'))\n    tmp58 = triton_helpers.maximum(tmp57, tmp55)\n    tmp59 = tmp52 & tmp22\n    tmp60 = tl.load(in_ptr0 + (65 + 2 * x0 + 256 * x1), tmp59,\n        eviction_policy='evict_last', other=float('-inf'))\n    tmp61 = triton_helpers.maximum(tmp60, tmp58)\n    tmp62 = tmp52 & tmp29\n    tmp63 = tl.load(in_ptr0 + (66 + 2 * x0 + 256 * x1), tmp62,\n        eviction_policy='evict_last', other=float('-inf'))\n    tmp64 = triton_helpers.maximum(tmp63, tmp61)\n    tmp65 = 1 + -2 * x0 + -2 * x1 + (129 * (129 <= 2 + 2 * x0) + (2 + 2 *\n        x0) * (2 + 2 * x0 < 129)) * (129 * (129 <= 2 + 2 * x1) + (2 + 2 *\n        x1) * (2 + 2 * x1 < 129))\n    tmp66 = tmp64 / tmp65\n    tl.store(out_ptr0 + x3, tmp66, None)\n\n\ndef call(args):\n    arg0_1, = args\n    args.clear()\n    assert_size_stride(arg0_1, (16, 32, 128, 128), (524288, 16384, 128, 1))\n    with torch.cuda._DeviceGuard(0):\n        torch.cuda.set_device(0)\n        buf0 = empty_strided_cuda((16, 32, 128, 128), (524288, 16384, 128, \n            1), torch.float32)\n        get_raw_stream(0)\n        triton_poi_fused_max_pool2d_with_indices_0[grid(8388608)](arg0_1,\n            buf0, 8388608, XBLOCK=512, num_warps=8, num_stages=1)\n        del arg0_1\n    return buf0,\n\n\nclass ModelNew(nn.Module):\n    \"\"\"\n    Simple model that performs Max Pooling 2D.\n    \"\"\"\n    def __init__(self, kernel_size: int, stride: int, padding: int, dilation: int):\n        \"\"\"\n        Initializes the Max Pooling 2D layer.\n\n        Args:\n            kernel_size (int): Size of the pooling window.\n            stride (int): Stride of the pooling window.\n            padding (int): Padding to be applied before pooling.\n            dilation (int): Spacing between kernel elements.\n        \"\"\"\n        super(ModelNew, self).__init__()\n        self.maxpool = nn.MaxPool2d(kernel_size=kernel_size, stride=stride,\n            padding=padding, dilation=dilation)\n\n    def forward(self, input_0):\n        arg0_1 = input_0\n        output = call([arg0_1])\n        return output[0]\n```",
      "ncu_results": {},
      "metadata": {
        "correctness_trials_attempted": 1,
        "max_differences": [],
        "avg_differences": [],
        "trial_results": [
          {
            "trial": 0,
            "seed": 1608637542,
            "original_output_type": "<class 'torch.Tensor'>",
            "custom_output_type": "<class 'torch.Tensor'>",
            "original_output_shape": "torch.Size([16, 32, 64, 64])",
            "original_output_dtype": "torch.float32",
            "custom_output_shape": "torch.Size([16, 32, 128, 128])",
            "custom_output_dtype": "torch.float32",
            "correctness_error": "Output shape mismatch: Expected torch.Size([16, 32, 64, 64]), got torch.Size([16, 32, 128, 128])",
            "status": "shape_mismatch",
            "error": "Output shape mismatch: Expected torch.Size([16, 32, 64, 64]), got torch.Size([16, 32, 128, 128])"
          }
        ]
      },
      "compilation_error": null,
      "runtime_error": null,
      "generation_error": null
    },
    {
      "round": 1,
      "compiled": true,
      "correctness": false,
      "max_diff": Infinity,
      "avg_diff": Infinity,
      "runtime": null,
      "speedup": null,
      "generated_code": "import torch\nimport triton\nimport triton.language as tl\nfrom torch._inductor.runtime.triton_heuristics import grid\nfrom torch._C import _cuda_getCurrentRawStream as get_raw_stream\nfrom torch._inductor.runtime import triton_helpers\nimport torch.nn as nn\nassert_size_stride = torch._C._dynamo.guards.assert_size_stride\nempty_strided_cuda = torch._C._dynamo.guards._empty_strided_cuda\n\n\n@triton.jit\ndef triton_poi_fused_max_pool2d_with_indices_0(in_ptr0, out_ptr0, xnumel,\n    XBLOCK: tl.constexpr):\n    xoffset = tl.program_id(0) * XBLOCK\n    xindex = xoffset + tl.arange(0, XBLOCK)[:]\n    tl.full([XBLOCK], True, tl.int1)\n    x1 = xindex // 128 % 128\n    x0 = xindex % 128\n    x3 = xindex // 128\n    x4 = xindex\n    tmp0 = -1 + 2 * x1\n    tmp1 = tl.full([1], 0, tl.int64)\n    tmp2 = tmp0 >= tmp1\n    tmp3 = tl.full([1], 256, tl.int64)\n    tmp4 = tmp0 < tmp3\n    tmp5 = tmp2 & tmp4\n    tmp6 = -1 + 2 * x0\n    tmp7 = tmp6 >= tmp1\n    tmp8 = tmp6 < tmp3\n    tmp9 = tmp7 & tmp8\n    tmp10 = tmp5 & tmp9\n    tmp11 = tl.load(in_ptr0 + (-257 + 2 * x0 + 512 * x3), tmp10,\n        eviction_policy='evict_last', other=float('-inf'))\n    tmp12 = 2 * x0\n    tmp13 = tmp12 >= tmp1\n    tmp14 = tmp12 < tmp3\n    tmp15 = tmp13 & tmp14\n    tmp16 = tmp5 & tmp15\n    tmp17 = tl.load(in_ptr0 + (-256 + 2 * x0 + 512 * x3), tmp16,\n        eviction_policy='evict_last', other=float('-inf'))\n    tmp18 = triton_helpers.maximum(tmp17, tmp11)\n    tmp19 = 2 * x1\n    tmp20 = tmp19 >= tmp1\n    tmp21 = tmp19 < tmp3\n    tmp22 = tmp20 & tmp21\n    tmp23 = tmp22 & tmp9\n    tmp24 = tl.load(in_ptr0 + (-1 + 2 * x0 + 512 * x3), tmp23,\n        eviction_policy='evict_last', other=float('-inf'))\n    tmp25 = triton_helpers.maximum(tmp24, tmp18)\n    tmp26 = tmp22 & tmp15\n    tmp27 = tl.load(in_ptr0 + (2 * x0 + 512 * x3), tmp26, eviction_policy=\n        'evict_last', other=float('-inf'))\n    tmp28 = triton_helpers.maximum(tmp27, tmp25)\n    tl.store(out_ptr0 + x4, tmp28, None)\n\n\ndef call(args):\n    arg0_1, = args\n    args.clear()\n    assert_size_stride(arg0_1, (16, 32, 128, 128), (524288, 16384, 128, 1))\n    with torch.cuda._DeviceGuard(0):\n        torch.cuda.set_device(0)\n        buf0 = empty_strided_cuda((16, 32, 128, 128), (524288, 16384, 128, \n            1), torch.float32)\n        get_raw_stream(0)\n        triton_poi_fused_max_pool2d_with_indices_0[grid(8388608)](arg0_1,\n            buf0, 8388608, XBLOCK=512, num_warps=8, num_stages=1)\n        del arg0_1\n    return buf0,\n\n\nclass ModelNew(nn.Module):\n    \"\"\"\n    Simple model that performs Max Pooling 2D.\n    \"\"\"\n    def __init__(self, kernel_size: int, stride: int, padding: int, dilation: int):\n        \"\"\"\n        Initializes the Max Pooling 2D layer.\n\n        Args:\n            kernel_size (int): Size of the pooling window.\n            stride (int): Stride of the pooling window.\n            padding (int): Padding to be applied before pooling.\n            dilation (int): Spacing between kernel elements.\n        \"\"\"\n        super(ModelNew, self).__init__()\n        self.maxpool = nn.MaxPool2d(kernel_size=kernel_size, stride=stride,\n            padding=padding, dilation=dilation)\n\n    def forward(self, input_0):\n        arg0_1 = input_0\n        output = call([arg0_1])\n        return output[0]\n```",
      "ncu_results": {},
      "metadata": {
        "runtime_error_name": "RuntimeError"
      },
      "compilation_error": null,
      "runtime_error": "CUDA error: an illegal memory access was encountered\nCUDA kernel errors might be asynchronously reported at some other API call, so the stacktrace below might be incorrect.\nFor debugging consider passing CUDA_LAUNCH_BLOCKING=1\nCompile with `TORCH_USE_CUDA_DSA` to enable device-side assertions.\n",
      "generation_error": null
    },
    {
      "round": 2,
      "compiled": false,
      "correctness": false,
      "max_diff": Infinity,
      "avg_diff": Infinity,
      "runtime": null,
      "speedup": null,
      "generated_code": "import torch\nimport triton\nimport triton.language as tl\nfrom torch._inductor.runtime.triton_heuristics import grid\nfrom torch._C import _cuda_getCurrentRawStream as get_raw_stream\nfrom torch._inductor.runtime import triton_helpers\nimport torch.nn as nn\nassert_size_stride = torch._C._dynamo.guards.assert_size_stride\nempty_strided_cuda = torch._C._dynamo.guards._empty_strided_cuda\n\n\n@triton.jit\ndef triton_poi_fused_max_pool2d_with_indices_0(in_ptr0, out_ptr0, xnumel,\n    XBLOCK: tl.constexpr):\n    xoffset = tl.program_id(0) * XBLOCK\n    xindex = xoffset + tl.arange(0, XBLOCK)[:]\n    tl.full([XBLOCK], True, tl.int1)\n    x1 = xindex // 128 % 128\n    x0 = xindex % 128\n    x3 = xindex // 128\n    x4 = xindex\n    tmp0 = -3 + 2 * x1\n    tmp1 = tl.full([1], 0, tl.int64)\n    tmp2 = tmp0 >= tmp1\n    tmp3 = tl.full([1], 128, tl.int64)\n    tmp4 = tmp0 < tmp3\n    tmp5 = tmp2 & tmp4\n    tmp6 = -3 + 2 * x0\n    tmp7 = tmp6 >= tmp1\n    tmp8 = tmp6 < tmp3\n    tmp9 = tmp7 & tmp8\n    tmp10 = tmp5 & tmp9\n    tmp11 = tl.load(in_ptr0 + (-258 + 2 * x0 + 512 * x3), tmp10,\n        eviction_policy='evict_last', other=float('-inf'))\n    tmp12 = -2 + 2 * x0\n    tmp13 = tmp12 >= tmp1\n    tmp14 = tmp12 < tmp3\n    tmp15 = tmp13 & tmp14\n    tmp16 = tmp5 & tmp15\n    tmp17 = tl.load(in_ptr0 + (-256 + 2 * x0 + 512 * x3), tmp16,\n        eviction_policy='evict_last', other=float('-inf'))\n    tmp18 = triton_helpers.maximum(tmp17, tmp11)\n    tmp19 = -1 + 2 * x0\n    tmp20 = tmp19 >= tmp1\n    tmp21 = tmp19 < tmp3\n    tmp22 = tmp20 & tmp21\n    tmp23 = tmp5 & tmp22\n    tmp24 = tl.load(in_ptr0 + (-254 + 2 * x0 + 512 * x3), tmp23,\n        eviction_policy='evict_last', other=float('-inf'))\n    tmp25 = triton_helpers.maximum(tmp24, tmp18)\n    tmp26 = 2 * x0\n    tmp27 = tmp26 >= tmp1\n    tmp28 = tmp26 < tmp3\n    tmp29 = tmp27 & tmp28\n    tmp30 = tmp5 & tmp29\n    tmp31 = tl.load(in_ptr0 + (-252 + 2 * x0 + 512 * x3), tmp30,\n        eviction_policy='evict_last', other=float('-inf'))\n    tmp32 = triton_helpers.maximum(tmp31, tmp25)\n    tmp33 = 1 + 2 * x0\n    tmp34 = tmp33 >= tmp1\n    tmp35 = tmp33 < tmp3\n    tmp36 = tmp34 & tmp35\n    tmp37 = tmp5 & tmp36\n    tmp38 = tl.load(in_ptr0 + (-250 + 2 * x0 + 512 * x3), tmp37,\n        eviction_policy='evict_last', other=float('-inf'))\n    tmp39 = triton_helpers.maximum(tmp38, tmp32)\n    tmp40 = 2 * x1\n    tmp41 = tmp40 >= tmp1\n    tmp42 = tmp40 < tmp3\n    tmp43 = tmp41 & tmp42\n    tmp44 = tmp43 & tmp9\n    tmp45 = tl.load(in_ptr0 + (-2 + 2 * x0 + 512 * x3), tmp44,\n        eviction_policy='evict_last', other=float('-inf'))\n    tmp46 = triton_helpers.maximum(tmp45, tmp39)\n    tmp47 = tmp43 & tmp15\n    tmp48 = tl.load(in_ptr0 + (-1 + 2 * x0 + 512 * x3), tmp47,\n        eviction_policy='evict_last', other=float('-inf'))\n    tmp49 = triton_helpers.maximum(tmp48, tmp46)\n    tmp50 = tmp43 & tmp22\n    tmp51 = tl.load(in_ptr0 + (2 * x0 + 512 * x3), tmp50, eviction_policy=\n        'evict_last', other=float('-inf'))\n    tmp52 = triton_helpers.maximum(tmp51, tmp49)\n    tmp53 = tmp43 & tmp29\n    tmp54 = tl.load(in_ptr0 + (1 + 2 * x0 + 512 * x3), tmp53,\n        eviction_policy='evict_last', other=float('-inf'))\n    tmp55 = triton_helpers.maximum(tmp54, tmp52)\n    tmp56 = tmp43 & tmp36\n    tmp57 = tl.load(in_ptr0 + (2 + 2 * x0 + 512 * x3), tmp56,\n        eviction_policy='evict_last', other=float('-inf'))\n    tmp58 = triton_helpers.maximum(tmp57, tmp55)\n    tmp59 = -3 + 2 * x1\n    tmp60 = tmp59 >= tmp1\n    tmp61 = tmp59 < tmp3\n    tmp62 = tmp60 & tmp61\n    tmp63 = tmp62 & tmp9\n    tmp64 = tl.load(in_ptr0 + (-510 + 2 * x0 + 512 * x3), tmp63,\n        eviction_policy='evict_last', other=float('-inf'))\n    tmp65 = triton_helpers.maximum(tmp64, tmp58)\n    tmp66 = tmp62 & tmp15\n    tmp67 = tl.load(in_ptr0 + (-508 + 2 * x0 + 512 * x3), tmp66,\n        eviction_policy='evict_last', other=float('-inf'))\n    tmp68 = triton_helpers.maximum(tmp67, tmp65)\n    tmp69 = tmp62 & tmp22\n    tmp70 = tl.load(in_ptr0 + (-506 + 2 * x0 + 512 * x3), tmp69,\n        eviction_policy='evict_last', other=float('-inf'))\n    tmp71 = triton_helpers.maximum(tmp70, tmp68)\n    tmp72 = tmp62 & tmp29\n    tmp73 = tl.load(in_ptr0 + (-504 + 2 * x0 + 512 * x3), tmp72,\n        eviction_policy='evict_last', other=float('-inf'))\n    tmp74 = triton_helpers.maximum(tmp73, tmp71)\n    tmp75 = tmp62 & tmp36\n    tmp76 = tl.load(in_ptr0 + (-502 + 2 * x0 + 512 * x3), tmp75,\n        eviction_policy='evict_last', other=float('-inf'))\n    tmp77 = triton_helpers.maximum(tmp76, tmp74)\n    tmp78 = -2 + 2 * x1\n    tmp79 = tmp78 >= tmp1\n    tmp80 = tmp78 < tmp3\n    tmp81 = tmp79 & tmp80\n    tmp82 = tmp81 & tmp9\n    tmp83 = tl.load(in_ptr0 + (-514 + 2 * x0 + 512 * x3), tmp82,\n        eviction_policy='evict_last', other=float('-inf'))\n    tmp84 = triton_helpers.maximum(tmp83, tmp77)\n    tmp85 = tmp81 & tmp15\n    tmp86 = tl.load(in_ptr0 + (-512 + 2 * x0 + 512 * x3), tmp85,\n        eviction_policy='evict_last', other=float('-inf'))\n    tmp87 = triton_helpers.maximum(tmp86, tmp84)\n    tmp88 = tmp81 & tmp22\n    tmp89 = tl.load(in_ptr0 + (-510 + 2 * x0 + 512 * x3), tmp88,\n        eviction_policy='evict_last', other=float('-inf'))\n    tmp90 = triton_helpers.maximum(tmp89, tmp87)\n    tmp91 = tmp81 & tmp29\n    tmp92 = tl.load(in_ptr0 + (-508 + 2 * x0 + 512 * x3), tmp91,\n        eviction_policy='evict_last', other=float('-inf'))\n    tmp93 = triton_helpers.maximum(tmp92, tmp90)\n    tmp94 = tmp81 & tmp36\n    tmp95 = tl.load(in_ptr0 + (-506 + 2 * x0 + 512 * x3), tmp94,\n        eviction_policy='evict_last', other=float('-inf'))\n    tmp96 = triton_helpers.maximum(tmp95, tmp93)\n    tmp97 = -1 + 2 * x1\n    tmp98 = tmp97 >= tmp1\n    tmp99 = tmp97 < tmp3\n    tmp100 = tmp98 & tmp99\n    tmp101 = tmp100 & tmp9\n    tmp102 = tl.load(in_ptr0 + (-526 + 2 * x0 + 512 * x3), tmp101,\n        eviction_policy='evict_last', other=float('-inf'))\n    tmp103 = triton_helpers.maximum(tmp102, tmp96)\n    tmp104 = tmp100 & tmp15\n    tmp105 = tl.load(in_ptr0 + (-524 +",
      "ncu_results": {},
      "metadata": {
        "compilation_error_name": "RuntimeError"
      },
      "compilation_error": "CUDA error: an illegal memory access was encountered\nCUDA kernel errors might be asynchronously reported at some other API call, so the stacktrace below might be incorrect.\nFor debugging consider passing CUDA_LAUNCH_BLOCKING=1\nCompile with `TORCH_USE_CUDA_DSA` to enable device-side assertions.\n",
      "runtime_error": null,
      "generation_error": null
    },
    {
      "round": 3,
      "compiled": false,
      "correctness": false,
      "max_diff": Infinity,
      "avg_diff": Infinity,
      "runtime": null,
      "speedup": null,
      "generated_code": "import torch\nimport triton\nimport triton.language as tl\nfrom torch._inductor.runtime.triton_heuristics import grid\nfrom torch._C import _cuda_getCurrentRawStream as get_raw_stream\nfrom torch._inductor.runtime import triton_helpers\nimport torch.nn as nn\nassert_size_stride = torch._C._dynamo.guards.assert_size_stride\nempty_strided_cuda = torch._C._dynamo.guards._empty_strided_cuda\n\n\n@triton.jit\ndef triton_poi_fused_max_pool2d_with_indices_0(in_ptr0, out_ptr0, xnumel,\n    XBLOCK: tl.constexpr):\n    xoffset = tl.program_id(0) * XBLOCK\n    xindex = xoffset + tl.arange(0, XBLOCK)[:]\n    tl.full([XBLOCK], True, tl.int1)\n    x1 = xindex // 128 % 128\n    x0 = xindex % 128\n    x3 = xindex // 128\n    x4 = xindex\n    tmp0 = 3 * x1 // 2\n    tmp1 = (65 + 32 * x1) // 128\n    tmp2 = tmp0 >= tmp1\n    tmp3 = 2 + 3 * x1 // 2\n    tmp4 = tmp3 < tmp1\n    tmp5 = tmp4 & tmp2\n    tmp6 = 3 * x0 // 2\n    tmp7 = (65 + 32 * x0) // 128\n    tmp8 = tmp6 >= tmp7\n    tmp9 = tmp8 & tmp5\n    tmp10 = 2 + 3 * x0 // 2\n    tmp11 = tmp10 < tmp7\n    tmp12 = tmp11 & tmp9\n    tmp13 = tl.load(in_ptr0 + (3 * (3 * x1 // 2) + 32 * x3 + 3 * x0 // 2),\n        tmp12, eviction_policy='evict_last', other=float('-inf'))\n    tmp14 = tl.load(in_ptr0 + (1 + 3 * (3 * x1 // 2) + 32 * x3 + 3 * x0 // \n        2), tmp9, eviction_policy='evict_last', other=float('-inf'))\n    tmp15 = triton_helpers.maximum(tmp14, tmp13)\n    tmp16 = tl.load(in_ptr0 + (2 + 3 * (3 * x1 // 2) + 32 * x3 + 3 * x0 // \n        2), tmp5, eviction_policy='evict_last', other=float('-inf'))\n    tmp17 = triton_helpers.maximum(tmp16, tmp15)\n    tmp18 = tl.load(in_ptr0 + (32 + 3 * (3 * x1 // 2) + 32 * x3 + 3 * x0 //\n        2), tmp5, eviction_policy='evict_last', other=float('-inf'))\n    tmp19 = triton_helpers.maximum(tmp18, tmp17)\n    tmp20 = tl.load(in_ptr0 + (33 + 3 * (3 * x1 // 2) + 32 * x3 + 3 * x0 //\n        2), tmp9, eviction_policy='evict_last', other=float('-inf'))\n    tmp21 = triton_helpers.maximum(tmp20, tmp19)\n    tmp22 = tl.load(in_ptr0 + (34 + 3 * (3 * x1 // 2) + 32 * x3 + 3 * x0 //\n        2), tmp12, eviction_policy='evict_last', other=float('-inf'))\n    tmp23 = triton_helpers.maximum(tmp22, tmp21)\n    tmp24 = tl.load(in_ptr0 + (96 + 3 * (3 * x1 // 2) + 32 * x3 + 3 * x0 //\n        2), tmp5, eviction_policy='evict_last', other=float('-inf'))\n    tmp25 = triton_helpers.maximum(tmp24, tmp23)\n    tmp26 = tl.load(in_ptr0 + (97 + 3 * (3 * x1 // 2) + 32 * x3 + 3 * x0 //\n        2), tmp9, eviction_policy='evict_last', other=float('-inf'))\n    tmp27 = triton_helpers.maximum(tmp26, tmp25)\n    tmp28 = tl.load(in_ptr0 + (98 + 3 * (3 * x1 // 2) + 32 * x3 + 3 * x0 //\n        2), tmp12, eviction_policy='evict_last', other=float('-inf'))\n    tmp29 = triton_helpers.maximum(tmp28, tmp27)\n    tl.store(out_ptr0 + x4, tmp29, None)\n\n\ndef call(args):\n    arg0_1, = args\n    args.clear()\n    assert_size_stride(arg0_1, (16, 32, 128, 128), (524288, 16384, 128, 1))\n    with torch.cuda._DeviceGuard(0):\n        torch.cuda.set_device(0)\n        buf0 = empty_strided_cuda((16, 32, 128, 128), (524288, 16384, 128, \n            1), torch.float32)\n        get_raw_stream(0)\n        triton_poi_fused_max_pool2d_with_indices_0[grid(8388608)](arg0_1,\n            buf0, 8388608, XBLOCK=512, num_warps=8, num_stages=1)\n        del arg0_1\n    return buf0,\n\n\nclass ModelNew(nn.Module):\n    \"\"\"\n    Simple model that performs Max Pooling 2D.\n    \"\"\"\n\n    def __init__(self, kernel_size: 'int', stride: 'int', padding: 'int',\n        dilation: 'int'):\n        \"\"\"\n        Initializes the Max Pooling 2D layer.\n\n        Args:\n            kernel_size (int): Size of the pooling window.\n            stride (int): Stride of the pooling window.\n            padding (int): Padding to be applied before pooling.\n            dilation (int): Spacing between kernel elements.\n        \"\"\"\n        super(ModelNew, self).__init__()\n        self.maxpool = nn.MaxPool2d(kernel_size=kernel_size, stride=stride,\n            padding=padding, dilation=dilation)\n\n    def forward(self, input_0):\n        arg0_1 = input_0\n        output = call([arg0_1])\n        return output[0]\n```",
      "ncu_results": {},
      "metadata": {
        "compilation_error_name": "RuntimeError"
      },
      "compilation_error": "CUDA error: an illegal memory access was encountered\nCUDA kernel errors might be asynchronously reported at some other API call, so the stacktrace below might be incorrect.\nFor debugging consider passing CUDA_LAUNCH_BLOCKING=1\nCompile with `TORCH_USE_CUDA_DSA` to enable device-side assertions.\n",
      "runtime_error": null,
      "generation_error": null
    },
    {
      "round": 4,
      "compiled": false,
      "correctness": false,
      "max_diff": Infinity,
      "avg_diff": Infinity,
      "runtime": null,
      "speedup": null,
      "generated_code": "import torch\nimport triton\nimport triton.language as tl\nfrom torch._inductor.runtime.triton_heuristics import grid\nfrom torch._C import _cuda_getCurrentRawStream as get_raw_stream\nfrom torch._inductor.runtime import triton_helpers\nimport torch.nn as nn\nassert_size_stride = torch._C._dynamo.guards.assert_size_stride\nempty_strided_cuda = torch._C._dynamo.guards._empty_strided_cuda\n\n\n@triton.jit\ndef triton_poi_fused_max_pool2d_with_indices_0(in_ptr0, out_ptr0, xnumel,\n    XBLOCK: tl.constexpr):\n    xoffset = tl.program_id(0) * XBLOCK\n    xindex = xoffset + tl.arange(0, XBLOCK)[:]\n    tl.full([XBLOCK], True, tl.int1)\n    x1 = xindex // 128 % 128\n    x0 = xindex % 128\n    x3 = xindex\n    tmp0 = -3 + 2 * x1\n    tmp1 = tl.full([1], 0, tl.int64)\n    tmp2 = tmp0 >= tmp1\n    tmp3 = tl.full([1], 128, tl.int64)\n    tmp4 = tmp0 < tmp3\n    tmp5 = tmp2 & tmp4\n    tmp6 = -3 + 2 * x0\n    tmp7 = tmp6 >= tmp1\n    tmp8 = tmp6 < tmp3\n    tmp9 = tmp7 & tmp8\n    tmp10 = tmp5 & tmp9\n    tmp11 = tl.load(in_ptr0 + (-258 + 2 * x3), tmp10, eviction_policy=\n        'evict_last', other=float('-inf'))\n    tmp12 = -2 + 2 * x0\n    tmp13 = tmp12 >= tmp1\n    tmp14 = tmp12 < tmp3\n    tmp15 = tmp13 & tmp14\n    tmp16 = tmp5 & tmp15\n    tmp17 = tl.load(in_ptr0 + (-256 + 2 * x3), tmp16, eviction_policy=\n        'evict_last', other=float('-inf'))\n    tmp18 = triton_helpers.maximum(tmp17, tmp11)\n    tmp19 = -1 + 2 * x0\n    tmp20 = tmp19 >= tmp1\n    tmp21 = tmp19 < tmp3\n    tmp22 = tmp20 & tmp21\n    tmp23 = tmp5 & tmp22\n    tmp24 = tl.load(in_ptr0 + (-254 + 2 * x3), tmp23, eviction_policy=\n        'evict_last', other=float('-inf'))\n    tmp25 = triton_helpers.maximum(tmp24, tmp18)\n    tmp26 = 2 * x0\n    tmp27 = tmp26 >= tmp1\n    tmp28 = tmp26 < tmp3\n    tmp29 = tmp27 & tmp28\n    tmp30 = tmp5 & tmp29\n    tmp31 = tl.load(in_ptr0 + (-252 + 2 * x3), tmp30, eviction_policy=\n        'evict_last', other=float('-inf'))\n    tmp32 = triton_helpers.maximum(tmp31, tmp25)\n    tmp33 = 2 * x1\n    tmp34 = tmp33 >= tmp1\n    tmp35 = tmp33 < tmp3\n    tmp36 = tmp34 & tmp35\n    tmp37 = tmp36 & tmp9\n    tmp38 = tl.load(in_ptr0 + (-2 + 2 * x3), tmp37, eviction_policy=\n        'evict_last', other=float('-inf'))\n    tmp39 = triton_helpers.maximum(tmp38, tmp32)\n    tmp40 = tmp36 & tmp15\n    tmp41 = tl.load(in_ptr0 + (2 * x3), tmp40, eviction_policy='evict_last',\n        other=float('-inf'))\n    tmp42 = triton_helpers.maximum(tmp41, tmp39)\n    tmp43 = tmp36 & tmp22\n    tmp44 = tl.load(in_ptr0 + (4 + 2 * x3), tmp43, eviction_policy=\n        'evict_last', other=float('-inf'))\n    tmp45 = triton_helpers.maximum(tmp44, tmp42)\n    tmp46 = tmp36 & tmp29\n    tmp47 = tl.load(in_ptr0 + (6 + 2 * x3), tmp46, eviction_policy=\n        'evict_last', other=float('-inf'))\n    tmp48 = triton_helpers.maximum(tmp47, tmp45)\n    tmp49 = -1 + 2 * x1\n    tmp50 = tmp49 >= tmp1\n    tmp51 = tmp49 < tmp3\n    tmp52 = tmp50 & tmp51\n    tmp53 = tmp52 & tmp9\n    tmp54 = tl.load(in_ptr0 + (-254 + 2 * x3), tmp53, eviction_policy=\n        'evict_last', other=float('-inf'))\n    tmp55 = triton_helpers.maximum(tmp54, tmp48)\n    tmp56 = tmp52 & tmp15\n    tmp57 = tl.load(in_ptr0 + (-252 + 2 * x3), tmp56, eviction_policy=\n        'evict_last', other=float('-inf'))\n    tmp58 = triton_helpers.maximum(tmp57, tmp55)\n    tmp59 = tmp52 & tmp22\n    tmp60 = tl.load(in_ptr0 + (-250 + 2 * x3), tmp59, eviction_policy=\n        'evict_last', other=float('-inf'))\n    tmp61 = triton_helpers.maximum(tmp60, tmp58)\n    tmp62 = tmp52 & tmp29\n    tmp63 = tl.load(in_ptr0 + (-248 + 2 * x3), tmp62, eviction_policy=\n        'evict_last', other=float('-inf'))\n    tmp64 = triton_helpers.maximum(tmp63, tmp61)\n    tmp65 = -2 + 2 * x1\n    tmp66 = tmp65 >= tmp1\n    tmp67 = tmp65 < tmp3\n    tmp68 = tmp66 & tmp67\n    tmp69 = tmp68 & tmp9\n    tmp70 = tl.load(in_ptr0 + (-506 + 2 * x3), tmp69, eviction_policy=\n        'evict_last', other=float('-inf'))\n    tmp71 = triton_helpers.maximum(tmp70, tmp64)\n    tmp72 = tmp68 & tmp15\n    tmp73 = tl.load(in_ptr0 + (-504 + 2 * x3), tmp72, eviction_policy=\n        'evict_last', other=float('-inf'))\n    tmp74 = triton_helpers.maximum(tmp73, tmp71)\n    tmp75 = tmp68 & tmp22\n    tmp76 = tl.load(in_ptr0 + (-502 + 2 * x3), tmp75, eviction_policy=\n        'evict_last', other=float('-inf'))\n    tmp77 = triton_helpers.maximum(tmp76, tmp74)\n    tmp78 = tmp68 & tmp29\n    tmp79 = tl.load(in_ptr0 + (-500 + 2 * x3), tmp78, eviction_policy=\n        'evict_last', other=float('-inf'))\n    tmp80 = triton_helpers.maximum(tmp79, tmp77)\n    tmp81 = 2 * x1\n    tmp82 = tmp81 >= tmp1\n    tmp83 = tmp81 < tmp3\n    tmp84 = tmp82 & tmp83\n    tmp85 = tmp84 & tmp9\n    tmp86 = tl.load(in_ptr0 + (-254 + 2 * x3), tmp85, eviction_policy=\n        'evict_last', other=float('-inf'))\n    tmp87 = triton_helpers.maximum(tmp86, tmp80)\n    tmp88 = tmp84 & tmp15\n    tmp89 = tl.load(in_ptr0 + (-252 + 2 * x3), tmp88, eviction_policy=\n        'evict_last', other=float('-inf'))\n    tmp90 = triton_helpers.maximum(tmp89, tmp87)\n    tmp91 = tmp84 & tmp22\n    tmp92 = tl.load(in_ptr0 + (-250 + 2 * x3), tmp91, eviction_policy=\n        'evict_last', other=float('-inf'))\n    tmp93 = triton_helpers.maximum(tmp92, tmp90)\n    tmp94 = tmp84 & tmp29\n    tmp95 = tl.load(in_ptr0 + (-248 + 2 * x3), tmp94, eviction_policy=\n        'evict_last', other=float('-inf'))\n    tmp96 = triton_helpers.maximum(tmp95, tmp93)\n    tmp97 = 1 + 2 * x1\n    tmp98 = tmp97 >= tmp1\n    tmp99 = tmp97 < tmp3\n    tmp100 = tmp98 & tmp99\n    tmp101 = tmp100 & tmp9\n    tmp102 = tl.load(in_ptr0 + (-254 + 2 * x3), tmp101, eviction_policy=\n        'evict_last', other=float('-inf'))\n    tmp103 = triton_helpers.maximum(tmp102, tmp96)\n    tmp104 = tmp100 & tmp15\n    tmp105 = tl.load(in_ptr0 + (-252 + 2 * x3), tmp104, eviction_policy=\n        'evict_last', other=float('-inf'))\n    tmp106 = triton_helpers.maximum(tmp105, tmp103)\n    tmp107 = tmp100 & tmp22\n    tmp108 = tl.load(in_ptr0 + (-250 + 2 * x3), tmp107, eviction_policy=\n        'evict_last', other=float('-inf'))\n    tmp109 = triton_helpers.maximum(tmp108, tmp106)\n    tmp110 = tmp100 & tmp29\n    tmp111 = tl.load(in_ptr0 + (-248 +",
      "ncu_results": {},
      "metadata": {
        "compilation_error_name": "RuntimeError"
      },
      "compilation_error": "CUDA error: an illegal memory access was encountered\nCUDA kernel errors might be asynchronously reported at some other API call, so the stacktrace below might be incorrect.\nFor debugging consider passing CUDA_LAUNCH_BLOCKING=1\nCompile with `TORCH_USE_CUDA_DSA` to enable device-side assertions.\n",
      "runtime_error": null,
      "generation_error": null
    },
    {
      "round": 5,
      "compiled": false,
      "correctness": false,
      "max_diff": Infinity,
      "avg_diff": Infinity,
      "runtime": null,
      "speedup": null,
      "generated_code": "import torch\nimport triton\nimport triton.language as tl\nfrom torch._inductor.runtime.triton_heuristics import grid\nfrom torch._C import _cuda_getCurrentRawStream as get_raw_stream\nfrom torch._inductor.runtime import triton_helpers\nimport torch.nn as nn\nassert_size_stride = torch._C._dynamo.guards.assert_size_stride\nempty_strided_cuda = torch._C._dynamo.guards._empty_strided_cuda\n\n\n@triton.jit\ndef triton_poi_fused_max_pool2d_with_indices_0(in_ptr0, out_ptr0, xnumel,\n    XBLOCK: tl.constexpr):\n    xoffset = tl.program_id(0) * XBLOCK\n    xindex = xoffset + tl.arange(0, XBLOCK)[:]\n    tl.full([XBLOCK], True, tl.int1)\n    x1 = xindex // 128 % 128\n    x0 = xindex % 128\n    x3 = xindex\n    tmp0 = -3 + 2 * x1\n    tmp1 = tl.full([1], 0, tl.int64)\n    tmp2 = tmp0 >= tmp1\n    tmp3 = tl.full([1], 128, tl.int64)\n    tmp4 = tmp0 < tmp3\n    tmp5 = tmp2 & tmp4\n    tmp6 = -3 + 2 * x0\n    tmp7 = tmp6 >= tmp1\n    tmp8 = tmp6 < tmp3\n    tmp9 = tmp7 & tmp8\n    tmp10 = tmp5 & tmp9\n    tmp11 = tl.load(in_ptr0 + (-258 + 2 * x3), tmp10, eviction_policy=\n        'evict_last', other=float('-inf'))\n    tmp12 = 2 * x0\n    tmp13 = tmp12 >= tmp1\n    tmp14 = tmp12 < tmp3\n    tmp15 = tmp13 & tmp14\n    tmp16 = tmp5 & tmp15\n    tmp17 = tl.load(in_ptr0 + (-256 + 2 * x3), tmp16, eviction_policy=\n        'evict_last', other=float('-inf'))\n    tmp18 = triton_helpers.maximum(tmp17, tmp11)\n    tmp19 = 1 + 2 * x0\n    tmp20 = tmp19 >= tmp1\n    tmp21 = tmp19 < tmp3\n    tmp22 = tmp20 & tmp21\n    tmp23 = tmp5 & tmp22\n    tmp24 = tl.load(in_ptr0 + (-254 + 2 * x3), tmp23, eviction_policy=\n        'evict_last', other=float('-inf'))\n    tmp25 = triton_helpers.maximum(tmp24, tmp18)\n    tmp26 = 2 * x1\n    tmp27 = tmp26 >= tmp1\n    tmp28 = tmp26 < tmp3\n    tmp29 = tmp27 & tmp28\n    tmp30 = tmp29 & tmp9\n    tmp31 = tl.load(in_ptr0 + (-1 + 2 * x3), tmp30, eviction_policy=\n        'evict_last', other=float('-inf'))\n    tmp32 = triton_helpers.maximum(tmp31, tmp25)\n    tmp33 = tmp29 & tmp15\n    tmp34 = tl.load(in_ptr0 + (2 * x3), tmp33, eviction_policy='evict_last',\n        other=float('-inf'))\n    tmp35 = triton_helpers.maximum(tmp34, tmp32)\n    tmp36 = tmp29 & tmp22\n    tmp37 = tl.load(in_ptr0 + (1 + 2 * x3), tmp36, eviction_policy=\n        'evict_last', other=float('-inf'))\n    tmp38 = triton_helpers.maximum(tmp37, tmp35)\n    tmp39 = 1 + 2 * x1\n    tmp40 = tmp39 >= tmp1\n    tmp41 = tmp39 < tmp3\n    tmp42 = tmp40 & tmp41\n    tmp43 = tmp42 & tmp9\n    tmp44 = tl.load(in_ptr0 + (63 + 2 * x3), tmp43, eviction_policy=\n        'evict_last', other=float('-inf'))\n    tmp45 = triton_helpers.maximum(tmp44, tmp38)\n    tmp46 = tmp42 & tmp15\n    tmp47 = tl.load(in_ptr0 + (64 + 2 * x3), tmp46, eviction_policy=\n        'evict_last', other=float('-inf'))\n    tmp48 = triton_helpers.maximum(tmp47, tmp45)\n    tmp49 = tmp42 & tmp22\n    tmp50 = tl.load(in_ptr0 + (65 + 2 * x3), tmp49, eviction_policy=\n        'evict_last', other=float('-inf'))\n    tmp51 = triton_helpers.maximum(tmp50, tmp48)\n    tl.store(out_ptr0 + x3, tmp51, None)\n\n\ndef call(args):\n    arg0_1, = args\n    args.clear()\n    assert_size_stride(arg0_1, (16, 32, 128, 128), (524288, 16384, 128, 1))\n    with torch.cuda._DeviceGuard(0):\n        torch.cuda.set_device(0)\n        buf0 = empty_strided_cuda((16, 32, 128, 128), (524288, 16384, 128, \n            1), torch.float32)\n        get_raw_stream(0)\n        triton_poi_fused_max_pool2d_with_indices_0[grid(8388608)](arg0_1,\n            buf0, 8388608, XBLOCK=512, num_warps=8, num_stages=1)\n        del arg0_1\n    return buf0,\n\n\nclass ModelNew(nn.Module):\n    \"\"\"\n    Simple model that performs Max Pooling 2D.\n    \"\"\"\n    def __init__(self, kernel_size: int, stride: int, padding: int, dilation: int):\n        \"\"\"\n        Initializes the Max Pooling 2D layer.\n\n        Args:\n            kernel_size (int): Size of the pooling window.\n            stride (int): Stride of the pooling window.\n            padding (int): Padding to be applied before pooling.\n            dilation (int): Spacing between kernel elements.\n        \"\"\"\n        super(ModelNew, self).__init__()\n        self.maxpool = nn.MaxPool2d(kernel_size=kernel_size, stride=stride,\n            padding=padding, dilation=dilation)\n\n    def forward(self, input_0):\n        arg0_1 = input_0\n        output = call([arg0_1])\n        return output[0]\n```",
      "ncu_results": {},
      "metadata": {
        "compilation_error_name": "RuntimeError"
      },
      "compilation_error": "CUDA error: an illegal memory access was encountered\nCUDA kernel errors might be asynchronously reported at some other API call, so the stacktrace below might be incorrect.\nFor debugging consider passing CUDA_LAUNCH_BLOCKING=1\nCompile with `TORCH_USE_CUDA_DSA` to enable device-side assertions.\n",
      "runtime_error": null,
      "generation_error": null
    },
    {
      "round": 6,
      "compiled": false,
      "correctness": false,
      "max_diff": Infinity,
      "avg_diff": Infinity,
      "runtime": null,
      "speedup": null,
      "generated_code": "import torch\nimport triton\nimport triton.language as tl\nfrom torch._inductor.runtime.triton_heuristics import grid\nfrom torch._C import _cuda_getCurrentRawStream as get_raw_stream\nfrom torch._inductor.runtime import triton_helpers\nimport torch.nn as nn\nassert_size_stride = torch._C._dynamo.guards.assert_size_stride\nempty_strided_cuda = torch._C._dynamo.guards._empty_strided_cuda\n\n\n@triton.jit\ndef triton_poi_fused_max_pool2d_with_indices_0(in_ptr0, out_ptr0, xnumel,\n    XBLOCK: tl.constexpr):\n    xoffset = tl.program_id(0) * XBLOCK\n    xindex = xoffset + tl.arange(0, XBLOCK)[:]\n    tl.full([XBLOCK], True, tl.int1)\n    x1 = xindex // 128 % 128\n    x0 = xindex % 128\n    x3 = xindex\n    tmp0 = -3 + 2 * x1\n    tmp1 = tl.full([1], 0, tl.int64)\n    tmp2 = tmp0 >= tmp1\n    tmp3 = tl.full([1], 128, tl.int64)\n    tmp4 = tmp0 < tmp3\n    tmp5 = tmp2 & tmp4\n    tmp6 = -3 + 2 * x0\n    tmp7 = tmp6 >= tmp1\n    tmp8 = tmp6 < tmp3\n    tmp9 = tmp7 & tmp8\n    tmp10 = tmp5 & tmp9\n    tmp11 = tl.load(in_ptr0 + (-129 + 2 * x0 + 256 * x1 + 32768 * x3), \n        tmp10, eviction_policy='evict_last', other=float('-inf'))\n    tmp12 = 2 * x0\n    tmp13 = tmp12 >= tmp1\n    tmp14 = tmp12 < tmp3\n    tmp15 = tmp13 & tmp14\n    tmp16 = tmp5 & tmp15\n    tmp17 = tl.load(in_ptr0 + (-128 + 2 * x0 + 256 * x1 + 32768 * x3), \n        tmp16, eviction_policy='evict_last', other=float('-inf'))\n    tmp18 = triton_helpers.maximum(tmp17, tmp11)\n    tmp19 = 1 + 2 * x0\n    tmp20 = tmp19 >= tmp1\n    tmp21 = tmp19 < tmp3\n    tmp22 = tmp20 & tmp21\n    tmp23 = tmp5 & tmp22\n    tmp24 = tl.load(in_ptr0 + (-127 + 2 * x0 + 256 * x1 + 32768 * x3), \n        tmp23, eviction_policy='evict_last', other=float('-inf'))\n    tmp25 = triton_helpers.maximum(tmp24, tmp18)\n    tmp26 = 2 * x1\n    tmp27 = tmp26 >= tmp1\n    tmp28 = tmp26 < tmp3\n    tmp29 = tmp27 & tmp28\n    tmp30 = tmp29 & tmp9\n    tmp31 = tl.load(in_ptr0 + (-1 + 2 * x0 + 256 * x1 + 32768 * x3), tmp30,\n        eviction_policy='evict_last', other=float('-inf'))\n    tmp32 = triton_helpers.maximum(tmp31, tmp25)\n    tmp33 = tmp29 & tmp15\n    tmp34 = tl.load(in_ptr0 + (2 * x0 + 256 * x1 + 32768 * x3), tmp33,\n        eviction_policy='evict_last', other=float('-inf'))\n    tmp35 = triton_helpers.maximum(tmp34, tmp32)\n    tmp36 = tmp29 & tmp22\n    tmp37 = tl.load(in_ptr0 + (1 + 2 * x0 + 256 * x1 + 32768 * x3), tmp36,\n        eviction_policy='evict_last', other=float('-inf'))\n    tmp38 = triton_helpers.maximum(tmp37, tmp35)\n    tmp39 = 1 + 2 * x1\n    tmp40 = tmp39 >= tmp1\n    tmp41 = tmp39 < tmp3\n    tmp42 = tmp40 & tmp41\n    tmp43 = tmp42 & tmp9\n    tmp44 = tl.load(in_ptr0 + (127 + 2 * x0 + 256 * x1 + 32768 * x3), tmp43,\n        eviction_policy='evict_last', other=float('-inf'))\n    tmp45 = triton_helpers.maximum(tmp44, tmp38)\n    tmp46 = tmp42 & tmp15\n    tmp47 = tl.load(in_ptr0 + (128 + 2 * x0 + 256 * x1 + 32768 * x3), tmp46,\n        eviction_policy='evict_last', other=float('-inf'))\n    tmp48 = triton_helpers.maximum(tmp47, tmp45)\n    tmp49 = tmp42 & tmp22\n    tmp50 = tl.load(in_ptr0 + (129 + 2 * x0 + 256 * x1 + 32768 * x3), tmp49,\n        eviction_policy='evict_last', other=float('-inf'))\n    tmp51 = triton_helpers.maximum(tmp50, tmp48)\n    tl.store(out_ptr0 + x3, tmp51, None)\n\n\ndef call(args):\n    arg0_1, = args\n    args.clear()\n    assert_size_stride(arg0_1, (16, 32, 128, 128), (524288, 16384, 128, 1))\n    with torch.cuda._DeviceGuard(0):\n        torch.cuda.set_device(0)\n        buf0 = empty_strided_cuda((16, 32, 128, 128), (524288, 16384, 128, 1\n            ), torch.float32)\n        get_raw_stream(0)\n        triton_poi_fused_max_pool2d_with_indices_0[grid(8388608)](arg0_1,\n            buf0, 8388608, XBLOCK=512, num_warps=8, num_stages=1)\n        del arg0_1\n    return buf0,\n\n\nclass ModelNew(nn.Module):\n    \"\"\"\n    Simple model that performs Max Pooling 2D.\n    \"\"\"\n    def __init__(self, kernel_size: int, stride: int, padding: int, dilation: int):\n        \"\"\"\n        Initializes the Max Pooling 2D layer.\n\n        Args:\n            kernel_size (int): Size of the pooling window.\n            stride (int): Stride of the pooling window.\n            padding (int): Padding to be applied before pooling.\n            dilation (int): Spacing between kernel elements.\n        \"\"\"\n        super(ModelNew, self).__init__()\n        self.maxpool = nn.MaxPool2d(kernel_size=kernel_size, stride=stride,\n            padding=padding, dilation=dilation)\n\n    def forward(self, input_0):\n        arg0_1 = input_0\n        output = call([arg0_1])\n        return output[0]\n```",
      "ncu_results": {},
      "metadata": {
        "compilation_error_name": "RuntimeError"
      },
      "compilation_error": "CUDA error: an illegal memory access was encountered\nCUDA kernel errors might be asynchronously reported at some other API call, so the stacktrace below might be incorrect.\nFor debugging consider passing CUDA_LAUNCH_BLOCKING=1\nCompile with `TORCH_USE_CUDA_DSA` to enable device-side assertions.\n",
      "runtime_error": null,
      "generation_error": null
    },
    {
      "round": 7,
      "compiled": false,
      "correctness": false,
      "max_diff": Infinity,
      "avg_diff": Infinity,
      "runtime": null,
      "speedup": null,
      "generated_code": "import torch\nimport triton\nimport triton.language as tl\nfrom torch._inductor.runtime.triton_heuristics import grid\nfrom torch._C import _cuda_getCurrentRawStream as get_raw_stream\nfrom torch._inductor.runtime import triton_helpers\nimport torch.nn as nn\nassert_size_stride = torch._C._dynamo.guards.assert_size_stride\nempty_strided_cuda = torch._C._dynamo.guards._empty_strided_cuda\n\n\n@triton.jit\ndef triton_poi_fused_max_pool2d_with_indices_0(in_ptr0, out_ptr0, xnumel,\n    XBLOCK: tl.constexpr):\n    xoffset = tl.program_id(0) * XBLOCK\n    xindex = xoffset + tl.arange(0, XBLOCK)[:]\n    tl.full([XBLOCK], True, tl.int1)\n    x1 = xindex // 128 % 128\n    x0 = xindex % 128\n    x3 = xindex\n    tmp0 = -3 + 2 * x1\n    tmp1 = tl.full([1], 0, tl.int64)\n    tmp2 = tmp0 >= tmp1\n    tmp3 = tl.full([1], 128, tl.int64)\n    tmp4 = tmp0 < tmp3\n    tmp5 = tmp2 & tmp4\n    tmp6 = -3 + 2 * x0\n    tmp7 = tmp6 >= tmp1\n    tmp8 = tmp6 < tmp3\n    tmp9 = tmp7 & tmp8\n    tmp10 = tmp5 & tmp9\n    tmp11 = tl.load(in_ptr0 + (-129 + 2 * x0 + 256 * x1 + 32768 * x3), \n        tmp10, eviction_policy='evict_last', other=float('-inf'))\n    tmp12 = 2 * x0\n    tmp13 = tmp12 >= tmp1\n    tmp14 = tmp12 < tmp3\n    tmp15 = tmp13 & tmp14\n    tmp16 = tmp5 & tmp15\n    tmp17 = tl.load(in_ptr0 + (-128 + 2 * x0 + 256 * x1 + 32768 * x3), \n        tmp16, eviction_policy='evict_last', other=float('-inf'))\n    tmp18 = triton_helpers.maximum(tmp17, tmp11)\n    tmp19 = 1 + 2 * x0\n    tmp20 = tmp19 >= tmp1\n    tmp21 = tmp19 < tmp3\n    tmp22 = tmp20 & tmp21\n    tmp23 = tmp5 & tmp22\n    tmp24 = tl.load(in_ptr0 + (-127 + 2 * x0 + 256 * x1 + 32768 * x3), \n        tmp23, eviction_policy='evict_last', other=float('-inf'))\n    tmp25 = triton_helpers.maximum(tmp24, tmp18)\n    tmp26 = 2 * x1\n    tmp27 = tmp26 >= tmp1\n    tmp28 = tmp26 < tmp3\n    tmp29 = tmp27 & tmp28\n    tmp30 = tmp29 & tmp9\n    tmp31 = tl.load(in_ptr0 + (-1 + 2 * x0 + 256 * x1 + 32768 * x3), \n        tmp30, eviction_policy='evict_last', other=float('-inf'))\n    tmp32 = triton_helpers.maximum(tmp31, tmp25)\n    tmp33 = tmp29 & tmp15\n    tmp34 = tl.load(in_ptr0 + (2 * x0 + 256 * x1 + 32768 * x3), tmp33,\n        eviction_policy='evict_last', other=float('-inf'))\n    tmp35 = triton_helpers.maximum(tmp34, tmp32)\n    tmp36 = tmp29 & tmp22\n    tmp37 = tl.load(in_ptr0 + (1 + 2 * x0 + 256 * x1 + 32768 * x3), \n        tmp36, eviction_policy='evict_last', other=float('-inf'))\n    tmp38 = triton_helpers.maximum(tmp37, tmp35)\n    tmp39 = 1 + 2 * x1\n    tmp40 = tmp39 >= tmp1\n    tmp41 = tmp39 < tmp3\n    tmp42 = tmp40 & tmp41\n    tmp43 = tmp42 & tmp9\n    tmp44 = tl.load(in_ptr0 + (127 + 2 * x0 + 256 * x1 + 32768 * x3), \n        tmp43, eviction_policy='evict_last', other=float('-inf'))\n    tmp45 = triton_helpers.maximum(tmp44, tmp38)\n    tmp46 = tmp42 & tmp15\n    tmp47 = tl.load(in_ptr0 + (128 + 2 * x0 + 256 * x1 + 32768 * x3), \n        tmp46, eviction_policy='evict_last', other=float('-inf'))\n    tmp48 = triton_helpers.maximum(tmp47, tmp45)\n    tmp49 = tmp42 & tmp22\n    tmp50 = tl.load(in_ptr0 + (129 + 2 * x0 + 256 * x1 + 32768 * x3), \n        tmp49, eviction_policy='evict_last', other=float('-inf'))\n    tmp51 = triton_helpers.maximum(tmp50, tmp48)\n    tl.store(out_ptr0 + x3, tmp51, None)\n\n\ndef call(args):\n    arg0_1, = args\n    args.clear()\n    assert_size_stride(arg0_1, (16, 32, 128, 128), (524288, 16384, 128, 1))\n    with torch.cuda._DeviceGuard(0):\n        torch.cuda.set_device(0)\n        buf0 = empty_strided_cuda((16, 32, 128, 128), (524288, 16384, 128, \n            1), torch.float32)\n        get_raw_stream(0)\n        triton_poi_fused_max_pool2d_with_indices_0[grid(8388608)](arg0_1,\n            buf0, 8388608, XBLOCK=512, num_warps=8, num_stages=1)\n        del arg0_1\n    return buf0,\n\n\nclass ModelNew(nn.Module):\n    \"\"\"\n    Simple model that performs Max Pooling 2D.\n    \"\"\"\n    def __init__(self, kernel_size: int, stride: int, padding: int, dilation: int):\n        \"\"\"\n        Initializes the Max Pooling 2D layer.\n\n        Args:\n            kernel_size (int): Size of the pooling window.\n            stride (int): Stride of the pooling window.\n            padding (int): Padding to be applied before pooling.\n            dilation (int): Spacing between kernel elements.\n        \"\"\"\n        super(ModelNew, self).__init__()\n        self.maxpool = nn.MaxPool2d(kernel_size=kernel_size, stride=stride,\n            padding=padding, dilation=dilation)\n\n    def forward(self, input_0):\n        arg0_1 = input_0\n        output = call([arg0_1])\n        return output[0]\n```",
      "ncu_results": {},
      "metadata": {
        "compilation_error_name": "RuntimeError"
      },
      "compilation_error": "CUDA error: an illegal memory access was encountered\nCUDA kernel errors might be asynchronously reported at some other API call, so the stacktrace below might be incorrect.\nFor debugging consider passing CUDA_LAUNCH_BLOCKING=1\nCompile with `TORCH_USE_CUDA_DSA` to enable device-side assertions.\n",
      "runtime_error": null,
      "generation_error": null
    },
    {
      "round": 8,
      "compiled": false,
      "correctness": false,
      "max_diff": Infinity,
      "avg_diff": Infinity,
      "runtime": null,
      "speedup": null,
      "generated_code": "import torch\nimport triton\nimport triton.language as tl\nfrom torch._inductor.runtime.triton_heuristics import grid\nfrom torch._C import _cuda_getCurrentRawStream as get_raw_stream\nfrom torch._inductor.runtime import triton_helpers\nimport torch.nn as nn\nassert_size_stride = torch._C._dynamo.guards.assert_size_stride\nempty_strided_cuda = torch._C._dynamo.guards._empty_strided_cuda\n\n\n@triton.jit\ndef triton_poi_fused_max_pool2d_with_indices_0(in_ptr0, out_ptr0, xnumel,\n    XBLOCK: tl.constexpr):\n    xoffset = tl.program_id(0) * XBLOCK\n    xindex = xoffset + tl.arange(0, XBLOCK)[:]\n    tl.full([XBLOCK], True, tl.int1)\n    x1 = xindex // 256 % 256\n    x0 = xindex % 256\n    x3 = xindex\n    tmp0 = -3 + 2 * x1\n    tmp1 = tl.full([1], 0, tl.int64)\n    tmp2 = tmp0 >= tmp1\n    tmp3 = tl.full([1], 128, tl.int64)\n    tmp4 = tmp0 < tmp3\n    tmp5 = tmp2 & tmp4\n    tmp6 = -3 + 2 * x0\n    tmp7 = tmp6 >= tmp1\n    tmp8 = tmp6 < tmp3\n    tmp9 = tmp7 & tmp8\n    tmp10 = tmp5 & tmp9\n    tmp11 = tl.load(in_ptr0 + (-258 + 2 * x0 + 512 * x1), tmp10,\n        eviction_policy='evict_last', other=float('-inf'))\n    tmp12 = -2 + 2 * x0\n    tmp13 = tmp12 >= tmp1\n    tmp14 = tmp12 < tmp3\n    tmp15 = tmp13 & tmp14\n    tmp16 = tmp5 & tmp15\n    tmp17 = tl.load(in_ptr0 + (-256 + 2 * x0 + 512 * x1), tmp16,\n        eviction_policy='evict_last', other=float('-inf'))\n    tmp18 = triton_helpers.maximum(tmp17, tmp11)\n    tmp19 = -1 + 2 * x0\n    tmp20 = tmp19 >= tmp1\n    tmp21 = tmp19 < tmp3\n    tmp22 = tmp20 & tmp21\n    tmp23 = tmp5 & tmp22\n    tmp24 = tl.load(in_ptr0 + (-254 + 2 * x0 + 512 * x1), tmp23,\n        eviction_policy='evict_last', other=float('-inf'))\n    tmp25 = triton_helpers.maximum(tmp24, tmp18)\n    tmp26 = 2 * x0\n    tmp27 = tmp26 >= tmp1\n    tmp28 = tmp26 < tmp3\n    tmp29 = tmp27 & tmp28\n    tmp30 = tmp5 & tmp29\n    tmp31 = tl.load(in_ptr0 + (-252 + 2 * x0 + 512 * x1), tmp30,\n        eviction_policy='evict_last', other=float('-inf'))\n    tmp32 = triton_helpers.maximum(tmp31, tmp25)\n    tmp33 = 1 + 2 * x0\n    tmp34 = tmp33 >= tmp1\n    tmp35 = tmp33 < tmp3\n    tmp36 = tmp34 & tmp35\n    tmp37 = tmp5 & tmp36\n    tmp38 = tl.load(in_ptr0 + (-250 + 2 * x0 + 512 * x1), tmp37,\n        eviction_policy='evict_last', other=float('-inf'))\n    tmp39 = triton_helpers.maximum(tmp38, tmp32)\n    tmp40 = 2 * x1\n    tmp41 = tmp40 >= tmp1\n    tmp42 = tmp40 < tmp3\n    tmp43 = tmp41 & tmp42\n    tmp44 = tmp43 & tmp9\n    tmp45 = tl.load(in_ptr0 + (-1 + 2 * x0 + 512 * x1), tmp44,\n        eviction_policy='evict_last', other=float('-inf'))\n    tmp46 = triton_helpers.maximum(tmp45, tmp39)\n    tmp47 = tmp43 & tmp15\n    tmp48 = tl.load(in_ptr0 + (2 * x0 + 512 * x1), tmp47, eviction_policy\n        ='evict_last', other=float('-inf'))\n    tmp49 = triton_helpers.maximum(tmp48, tmp46)\n    tmp50 = tmp43 & tmp22\n    tmp51 = tl.load(in_ptr0 + (1 + 2 * x0 + 512 * x1), tmp50,\n        eviction_policy='evict_last', other=float('-inf'))\n    tmp52 = triton_helpers.maximum(tmp51, tmp49)\n    tmp53 = tmp43 & tmp29\n    tmp54 = tl.load(in_ptr0 + (2 + 2 * x0 + 512 * x1), tmp53,\n        eviction_policy='evict_last', other=float('-inf'))\n    tmp55 = triton_helpers.maximum(tmp54, tmp52)\n    tmp56 = tmp43 & tmp36\n    tmp57 = tl.load(in_ptr0 + (3 + 2 * x0 + 512 * x1), tmp56,\n        eviction_policy='evict_last', other=float('-inf'))\n    tmp58 = triton_helpers.maximum(tmp57, tmp55)\n    tmp59 = 1 + 2 * x1\n    tmp60 = tmp59 >= tmp1\n    tmp61 = tmp59 < tmp3\n    tmp62 = tmp60 & tmp61\n    tmp63 = tmp62 & tmp9\n    tmp64 = tl.load(in_ptr0 + (63 + 2 * x0 + 512 * x1), tmp63,\n        eviction_policy='evict_last', other=float('-inf'))\n    tmp65 = triton_helpers.maximum(tmp64, tmp58)\n    tmp66 = tmp62 & tmp15\n    tmp67 = tl.load(in_ptr0 + (64 + 2 * x0 + 512 * x1), tmp66,\n        eviction_policy='evict_last', other=float('-inf'))\n    tmp68 = triton_helpers.maximum(tmp67, tmp65)\n    tmp69 = tmp62 & tmp22\n    tmp70 = tl.load(in_ptr0 + (65 + 2 * x0 + 512 * x1), tmp69,\n        eviction_policy='evict_last', other=float('-inf'))\n    tmp71 = triton_helpers.maximum(tmp70, tmp68)\n    tmp72 = tmp62 & tmp29\n    tmp73 = tl.load(in_ptr0 + (66 + 2 * x0 + 512 * x1), tmp72,\n        eviction_policy='evict_last', other=float('-inf'))\n    tmp74 = triton_helpers.maximum(tmp73, tmp71)\n    tmp75 = tmp62 & tmp36\n    tmp76 = tl.load(in_ptr0 + (67 + 2 * x0 + 512 * x1), tmp75,\n        eviction_policy='evict_last', other=float('-inf'))\n    tmp77 = triton_helpers.maximum(tmp76, tmp74)\n    tmp78 = 2 + 2 * x1\n    tmp79 = tmp78 >= tmp1\n    tmp80 = tmp78 < tmp3\n    tmp81 = tmp79 & tmp80\n    tmp82 = tmp81 & tmp9\n    tmp83 = tl.load(in_ptr0 + (127 + 2 * x0 + 512 * x1), tmp82,\n        eviction_policy='evict_last', other=float('-inf'))\n    tmp84 = triton_helpers.maximum(tmp83, tmp77)\n    tmp85 = tmp81 & tmp15\n    tmp86 = tl.load(in_ptr0 + (128 + 2 * x0 + 512 * x1), tmp85,\n        eviction_policy='evict_last', other=float('-inf'))\n    tmp87 = triton_helpers.maximum(tmp86, tmp84)\n    tmp88 = tmp81 & tmp22\n    tmp89 = tl.load(in_ptr0 + (129 + 2 * x0 + 512 * x1), tmp88,\n        eviction_policy='evict_last', other=float('-inf'))\n    tmp90 = triton_helpers.maximum(tmp89, tmp87)\n    tmp91 = tmp81 & tmp29\n    tmp92 = tl.load(in_ptr0 + (130 + 2 * x0 + 512 * x1), tmp91,\n        eviction_policy='evict_last', other=float('-inf'))\n    tmp93 = triton_helpers.maximum(tmp92, tmp90)\n    tmp94 = tmp81 & tmp36\n    tmp95 = tl.load(in_ptr0 + (131 + 2 * x0 + 512 * x1), tmp94,\n        eviction_policy='evict_last', other=float('-inf'))\n    tmp96 = triton_helpers.maximum(tmp95, tmp93)\n    tl.store(out_ptr0 + x3, tmp96, None)\n\n\ndef call(args):\n    arg0_1, = args\n    args.clear()\n    assert_size_stride(arg0_1, (16, 32, 128, 128), (524288, 16384, 128, 1))\n    with torch.cuda._DeviceGuard(0):\n        torch.cuda.set_device(0)\n        buf0 = empty_strided_cuda((16, 32, 256, 256), (2097152, 65536, 256, \n            1), torch.float32)\n        get_raw_stream(0)\n        triton_poi_fused_max",
      "ncu_results": {},
      "metadata": {
        "compilation_error_name": "RuntimeError"
      },
      "compilation_error": "CUDA error: an illegal memory access was encountered\nCUDA kernel errors might be asynchronously reported at some other API call, so the stacktrace below might be incorrect.\nFor debugging consider passing CUDA_LAUNCH_BLOCKING=1\nCompile with `TORCH_USE_CUDA_DSA` to enable device-side assertions.\n",
      "runtime_error": null,
      "generation_error": null
    },
    {
      "round": 9,
      "compiled": false,
      "correctness": false,
      "max_diff": Infinity,
      "avg_diff": Infinity,
      "runtime": null,
      "speedup": null,
      "generated_code": "import torch\nimport triton\nimport triton.language as tl\nfrom torch._inductor.runtime.triton_heuristics import grid\nfrom torch._C import _cuda_getCurrentRawStream as get_raw_stream\nfrom torch._inductor.runtime import triton_helpers\nimport torch.nn as nn\nassert_size_stride = torch._C._dynamo.guards.assert_size_stride\nempty_strided_cuda = torch._C._dynamo.guards._empty_strided_cuda\n\n\n@triton.jit\ndef triton_poi_fused_max_pool2d_with_indices_0(in_ptr0, out_ptr0, xnumel,\n    XBLOCK: tl.constexpr):\n    xoffset = tl.program_id(0) * XBLOCK\n    xindex = xoffset + tl.arange(0, XBLOCK)[:]\n    tl.full([XBLOCK], True, tl.int1)\n    x1 = xindex // 128 % 128\n    x0 = xindex % 128\n    x3 = xindex\n    tmp0 = -3 + 2 * x1\n    tmp1 = tl.full([1], 0, tl.int64)\n    tmp2 = tmp0 >= tmp1\n    tmp3 = tl.full([1], 128, tl.int64)\n    tmp4 = tmp0 < tmp3\n    tmp5 = tmp2 & tmp4\n    tmp6 = -3 + 2 * x0\n    tmp7 = tmp6 >= tmp1\n    tmp8 = tmp6 < tmp3\n    tmp9 = tmp7 & tmp8\n    tmp10 = tmp5 & tmp9\n    tmp11 = tl.load(in_ptr0 + (-129 + 2 * x0 + 256 * x1 + 32768 * x3), \n        tmp10, eviction_policy='evict_last', other=float('-inf'))\n    tmp12 = -2 + 2 * x0\n    tmp13 = tmp12 >= tmp1\n    tmp14 = tmp12 < tmp3\n    tmp15 = tmp13 & tmp14\n    tmp16 = tmp5 & tmp15\n    tmp17 = tl.load(in_ptr0 + (-128 + 2 * x0 + 256 * x1 + 32768 * x3), \n        tmp16, eviction_policy='evict_last', other=float('-inf'))\n    tmp18 = triton_helpers.maximum(tmp17, tmp11)\n    tmp19 = -1 + 2 * x0\n    tmp20 = tmp19 >= tmp1\n    tmp21 = tmp19 < tmp3\n    tmp22 = tmp20 & tmp21\n    tmp23 = tmp5 & tmp22\n    tmp24 = tl.load(in_ptr0 + (-127 + 2 * x0 + 256 * x1 + 32768 * x3), \n        tmp23, eviction_policy='evict_last', other=float('-inf'))\n    tmp25 = triton_helpers.maximum(tmp24, tmp18)\n    tmp26 = 2 * x0\n    tmp27 = tmp26 >= tmp1\n    tmp28 = tmp26 < tmp3\n    tmp29 = tmp27 & tmp28\n    tmp30 = tmp5 & tmp29\n    tmp31 = tl.load(in_ptr0 + (-126 + 2 * x0 + 256 * x1 + 32768 * x3), \n        tmp30, eviction_policy='evict_last', other=float('-inf'))\n    tmp32 = triton_helpers.maximum(tmp31, tmp25)\n    tmp33 = 1 + 2 * x0\n    tmp34 = tmp33 >= tmp1\n    tmp35 = tmp33 < tmp3\n    tmp36 = tmp34 & tmp35\n    tmp37 = tmp5 & tmp36\n    tmp38 = tl.load(in_ptr0 + (-125 + 2 * x0 + 256 * x1 + 32768 * x3), \n        tmp37, eviction_policy='evict_last', other=float('-inf'))\n    tmp39 = triton_helpers.maximum(tmp38, tmp32)\n    tmp40 = 2 * x1\n    tmp41 = tmp40 >= tmp1\n    tmp42 = tmp40 < tmp3\n    tmp43 = tmp41 & tmp42\n    tmp44 = tmp43 & tmp9\n    tmp45 = tl.load(in_ptr0 + (-1 + 2 * x0 + 256 * x1 + 32768 * x3), tmp44,\n        eviction_policy='evict_last', other=float('-inf'))\n    tmp46 = triton_helpers.maximum(tmp45, tmp39)\n    tmp47 = tmp43 & tmp15\n    tmp48 = tl.load(in_ptr0 + (2 * x0 + 256 * x1 + 32768 * x3), tmp47,\n        eviction_policy='evict_last', other=float('-inf'))\n    tmp49 = triton_helpers.maximum(tmp48, tmp46)\n    tmp50 = tmp43 & tmp22\n    tmp51 = tl.load(in_ptr0 + (1 + 2 * x0 + 256 * x1 + 32768 * x3), tmp50,\n        eviction_policy='evict_last', other=float('-inf'))\n    tmp52 = triton_helpers.maximum(tmp51, tmp49)\n    tmp53 = tmp43 & tmp29\n    tmp54 = tl.load(in_ptr0 + (2 + 2 * x0 + 256 * x1 + 32768 * x3), tmp53,\n        eviction_policy='evict_last', other=float('-inf'))\n    tmp55 = triton_helpers.maximum(tmp54, tmp52)\n    tmp56 = tmp43 & tmp36\n    tmp57 = tl.load(in_ptr0 + (3 + 2 * x0 + 256 * x1 + 32768 * x3), tmp56,\n        eviction_policy='evict_last', other=float('-inf'))\n    tmp58 = triton_helpers.maximum(tmp57, tmp55)\n    tmp59 = 1 + 2 * x1\n    tmp60 = tmp59 >= tmp1\n    tmp61 = tmp59 < tmp3\n    tmp62 = tmp60 & tmp61\n    tmp63 = tmp62 & tmp9\n    tmp64 = tl.load(in_ptr0 + (63 + 2 * x0 + 256 * x1 + 32768 * x3), tmp63,\n        eviction_policy='evict_last', other=float('-inf'))\n    tmp65 = triton_helpers.maximum(tmp64, tmp58)\n    tmp66 = tmp62 & tmp15\n    tmp67 = tl.load(in_ptr0 + (64 + 2 * x0 + 256 * x1 + 32768 * x3), tmp66,\n        eviction_policy='evict_last', other=float('-inf'))\n    tmp68 = triton_helpers.maximum(tmp67, tmp65)\n    tmp69 = tmp62 & tmp22\n    tmp70 = tl.load(in_ptr0 + (65 + 2 * x0 + 256 * x1 + 32768 * x3), tmp69,\n        eviction_policy='evict_last', other=float('-inf'))\n    tmp71 = triton_helpers.maximum(tmp70, tmp68)\n    tmp72 = tmp62 & tmp29\n    tmp73 = tl.load(in_ptr0 + (66 + 2 * x0 + 256 * x1 + 32768 * x3), tmp72,\n        eviction_policy='evict_last', other=float('-inf'))\n    tmp74 = triton_helpers.maximum(tmp73, tmp71)\n    tmp75 = tmp62 & tmp36\n    tmp76 = tl.load(in_ptr0 + (67 + 2 * x0 + 256 * x1 + 32768 * x3), tmp75,\n        eviction_policy='evict_last', other=float('-inf'))\n    tmp77 = triton_helpers.maximum(tmp76, tmp74)\n    tmp78 = 2 + 2 * x1\n    tmp79 = tmp78 >= tmp1\n    tmp80 = tmp78 < tmp3\n    tmp81 = tmp79 & tmp80\n    tmp82 = tmp81 & tmp9\n    tmp83 = tl.load(in_ptr0 + (127 + 2 * x0 + 256 * x1 + 32768 * x3), tmp82,\n        eviction_policy='evict_last', other=float('-inf'))\n    tmp84 = triton_helpers.maximum(tmp83, tmp77)\n    tmp85 = tmp81 & tmp15\n    tmp86 = tl.load(in_ptr0 + (128 + 2 * x0 + 256 * x1 + 32768 * x3), tmp85,\n        eviction_policy='evict_last', other=float('-inf'))\n    tmp87 = triton_helpers.maximum(tmp86, tmp84)\n    tmp88 = tmp81 & tmp22\n    tmp89 = tl.load(in_ptr0 + (129 + 2 * x0 + 256 * x1 + 32768 * x3), tmp88,\n        eviction_policy='evict_last', other=float('-inf'))\n    tmp90 = triton_helpers.maximum(tmp89, tmp87)\n    tmp91 = tmp81 & tmp29\n    tmp92 = tl.load(in_ptr0 + (130 + 2 * x0 + 256 * x1 + 32768 * x3), tmp91,\n        eviction_policy='evict_last', other=float('-inf'))\n    tmp93 = triton_helpers.maximum(tmp92, tmp90)\n    tmp94 = tmp81 & tmp36\n    tmp95 = tl.load(in_ptr0 + (131 + 2 * x0 + 256 * x1 + 32768 * x3), tmp94,\n        eviction_policy='evict_last', other=float('-inf'))\n    tmp96 = triton_helpers.maximum(tmp95,",
      "ncu_results": {},
      "metadata": {
        "compilation_error_name": "RuntimeError"
      },
      "compilation_error": "CUDA error: an illegal memory access was encountered\nCUDA kernel errors might be asynchronously reported at some other API call, so the stacktrace below might be incorrect.\nFor debugging consider passing CUDA_LAUNCH_BLOCKING=1\nCompile with `TORCH_USE_CUDA_DSA` to enable device-side assertions.\n",
      "runtime_error": null,
      "generation_error": null
    }
  ]
}