{
  "name": "prefill_attn_raggedkv",
  "type": "prefill_attention_ragged",
  "description": "Batch prefill/append attention on Ragged KV-Cache (FlashInfer plan/run API).",
  "axes": {
    "B": { "type": "var" },
    "B_plus_1": { "type": "var", "parent": "B" },
    "Q_tot": { "type": "var" },
    "KV_tot": { "type": "var" },
    "H_qo": { "type": "var" },
    "H_kv": { "type": "var" },
    "D_qk": { "type": "const", "value": 128 },
    "D_vo": { "type": "const", "value": 128 }
  },
  "constraints": [
    "B_plus_1 == B + 1",
    "num_qo_heads == H_qo",
    "num_kv_heads == H_kv",
    "head_dim_qk == D_qk",
    "Q_tot == qo_indptr[-1]",
    "KV_tot == kv_indptr[-1]"
  ],
  "inputs": {
    "q": {
      "shape": ["Q_tot", "H_qo", "D_qk"],
      "dtype": "float16"
    },
    "k": {
      "shape": ["KV_tot", "H_kv", "D_qk"],
      "dtype": "float16"
    },
    "v": {
      "shape": ["KV_tot", "H_kv", "D_vo"],
      "dtype": "float16"
    },
    "qo_indptr": {
      "shape": ["B_plus_1"],
      "dtype": "int32"
    },
    "kv_indptr": {
      "shape": ["B_plus_1"],
      "dtype": "int32"
    },
    "num_qo_heads": {
      "shape": [],
      "dtype": "int32"
    },
    "num_kv_heads": {
      "shape": [],
      "dtype": "int32"
    },
    "head_dim_qk": {
      "shape": [],
      "dtype": "int32"
    }
  },
  "outputs": {
    "out": {
      "shape": ["Q_tot", "H_qo", "D_vo"],
      "dtype": "float16"
    },
    "lse": {
      "shape": ["Q_tot", "H_qo"],
      "dtype": "float32"
    }
  },
  "reference": "import torch\nfrom flashinfer.prefill import BatchPrefillWithRaggedKVCacheWrapper\n\ndef run(\n    q, k, v,\n    qo_indptr, kv_indptr,\n    num_qo_heads, num_kv_heads, head_dim_qk\n):\n    device = q.device\n    workspace_buffer = torch.empty(128 * 1024 * 1024, dtype=torch.uint8, device=device)\n\n    wrapper = BatchPrefillWithRaggedKVCacheWrapper(workspace_buffer, \"NHD\")\n    wrapper.plan(\n        qo_indptr,\n        kv_indptr,\n        num_qo_heads,\n        num_kv_heads,\n        head_dim_qk,\n        causal=True,\n    )\n\n    out = wrapper.run(\n        q=q,\n        k=k,\n        v=v,\n    )\n    return out"
}