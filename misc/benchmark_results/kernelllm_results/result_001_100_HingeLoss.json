{
  "device_info": {
    "device_name": "NVIDIA GeForce RTX 4090",
    "device_id": 0,
    "device_str": "cuda:0",
    "compute_capability": [
      8,
      9
    ],
    "total_memory": 25386352640,
    "driver_version": "12.4",
    "backend": "triton"
  },
  "kernel_spec": {
    "description_file": "benchmark/level1/100_HingeLoss.py",
    "generator_file": "generators/kernelllm_generator.py",
    "warmup": 5,
    "iterations": 10,
    "max_diff_limit": 1e-05,
    "report_n": 10,
    "correctness_trials": 1,
    "seed": 42,
    "backend": "triton",
    "use_ncu": false
  },
  "baseline_time": 0.01802240014076233,
  "success_rate": 1.0,
  "avg_speedup": 0.7046373946376818,
  "max_speedup": 0.9560346494371197,
  "compilation_success_rate": 1.0,
  "correctness_success_rate": 1.0,
  "generations": [
    {
      "round": 0,
      "compiled": true,
      "correctness": true,
      "max_diff": 0.0,
      "avg_diff": 0.0,
      "runtime": 0.020790399610996248,
      "speedup": 0.866861651434064,
      "generated_code": "import torch\nimport triton\nimport triton.language as tl\nfrom torch._inductor.runtime.triton_heuristics import grid\nfrom torch._C import _cuda_getCurrentRawStream as get_raw_stream\nfrom torch._inductor.runtime import triton_helpers\nimport torch.nn as nn\nassert_size_stride = torch._C._dynamo.guards.assert_size_stride\nempty_strided_cuda = torch._C._dynamo.guards._empty_strided_cuda\n\n\n@triton.jit\ndef triton_per_fused_clamp_mean_mul_rsub_sub_0(in_out_ptr0, in_ptr0, in_ptr1,\n    xnumel, rnumel, XBLOCK: tl.constexpr):\n    RBLOCK: tl.constexpr = 128\n    xoffset = tl.program_id(0) * XBLOCK\n    xoffset + tl.arange(0, XBLOCK)[:, None]\n    tl.full([XBLOCK, RBLOCK], True, tl.int1)\n    rindex = tl.arange(0, RBLOCK)[None, :]\n    tl.full([XBLOCK, RBLOCK], True, tl.int1)\n    r0 = rindex\n    tmp0 = tl.load(in_ptr0 + r0, None)\n    tmp1 = tl.load(in_ptr1 + r0, None)\n    tmp2 = tmp0 * tmp1\n    tmp3 = 1.0\n    tmp4 = tmp3 - tmp2\n    tmp5 = 0.0\n    tmp6 = triton_helpers.maximum(tmp4, tmp5)\n    tmp7 = tl.broadcast_to(tmp6, [XBLOCK, RBLOCK])\n    tmp9 = tl.sum(tmp7, 1)[:, None]\n    tmp10 = 128.0\n    tmp11 = tmp9 / tmp10\n    tl.debug_barrier()\n    tl.store(in_out_ptr0 + tl.full([XBLOCK, 1], 0, tl.int32), tmp11, None)\n\n\ndef call(args):\n    arg0_1, arg1_1 = args\n    args.clear()\n    assert_size_stride(arg0_1, (128, 1), (1, 1))\n    assert_size_stride(arg1_1, (128, 1), (1, 1))\n    with torch.cuda._DeviceGuard(0):\n        torch.cuda.set_device(0)\n        buf0 = empty_strided_cuda((), (), torch.float32)\n        buf1 = buf0\n        del buf0\n        get_raw_stream(0)\n        triton_per_fused_clamp_mean_mul_rsub_sub_0[grid(1)](buf1, arg0_1,\n            arg1_1, 1, 128, XBLOCK=1, num_warps=2, num_stages=1)\n        del arg0_1\n        del arg1_1\n    return buf1,\n\n\nclass ModelNew(nn.Module):\n    \"\"\"\n    A model that computes Hinge Loss for binary classification tasks.\n\n    Parameters:\n        None\n    \"\"\"\n    def __init__(self):\n        super(ModelNew, self).__init__()\n\n    def forward(self, input_0, input_1):\n        arg0_1 = input_0\n        arg1_1 = input_1\n        output = call([arg0_1, arg1_1])\n        return output[0]\n```",
      "ncu_results": {},
      "metadata": {
        "correctness_trials_attempted": 1,
        "max_differences": [
          "0.000000"
        ],
        "avg_differences": [
          "0.000000"
        ],
        "trial_results": [
          {
            "trial": 0,
            "seed": 1608637542,
            "original_output_type": "<class 'torch.Tensor'>",
            "custom_output_type": "<class 'torch.Tensor'>",
            "original_output_shape": "torch.Size([])",
            "original_output_dtype": "torch.float32",
            "custom_output_shape": "torch.Size([])",
            "custom_output_dtype": "torch.float32",
            "status": "pass",
            "max_diff": 0.0,
            "avg_diff": 0.0
          }
        ],
        "pass_count": 1,
        "total_trials": 1,
        "correctness_summary": "(1 / 1)",
        "overall_max_diff": 0.0,
        "overall_avg_diff": 0.0
      },
      "compilation_error": null,
      "runtime_error": null,
      "generation_error": null
    },
    {
      "round": 1,
      "compiled": true,
      "correctness": true,
      "max_diff": 0.0,
      "avg_diff": 0.0,
      "runtime": 0.0188511997461319,
      "speedup": 0.9560346494371197,
      "generated_code": "import torch\nimport triton\nimport triton.language as tl\nfrom torch._inductor.runtime.triton_heuristics import grid\nfrom torch._C import _cuda_getCurrentRawStream as get_raw_stream\nfrom torch._inductor.runtime import triton_helpers\nimport torch.nn as nn\nassert_size_stride = torch._C._dynamo.guards.assert_size_stride\nempty_strided_cuda = torch._C._dynamo.guards._empty_strided_cuda\n\n\n@triton.jit\ndef triton_per_fused_clamp_mean_mul_rsub_0(in_out_ptr0, in_ptr0, in_ptr1,\n    xnumel, rnumel, XBLOCK: tl.constexpr):\n    RBLOCK: tl.constexpr = 128\n    xoffset = tl.program_id(0) * XBLOCK\n    xoffset + tl.arange(0, XBLOCK)[:, None]\n    tl.full([XBLOCK, RBLOCK], True, tl.int1)\n    rindex = tl.arange(0, RBLOCK)[None, :]\n    tl.full([XBLOCK, RBLOCK], True, tl.int1)\n    r0 = rindex\n    tmp0 = tl.load(in_ptr0 + r0, None)\n    tmp1 = tl.load(in_ptr1 + r0, None)\n    tmp2 = tmp0 * tmp1\n    tmp3 = 1.0\n    tmp4 = tmp3 - tmp2\n    tmp5 = 0.0\n    tmp6 = triton_helpers.maximum(tmp4, tmp5)\n    tmp7 = tl.broadcast_to(tmp6, [XBLOCK, RBLOCK])\n    tmp9 = tl.sum(tmp7, 1)[:, None]\n    tmp10 = 128.0\n    tmp11 = tmp9 / tmp10\n    tl.debug_barrier()\n    tl.store(in_out_ptr0 + tl.full([XBLOCK, 1], 0, tl.int32), tmp11, None)\n\n\ndef call(args):\n    arg0_1, arg1_1 = args\n    args.clear()\n    assert_size_stride(arg0_1, (128, 1), (1, 1))\n    assert_size_stride(arg1_1, (128, 1), (1, 1))\n    with torch.cuda._DeviceGuard(0):\n        torch.cuda.set_device(0)\n        buf0 = empty_strided_cuda((), (), torch.float32)\n        buf1 = buf0\n        del buf0\n        get_raw_stream(0)\n        triton_per_fused_clamp_mean_mul_rsub_0[grid(1)](buf1, arg0_1,\n            arg1_1, 1, 128, XBLOCK=1, num_warps=2, num_stages=1)\n        del arg0_1\n        del arg1_1\n    return buf1,\n\n\nclass ModelNew(nn.Module):\n    \"\"\"\n    A model that computes Hinge Loss for binary classification tasks.\n\n    Parameters:\n        None\n    \"\"\"\n    def __init__(self):\n        super(ModelNew, self).__init__()\n\n    def forward(self, input_0, input_1):\n        arg0_1 = input_0\n        arg1_1 = input_1\n        output = call([arg0_1, arg1_1])\n        return output[0]\n```",
      "ncu_results": {},
      "metadata": {
        "correctness_trials_attempted": 1,
        "max_differences": [
          "0.000000"
        ],
        "avg_differences": [
          "0.000000"
        ],
        "trial_results": [
          {
            "trial": 0,
            "seed": 1608637542,
            "original_output_type": "<class 'torch.Tensor'>",
            "custom_output_type": "<class 'torch.Tensor'>",
            "original_output_shape": "torch.Size([])",
            "original_output_dtype": "torch.float32",
            "custom_output_shape": "torch.Size([])",
            "custom_output_dtype": "torch.float32",
            "status": "pass",
            "max_diff": 0.0,
            "avg_diff": 0.0
          }
        ],
        "pass_count": 1,
        "total_trials": 1,
        "correctness_summary": "(1 / 1)",
        "overall_max_diff": 0.0,
        "overall_avg_diff": 0.0
      },
      "compilation_error": null,
      "runtime_error": null,
      "generation_error": null
    },
    {
      "round": 2,
      "compiled": true,
      "correctness": true,
      "max_diff": 0.0,
      "avg_diff": 0.0,
      "runtime": 0.019148799777030944,
      "speedup": 0.9411764888982893,
      "generated_code": "import torch\nimport triton\nimport triton.language as tl\nfrom torch._inductor.runtime.triton_heuristics import grid\nfrom torch._C import _cuda_getCurrentRawStream as get_raw_stream\nfrom torch._inductor.runtime import triton_helpers\nimport torch.nn as nn\nassert_size_stride = torch._C._dynamo.guards.assert_size_stride\nempty_strided_cuda = torch._C._dynamo.guards._empty_strided_cuda\n\n\n@triton.jit\ndef triton_per_fused_clamp_mean_mul_rsub_0(in_out_ptr0, in_ptr0, in_ptr1,\n    xnumel, rnumel, XBLOCK: tl.constexpr):\n    RBLOCK: tl.constexpr = 128\n    xoffset = tl.program_id(0) * XBLOCK\n    xoffset + tl.arange(0, XBLOCK)[:, None]\n    tl.full([XBLOCK, RBLOCK], True, tl.int1)\n    rindex = tl.arange(0, RBLOCK)[None, :]\n    tl.full([XBLOCK, RBLOCK], True, tl.int1)\n    r0 = rindex\n    tmp0 = tl.load(in_ptr0 + r0, None)\n    tmp1 = tl.load(in_ptr1 + r0, None)\n    tmp2 = tmp0 * tmp1\n    tmp3 = 1.0\n    tmp4 = tmp3 - tmp2\n    tmp5 = 0.0\n    tmp6 = triton_helpers.maximum(tmp4, tmp5)\n    tmp7 = tl.broadcast_to(tmp6, [XBLOCK, RBLOCK])\n    tmp9 = tl.sum(tmp7, 1)[:, None]\n    tmp10 = 128.0\n    tmp11 = tmp9 / tmp10\n    tl.debug_barrier()\n    tl.store(in_out_ptr0 + tl.full([XBLOCK, 1], 0, tl.int32), tmp11, None)\n\n\ndef call(args):\n    arg0_1, arg1_1 = args\n    args.clear()\n    assert_size_stride(arg0_1, (128, 1), (1, 1))\n    assert_size_stride(arg1_1, (128, 1), (1, 1))\n    with torch.cuda._DeviceGuard(0):\n        torch.cuda.set_device(0)\n        buf0 = empty_strided_cuda((), (), torch.float32)\n        buf1 = buf0\n        del buf0\n        get_raw_stream(0)\n        triton_per_fused_clamp_mean_mul_rsub_0[grid(1)](buf1, arg0_1,\n            arg1_1, 1, 128, XBLOCK=1, num_warps=2, num_stages=1)\n        del arg0_1\n        del arg1_1\n    return buf1,\n\n\nclass ModelNew(nn.Module):\n    \"\"\"\n    A model that computes Hinge Loss for binary classification tasks.\n\n    Parameters:\n        None\n    \"\"\"\n    def __init__(self):\n        super(ModelNew, self).__init__()\n\n    def forward(self, input_0, input_1):\n        arg0_1 = input_0\n        arg1_1 = input_1\n        output = call([arg0_1, arg1_1])\n        return output[0]\n```",
      "ncu_results": {},
      "metadata": {
        "correctness_trials_attempted": 1,
        "max_differences": [
          "0.000000"
        ],
        "avg_differences": [
          "0.000000"
        ],
        "trial_results": [
          {
            "trial": 0,
            "seed": 1608637542,
            "original_output_type": "<class 'torch.Tensor'>",
            "custom_output_type": "<class 'torch.Tensor'>",
            "original_output_shape": "torch.Size([])",
            "original_output_dtype": "torch.float32",
            "custom_output_shape": "torch.Size([])",
            "custom_output_dtype": "torch.float32",
            "status": "pass",
            "max_diff": 0.0,
            "avg_diff": 0.0
          }
        ],
        "pass_count": 1,
        "total_trials": 1,
        "correctness_summary": "(1 / 1)",
        "overall_max_diff": 0.0,
        "overall_avg_diff": 0.0
      },
      "compilation_error": null,
      "runtime_error": null,
      "generation_error": null
    },
    {
      "round": 3,
      "compiled": true,
      "correctness": true,
      "max_diff": 0.0,
      "avg_diff": 0.0,
      "runtime": 0.01887679994106293,
      "speedup": 0.954738101639674,
      "generated_code": "import torch\nimport triton\nimport triton.language as tl\nfrom torch._inductor.runtime.triton_heuristics import grid\nfrom torch._C import _cuda_getCurrentRawStream as get_raw_stream\nfrom torch._inductor.runtime import triton_helpers\nimport torch.nn as nn\nassert_size_stride = torch._C._dynamo.guards.assert_size_stride\nempty_strided_cuda = torch._C._dynamo.guards._empty_strided_cuda\n\n\n@triton.jit\ndef triton_per_fused_clamp_mean_mul_rsub_0(in_out_ptr0, in_ptr0, in_ptr1,\n    xnumel, rnumel, XBLOCK: tl.constexpr):\n    RBLOCK: tl.constexpr = 128\n    xoffset = tl.program_id(0) * XBLOCK\n    xoffset + tl.arange(0, XBLOCK)[:, None]\n    tl.full([XBLOCK, RBLOCK], True, tl.int1)\n    rindex = tl.arange(0, RBLOCK)[None, :]\n    tl.full([XBLOCK, RBLOCK], True, tl.int1)\n    r0 = rindex\n    tmp0 = tl.load(in_ptr0 + r0, None)\n    tmp1 = tl.load(in_ptr1 + r0, None)\n    tmp2 = tmp0 * tmp1\n    tmp3 = 1.0\n    tmp4 = tmp3 - tmp2\n    tmp5 = 0.0\n    tmp6 = triton_helpers.maximum(tmp4, tmp5)\n    tmp7 = tl.broadcast_to(tmp6, [XBLOCK, RBLOCK])\n    tmp9 = tl.sum(tmp7, 1)[:, None]\n    tmp10 = 128.0\n    tmp11 = tmp9 / tmp10\n    tl.debug_barrier()\n    tl.store(in_out_ptr0 + tl.full([XBLOCK, 1], 0, tl.int32), tmp11, None)\n\n\ndef call(args):\n    arg0_1, arg1_1 = args\n    args.clear()\n    assert_size_stride(arg0_1, (128, 1), (1, 1))\n    assert_size_stride(arg1_1, (128, 1), (1, 1))\n    with torch.cuda._DeviceGuard(0):\n        torch.cuda.set_device(0)\n        buf0 = empty_strided_cuda((), (), torch.float32)\n        buf1 = buf0\n        del buf0\n        get_raw_stream(0)\n        triton_per_fused_clamp_mean_mul_rsub_0[grid(1)](buf1, arg0_1,\n            arg1_1, 1, 128, XBLOCK=1, num_warps=2, num_stages=1)\n        del arg0_1\n        del arg1_1\n    return buf1,\n\n\nclass ModelNew(nn.Module):\n    \"\"\"\n    A model that computes Hinge Loss for binary classification tasks.\n\n    Parameters:\n        None\n    \"\"\"\n    def __init__(self):\n        super(ModelNew, self).__init__()\n\n    def forward(self, input_0, input_1):\n        arg0_1 = input_0\n        arg1_1 = input_1\n        output = call([arg0_1, arg1_1])\n        return output[0]\n```",
      "ncu_results": {},
      "metadata": {
        "correctness_trials_attempted": 1,
        "max_differences": [
          "0.000000"
        ],
        "avg_differences": [
          "0.000000"
        ],
        "trial_results": [
          {
            "trial": 0,
            "seed": 1608637542,
            "original_output_type": "<class 'torch.Tensor'>",
            "custom_output_type": "<class 'torch.Tensor'>",
            "original_output_shape": "torch.Size([])",
            "original_output_dtype": "torch.float32",
            "custom_output_shape": "torch.Size([])",
            "custom_output_dtype": "torch.float32",
            "status": "pass",
            "max_diff": 0.0,
            "avg_diff": 0.0
          }
        ],
        "pass_count": 1,
        "total_trials": 1,
        "correctness_summary": "(1 / 1)",
        "overall_max_diff": 0.0,
        "overall_avg_diff": 0.0
      },
      "compilation_error": null,
      "runtime_error": null,
      "generation_error": null
    },
    {
      "round": 4,
      "compiled": true,
      "correctness": true,
      "max_diff": 0.0,
      "avg_diff": 0.0,
      "runtime": 0.03134399950504303,
      "speedup": 0.5749872519575127,
      "generated_code": "import torch\nimport triton\nimport triton.language as tl\nfrom torch._inductor.runtime.triton_heuristics import grid\nfrom torch._C import _cuda_getCurrentRawStream as get_raw_stream\nfrom torch._inductor.runtime import triton_helpers\nimport torch.nn as nn\nassert_size_stride = torch._C._dynamo.guards.assert_size_stride\nempty_strided_cuda = torch._C._dynamo.guards._empty_strided_cuda\n\n\n@triton.jit\ndef triton_per_fused_clamp_mean_mul_rsub_sub_0(in_out_ptr0, in_ptr0, in_ptr1,\n    xnumel, rnumel, XBLOCK: tl.constexpr):\n    RBLOCK: tl.constexpr = 128\n    xoffset = tl.program_id(0) * XBLOCK\n    xoffset + tl.arange(0, XBLOCK)[:, None]\n    tl.full([XBLOCK, RBLOCK], True, tl.int1)\n    rindex = tl.arange(0, RBLOCK)[None, :]\n    tl.full([XBLOCK, RBLOCK], True, tl.int1)\n    r0 = rindex\n    tmp0 = tl.load(in_ptr0 + r0, None)\n    tmp1 = tl.load(in_ptr1 + r0, None)\n    tmp2 = tmp0 * tmp1\n    tmp3 = 1.0\n    tmp4 = tmp3 - tmp2\n    tmp5 = 0.0\n    tmp6 = triton_helpers.maximum(tmp4, tmp5)\n    tmp7 = tl.broadcast_to(tmp6, [XBLOCK, RBLOCK])\n    tmp9 = tl.sum(tmp7, 1)[:, None]\n    tmp10 = 128.0\n    tmp11 = tmp9 / tmp10\n    tl.debug_barrier()\n    tl.store(in_out_ptr0 + tl.full([XBLOCK, 1], 0, tl.int32), tmp11, None)\n\n\ndef call(args):\n    arg0_1, arg1_1 = args\n    args.clear()\n    assert_size_stride(arg0_1, (128, 1), (1, 1))\n    assert_size_stride(arg1_1, (128, 1), (1, 1))\n    with torch.cuda._DeviceGuard(0):\n        torch.cuda.set_device(0)\n        buf0 = empty_strided_cuda((), (), torch.float32)\n        buf1 = buf0\n        del buf0\n        get_raw_stream(0)\n        triton_per_fused_clamp_mean_mul_rsub_sub_0[grid(1)](buf1, arg0_1,\n            arg1_1, 1, 128, XBLOCK=1, num_warps=2, num_stages=1)\n        del arg0_1\n        del arg1_1\n    return buf1,\n\n\nclass ModelNew(nn.Module):\n    \"\"\"\n    A model that computes Hinge Loss for binary classification tasks.\n\n    Parameters:\n        None\n    \"\"\"\n    def __init__(self):\n        super(ModelNew, self).__init__()\n\n    def forward(self, input_0, input_1):\n        arg0_1 = input_0\n        arg1_1 = input_1\n        output = call([arg0_1, arg1_1])\n        return output[0]\n```",
      "ncu_results": {},
      "metadata": {
        "correctness_trials_attempted": 1,
        "max_differences": [
          "0.000000"
        ],
        "avg_differences": [
          "0.000000"
        ],
        "trial_results": [
          {
            "trial": 0,
            "seed": 1608637542,
            "original_output_type": "<class 'torch.Tensor'>",
            "custom_output_type": "<class 'torch.Tensor'>",
            "original_output_shape": "torch.Size([])",
            "original_output_dtype": "torch.float32",
            "custom_output_shape": "torch.Size([])",
            "custom_output_dtype": "torch.float32",
            "status": "pass",
            "max_diff": 0.0,
            "avg_diff": 0.0
          }
        ],
        "pass_count": 1,
        "total_trials": 1,
        "correctness_summary": "(1 / 1)",
        "overall_max_diff": 0.0,
        "overall_avg_diff": 0.0
      },
      "compilation_error": null,
      "runtime_error": null,
      "generation_error": null
    },
    {
      "round": 5,
      "compiled": true,
      "correctness": true,
      "max_diff": 0.0,
      "avg_diff": 0.0,
      "runtime": 0.0328031986951828,
      "speedup": 0.5494098398217777,
      "generated_code": "import torch\nimport triton\nimport triton.language as tl\nfrom torch._inductor.runtime.triton_heuristics import grid\nfrom torch._C import _cuda_getCurrentRawStream as get_raw_stream\nfrom torch._inductor.runtime import triton_helpers\nimport torch.nn as nn\nassert_size_stride = torch._C._dynamo.guards.assert_size_stride\nempty_strided_cuda = torch._C._dynamo.guards._empty_strided_cuda\n\n\n@triton.jit\ndef triton_per_fused_clamp_mean_mul_rsub_0(in_out_ptr0, in_ptr0, in_ptr1,\n    xnumel, rnumel):\n    XBLOCK: tl.constexpr = 1\n    RBLOCK: tl.constexpr = 128\n    xoffset = tl.program_id(0) * XBLOCK\n    tl.full([1], xoffset, tl.int32)\n    tl.full([RBLOCK], True, tl.int1)\n    rindex = tl.arange(0, RBLOCK)[:]\n    tl.full([RBLOCK], True, tl.int1)\n    r0 = rindex\n    tmp0 = tl.load(in_ptr0 + r0, None)\n    tmp1 = tl.load(in_ptr1 + r0, None)\n    tmp2 = tmp0 * tmp1\n    tmp3 = 1.0\n    tmp4 = tmp3 - tmp2\n    tmp5 = 0.0\n    tmp6 = triton_helpers.maximum(tmp4, tmp5)\n    tmp7 = tl.broadcast_to(tmp6, [RBLOCK])\n    tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))\n    tmp10 = 128.0\n    tmp11 = tmp9 / tmp10\n    tl.debug_barrier()\n    tl.store(in_out_ptr0 + tl.full([1], 0, tl.int32), tmp11, None)\n\n\ndef call(args):\n    arg0_1, arg1_1 = args\n    args.clear()\n    assert_size_stride(arg0_1, (128, 1), (1, 1))\n    assert_size_stride(arg1_1, (128, 1), (1, 1))\n    with torch.cuda._DeviceGuard(0):\n        torch.cuda.set_device(0)\n        buf0 = empty_strided_cuda((), (), torch.float32)\n        buf1 = buf0\n        del buf0\n        get_raw_stream(0)\n        triton_per_fused_clamp_mean_mul_rsub_0[grid(1)](buf1, arg0_1, arg1_1,\n            1, 128, num_warps=2, num_stages=1)\n        del arg0_1\n        del arg1_1\n    return buf1,\n\n\nclass ModelNew(nn.Module):\n    \"\"\"\n    A model that computes Hinge Loss for binary classification tasks.\n\n    Parameters:\n        None\n    \"\"\"\n    def __init__(self):\n        super(ModelNew, self).__init__()\n\n    def forward(self, input_0, input_1):\n        arg0_1 = input_0\n        arg1_1 = input_1\n        output = call([arg0_1, arg1_1])\n        return output[0]\n```",
      "ncu_results": {},
      "metadata": {
        "correctness_trials_attempted": 1,
        "max_differences": [
          "0.000000"
        ],
        "avg_differences": [
          "0.000000"
        ],
        "trial_results": [
          {
            "trial": 0,
            "seed": 1608637542,
            "original_output_type": "<class 'torch.Tensor'>",
            "custom_output_type": "<class 'torch.Tensor'>",
            "original_output_shape": "torch.Size([])",
            "original_output_dtype": "torch.float32",
            "custom_output_shape": "torch.Size([])",
            "custom_output_dtype": "torch.float32",
            "status": "pass",
            "max_diff": 0.0,
            "avg_diff": 0.0
          }
        ],
        "pass_count": 1,
        "total_trials": 1,
        "correctness_summary": "(1 / 1)",
        "overall_max_diff": 0.0,
        "overall_avg_diff": 0.0
      },
      "compilation_error": null,
      "runtime_error": null,
      "generation_error": null
    },
    {
      "round": 6,
      "compiled": true,
      "correctness": true,
      "max_diff": 0.0,
      "avg_diff": 0.0,
      "runtime": 0.03184320032596588,
      "speedup": 0.5659732676450343,
      "generated_code": "import torch\nimport triton\nimport triton.language as tl\nfrom torch._inductor.runtime.triton_heuristics import grid\nfrom torch._C import _cuda_getCurrentRawStream as get_raw_stream\nfrom torch._inductor.runtime import triton_helpers\nimport torch.nn as nn\nassert_size_stride = torch._C._dynamo.guards.assert_size_stride\nempty_strided_cuda = torch._C._dynamo.guards._empty_strided_cuda\n\n\n@triton.jit\ndef triton_per_fused_clamp_mean_mul_rsub_sub_0(in_out_ptr0, in_ptr0, in_ptr1,\n    xnumel, rnumel, XBLOCK: tl.constexpr):\n    RBLOCK: tl.constexpr = 128\n    xoffset = tl.program_id(0) * XBLOCK\n    xoffset + tl.arange(0, XBLOCK)[:, None]\n    tl.full([XBLOCK, RBLOCK], True, tl.int1)\n    rindex = tl.arange(0, RBLOCK)[None, :]\n    tl.full([XBLOCK, RBLOCK], True, tl.int1)\n    r0 = rindex\n    tmp0 = tl.load(in_ptr0 + r0, None)\n    tmp1 = tl.load(in_ptr1 + r0, None)\n    tmp2 = tmp0 * tmp1\n    tmp3 = 1.0\n    tmp4 = tmp3 - tmp2\n    tmp5 = 0.0\n    tmp6 = triton_helpers.maximum(tmp4, tmp5)\n    tmp7 = tl.broadcast_to(tmp6, [XBLOCK, RBLOCK])\n    tmp9 = tl.sum(tmp7, 1)[:, None]\n    tmp10 = 128.0\n    tmp11 = tmp9 / tmp10\n    tl.debug_barrier()\n    tl.store(in_out_ptr0 + tl.full([XBLOCK, 1], 0, tl.int32), tmp11, None)\n\n\ndef call(args):\n    arg0_1, arg1_1 = args\n    args.clear()\n    assert_size_stride(arg0_1, (128, 1), (1, 1))\n    assert_size_stride(arg1_1, (128, 1), (1, 1))\n    with torch.cuda._DeviceGuard(0):\n        torch.cuda.set_device(0)\n        buf0 = empty_strided_cuda((), (), torch.float32)\n        buf1 = buf0\n        del buf0\n        get_raw_stream(0)\n        triton_per_fused_clamp_mean_mul_rsub_sub_0[grid(1)](buf1, arg0_1,\n            arg1_1, 1, 128, XBLOCK=1, num_warps=2, num_stages=1)\n        del arg0_1\n        del arg1_1\n    return buf1,\n\n\nclass ModelNew(nn.Module):\n    \"\"\"\n    A model that computes Hinge Loss for binary classification tasks.\n\n    Parameters:\n        None\n    \"\"\"\n    def __init__(self):\n        super(ModelNew, self).__init__()\n\n    def forward(self, input_0, input_1):\n        arg0_1 = input_0\n        arg1_1 = input_1\n        output = call([arg0_1, arg1_1])\n        return output[0]\n```",
      "ncu_results": {},
      "metadata": {
        "correctness_trials_attempted": 1,
        "max_differences": [
          "0.000000"
        ],
        "avg_differences": [
          "0.000000"
        ],
        "trial_results": [
          {
            "trial": 0,
            "seed": 1608637542,
            "original_output_type": "<class 'torch.Tensor'>",
            "custom_output_type": "<class 'torch.Tensor'>",
            "original_output_shape": "torch.Size([])",
            "original_output_dtype": "torch.float32",
            "custom_output_shape": "torch.Size([])",
            "custom_output_dtype": "torch.float32",
            "status": "pass",
            "max_diff": 0.0,
            "avg_diff": 0.0
          }
        ],
        "pass_count": 1,
        "total_trials": 1,
        "correctness_summary": "(1 / 1)",
        "overall_max_diff": 0.0,
        "overall_avg_diff": 0.0
      },
      "compilation_error": null,
      "runtime_error": null,
      "generation_error": null
    },
    {
      "round": 7,
      "compiled": true,
      "correctness": true,
      "max_diff": 0.0,
      "avg_diff": 0.0,
      "runtime": 0.03256320059299469,
      "speedup": 0.5534591137407876,
      "generated_code": "import torch\nimport triton\nimport triton.language as tl\nfrom torch._inductor.runtime.triton_heuristics import grid\nfrom torch._C import _cuda_getCurrentRawStream as get_raw_stream\nfrom torch._inductor.runtime import triton_helpers\nimport torch.nn as nn\nassert_size_stride = torch._C._dynamo.guards.assert_size_stride\nempty_strided_cuda = torch._C._dynamo.guards._empty_strided_cuda\n\n\n@triton.jit\ndef triton_per_fused_clamp_mean_mul_rsub_sub_0(in_out_ptr0, in_ptr0, in_ptr1,\n    xnumel, rnumel, XBLOCK: tl.constexpr):\n    RBLOCK: tl.constexpr = 128\n    xoffset = tl.program_id(0) * XBLOCK\n    xoffset + tl.arange(0, XBLOCK)[:, None]\n    tl.full([XBLOCK, RBLOCK], True, tl.int1)\n    rindex = tl.arange(0, RBLOCK)[None, :]\n    tl.full([XBLOCK, RBLOCK], True, tl.int1)\n    r0 = rindex\n    tmp0 = tl.load(in_ptr0 + r0, None)\n    tmp1 = tl.load(in_ptr1 + r0, None)\n    tmp2 = tmp0 * tmp1\n    tmp3 = 1.0\n    tmp4 = tmp3 - tmp2\n    tmp5 = 0.0\n    tmp6 = triton_helpers.maximum(tmp4, tmp5)\n    tmp7 = tl.broadcast_to(tmp6, [XBLOCK, RBLOCK])\n    tmp9 = tl.sum(tmp7, 1)[:, None]\n    tmp10 = 128.0\n    tmp11 = tmp9 / tmp10\n    tl.debug_barrier()\n    tl.store(in_out_ptr0 + tl.full([XBLOCK, 1], 0, tl.int32), tmp11, None)\n\n\ndef call(args):\n    arg0_1, arg1_1 = args\n    args.clear()\n    assert_size_stride(arg0_1, (128, 1), (1, 1))\n    assert_size_stride(arg1_1, (128, 1), (1, 1))\n    with torch.cuda._DeviceGuard(0):\n        torch.cuda.set_device(0)\n        buf0 = empty_strided_cuda((), (), torch.float32)\n        buf1 = buf0\n        del buf0\n        get_raw_stream(0)\n        triton_per_fused_clamp_mean_mul_rsub_sub_0[grid(1)](buf1, arg0_1,\n            arg1_1, 1, 128, XBLOCK=1, num_warps=2, num_stages=1)\n        del arg0_1\n        del arg1_1\n    return buf1,\n\n\nclass ModelNew(nn.Module):\n    \"\"\"\n    A model that computes Hinge Loss for binary classification tasks.\n\n    Parameters:\n        None\n    \"\"\"\n    def __init__(self):\n        super(ModelNew, self).__init__()\n\n    def forward(self, input_0, input_1):\n        arg0_1 = input_0\n        arg1_1 = input_1\n        output = call([arg0_1, arg1_1])\n        return output[0]\n```",
      "ncu_results": {},
      "metadata": {
        "correctness_trials_attempted": 1,
        "max_differences": [
          "0.000000"
        ],
        "avg_differences": [
          "0.000000"
        ],
        "trial_results": [
          {
            "trial": 0,
            "seed": 1608637542,
            "original_output_type": "<class 'torch.Tensor'>",
            "custom_output_type": "<class 'torch.Tensor'>",
            "original_output_shape": "torch.Size([])",
            "original_output_dtype": "torch.float32",
            "custom_output_shape": "torch.Size([])",
            "custom_output_dtype": "torch.float32",
            "status": "pass",
            "max_diff": 0.0,
            "avg_diff": 0.0
          }
        ],
        "pass_count": 1,
        "total_trials": 1,
        "correctness_summary": "(1 / 1)",
        "overall_max_diff": 0.0,
        "overall_avg_diff": 0.0
      },
      "compilation_error": null,
      "runtime_error": null,
      "generation_error": null
    },
    {
      "round": 8,
      "compiled": true,
      "correctness": true,
      "max_diff": 0.0,
      "avg_diff": 0.0,
      "runtime": 0.03246079981327057,
      "speedup": 0.5552050548487855,
      "generated_code": "import torch\nimport triton\nimport triton.language as tl\nfrom torch._inductor.runtime.triton_heuristics import grid\nfrom torch._C import _cuda_getCurrentRawStream as get_raw_stream\nfrom torch._inductor.runtime import triton_helpers\nimport torch.nn as nn\nassert_size_stride = torch._C._dynamo.guards.assert_size_stride\nempty_strided_cuda = torch._C._dynamo.guards._empty_strided_cuda\n\n\n@triton.jit\ndef triton_per_fused_clamp_mean_mul_rsub_sub_0(in_out_ptr0, in_ptr0, in_ptr1,\n    xnumel, rnumel, XBLOCK: tl.constexpr):\n    RBLOCK: tl.constexpr = 128\n    xoffset = tl.program_id(0) * XBLOCK\n    xoffset + tl.arange(0, XBLOCK)[:, None]\n    tl.full([XBLOCK, RBLOCK], True, tl.int1)\n    rindex = tl.arange(0, RBLOCK)[None, :]\n    tl.full([XBLOCK, RBLOCK], True, tl.int1)\n    r0 = rindex\n    tmp0 = tl.load(in_ptr0 + r0, None)\n    tmp1 = tl.load(in_ptr1 + r0, None)\n    tmp2 = tmp0 * tmp1\n    tmp3 = 1.0\n    tmp4 = tmp3 - tmp2\n    tmp5 = 0.0\n    tmp6 = triton_helpers.maximum(tmp4, tmp5)\n    tmp7 = tl.broadcast_to(tmp6, [XBLOCK, RBLOCK])\n    tmp9 = tl.sum(tmp7, 1)[:, None]\n    tmp10 = 128.0\n    tmp11 = tmp9 / tmp10\n    tl.debug_barrier()\n    tl.store(in_out_ptr0 + tl.full([XBLOCK, 1], 0, tl.int32), tmp11, None)\n\n\ndef call(args):\n    arg0_1, arg1_1 = args\n    args.clear()\n    assert_size_stride(arg0_1, (128, 1), (1, 1))\n    assert_size_stride(arg1_1, (128, 1), (1, 1))\n    with torch.cuda._DeviceGuard(0):\n        torch.cuda.set_device(0)\n        buf0 = empty_strided_cuda((), (), torch.float32)\n        buf1 = buf0\n        del buf0\n        get_raw_stream(0)\n        triton_per_fused_clamp_mean_mul_rsub_sub_0[grid(1)](buf1, arg0_1,\n            arg1_1, 1, 128, XBLOCK=1, num_warps=2, num_stages=1)\n        del arg0_1\n        del arg1_1\n    return buf1,\n\n\nclass ModelNew(nn.Module):\n    \"\"\"\n    A model that computes Hinge Loss for binary classification tasks.\n\n    Parameters:\n        None\n    \"\"\"\n    def __init__(self):\n        super(ModelNew, self).__init__()\n\n    def forward(self, input_0, input_1):\n        arg0_1 = input_0\n        arg1_1 = input_1\n        output = call([arg0_1, arg1_1])\n        return output[0]\n```",
      "ncu_results": {},
      "metadata": {
        "correctness_trials_attempted": 1,
        "max_differences": [
          "0.000000"
        ],
        "avg_differences": [
          "0.000000"
        ],
        "trial_results": [
          {
            "trial": 0,
            "seed": 1608637542,
            "original_output_type": "<class 'torch.Tensor'>",
            "custom_output_type": "<class 'torch.Tensor'>",
            "original_output_shape": "torch.Size([])",
            "original_output_dtype": "torch.float32",
            "custom_output_shape": "torch.Size([])",
            "custom_output_dtype": "torch.float32",
            "status": "pass",
            "max_diff": 0.0,
            "avg_diff": 0.0
          }
        ],
        "pass_count": 1,
        "total_trials": 1,
        "correctness_summary": "(1 / 1)",
        "overall_max_diff": 0.0,
        "overall_avg_diff": 0.0
      },
      "compilation_error": null,
      "runtime_error": null,
      "generation_error": null
    },
    {
      "round": 9,
      "compiled": true,
      "correctness": true,
      "max_diff": 0.0,
      "avg_diff": 0.0,
      "runtime": 0.03409920036792755,
      "speedup": 0.5285285269537737,
      "generated_code": "import torch\nimport triton\nimport triton.language as tl\nfrom torch._inductor.runtime.triton_heuristics import grid\nfrom torch._C import _cuda_getCurrentRawStream as get_raw_stream\nfrom torch._inductor.runtime import triton_helpers\nimport torch.nn as nn\nassert_size_stride = torch._C._dynamo.guards.assert_size_stride\nempty_strided_cuda = torch._C._dynamo.guards._empty_strided_cuda\n\n\n@triton.jit\ndef triton_per_fused_clamp_mean_mul_rsub_sub_0(in_out_ptr0, in_ptr0, in_ptr1,\n    xnumel, rnumel, XBLOCK: tl.constexpr):\n    RBLOCK: tl.constexpr = 128\n    xoffset = tl.program_id(0) * XBLOCK\n    xoffset + tl.arange(0, XBLOCK)[:, None]\n    tl.full([XBLOCK, RBLOCK], True, tl.int1)\n    rindex = tl.arange(0, RBLOCK)[None, :]\n    tl.full([XBLOCK, RBLOCK], True, tl.int1)\n    r0 = rindex\n    tmp0 = tl.load(in_ptr0 + r0, None)\n    tmp1 = tl.load(in_ptr1 + r0, None)\n    tmp2 = tmp0 * tmp1\n    tmp3 = 1.0\n    tmp4 = tmp3 - tmp2\n    tmp5 = 0.0\n    tmp6 = triton_helpers.maximum(tmp4, tmp5)\n    tmp7 = tl.broadcast_to(tmp6, [XBLOCK, RBLOCK])\n    tmp9 = tl.sum(tmp7, 1)[:, None]\n    tmp10 = 128.0\n    tmp11 = tmp9 / tmp10\n    tl.debug_barrier()\n    tl.store(in_out_ptr0 + tl.full([XBLOCK, 1], 0, tl.int32), tmp11, None)\n\n\ndef call(args):\n    arg0_1, arg1_1 = args\n    args.clear()\n    assert_size_stride(arg0_1, (128, 1), (1, 1))\n    assert_size_stride(arg1_1, (128, 1), (1, 1))\n    with torch.cuda._DeviceGuard(0):\n        torch.cuda.set_device(0)\n        buf0 = empty_strided_cuda((), (), torch.float32)\n        buf1 = buf0\n        del buf0\n        get_raw_stream(0)\n        triton_per_fused_clamp_mean_mul_rsub_sub_0[grid(1)](buf1, arg0_1,\n            arg1_1, 1, 128, XBLOCK=1, num_warps=2, num_stages=1)\n        del arg0_1\n        del arg1_1\n    return buf1,\n\n\nclass ModelNew(nn.Module):\n    \"\"\"\n    A model that computes Hinge Loss for binary classification tasks.\n\n    Parameters:\n        None\n    \"\"\"\n    def __init__(self):\n        super(ModelNew, self).__init__()\n\n    def forward(self, input_0, input_1):\n        arg0_1 = input_0\n        arg1_1 = input_1\n        output = call([arg0_1, arg1_1])\n        return output[0]\n```",
      "ncu_results": {},
      "metadata": {
        "correctness_trials_attempted": 1,
        "max_differences": [
          "0.000000"
        ],
        "avg_differences": [
          "0.000000"
        ],
        "trial_results": [
          {
            "trial": 0,
            "seed": 1608637542,
            "original_output_type": "<class 'torch.Tensor'>",
            "custom_output_type": "<class 'torch.Tensor'>",
            "original_output_shape": "torch.Size([])",
            "original_output_dtype": "torch.float32",
            "custom_output_shape": "torch.Size([])",
            "custom_output_dtype": "torch.float32",
            "status": "pass",
            "max_diff": 0.0,
            "avg_diff": 0.0
          }
        ],
        "pass_count": 1,
        "total_trials": 1,
        "correctness_summary": "(1 / 1)",
        "overall_max_diff": 0.0,
        "overall_avg_diff": 0.0
      },
      "compilation_error": null,
      "runtime_error": null,
      "generation_error": null
    }
  ]
}