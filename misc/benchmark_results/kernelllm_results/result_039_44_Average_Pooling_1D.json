{
  "device_info": {
    "device_name": "NVIDIA GeForce RTX 4090",
    "device_id": 0,
    "device_str": "cuda:0",
    "compute_capability": [
      8,
      9
    ],
    "total_memory": 25386352640,
    "driver_version": "12.4",
    "backend": "triton"
  },
  "kernel_spec": {
    "description_file": "benchmark/level1/44_Average_Pooling_1D.py",
    "generator_file": "generators/kernelllm_generator.py",
    "warmup": 5,
    "iterations": 10,
    "max_diff_limit": 1e-05,
    "report_n": 10,
    "correctness_trials": 1,
    "seed": 42,
    "backend": "triton",
    "use_ncu": false
  },
  "baseline_time": 0.008396799862384795,
  "success_rate": 0.4,
  "avg_speedup": 0.34195055888523224,
  "max_speedup": 0.46254184733648396,
  "compilation_success_rate": 1.0,
  "correctness_success_rate": 0.4,
  "generations": [
    {
      "round": 0,
      "compiled": true,
      "correctness": true,
      "max_diff": 0.0,
      "avg_diff": 0.0,
      "runtime": 0.02109439969062805,
      "speedup": 0.3980582517413557,
      "generated_code": "import torch\nimport triton\nimport triton.language as tl\nfrom torch._inductor.runtime.triton_heuristics import grid\nfrom torch._C import _cuda_getCurrentRawStream as get_raw_stream\nimport torch.nn as nn\nassert_size_stride = torch._C._dynamo.guards.assert_size_stride\nempty_strided_cuda = torch._C._dynamo.guards._empty_strided_cuda\nreinterpret_tensor = torch._C._dynamo.guards._reinterpret_tensor\n\n\n@triton.jit\ndef triton_poi_fused_avg_pool2d_0(in_ptr0, out_ptr0, xnumel, XBLOCK: tl.\n    constexpr):\n    xoffset = tl.program_id(0) * XBLOCK\n    xindex = xoffset + tl.arange(0, XBLOCK)[:]\n    tl.full([XBLOCK], True, tl.int1)\n    x0 = xindex % 64\n    x2 = xindex\n    tmp0 = tl.full([1], 0, tl.int64)\n    tmp1 = tmp0 >= tmp0\n    tmp2 = tl.full([1], 1, tl.int64)\n    tmp3 = tmp0 < tmp2\n    tmp4 = tmp1 & tmp3\n    tmp5 = -1 + 2 * x0\n    tmp6 = tmp5 >= tmp0\n    tmp7 = tl.full([1], 128, tl.int64)\n    tmp8 = tmp5 < tmp7\n    tmp9 = tmp6 & tmp8\n    tmp10 = tmp4 & tmp9\n    tmp11 = tl.load(in_ptr0 + (-1 + 2 * x2), tmp10, eviction_policy=\n        'evict_last', other=0.0)\n    tmp12 = 2 * x0\n    tmp13 = tmp12 >= tmp0\n    tmp14 = tmp12 < tmp7\n    tmp15 = tmp13 & tmp14\n    tmp16 = tmp4 & tmp15\n    tmp17 = tl.load(in_ptr0 + 2 * x2, tmp16, eviction_policy='evict_last',\n        other=0.0)\n    tmp18 = tmp17 + tmp11\n    tmp19 = 1 + 2 * x0\n    tmp20 = tmp19 >= tmp0\n    tmp21 = tmp19 < tmp7\n    tmp22 = tmp20 & tmp21\n    tmp23 = tmp4 & tmp22\n    tmp24 = tl.load(in_ptr0 + (1 + 2 * x2), tmp23, eviction_policy=\n        'evict_last', other=0.0)\n    tmp25 = tmp24 + tmp18\n    tmp26 = 2 + 2 * x0\n    tmp27 = tmp26 >= tmp0\n    tmp28 = tmp26 < tmp7\n    tmp29 = tmp27 & tmp28\n    tmp30 = tmp4 & tmp29\n    tmp31 = tl.load(in_ptr0 + (2 + 2 * x2), tmp30, eviction_policy=\n        'evict_last', other=0.0)\n    tmp32 = tmp31 + tmp25\n    tmp33 = 1 + -2 * x0 + (129 * (129 <= 3 + 2 * x0) + (3 + 2 * x0) * (3 + \n        2 * x0 < 129))\n    tmp34 = tmp32 / tmp33\n    tl.store(out_ptr0 + x2, tmp34, None)\n\n\ndef call(args):\n    arg0_1, = args\n    args.clear()\n    assert_size_stride(arg0_1, (16, 32, 128), (4096, 128, 1))\n    with torch.cuda._DeviceGuard(0):\n        torch.cuda.set_device(0)\n        buf0 = empty_strided_cuda((16, 32, 1, 64), (2048, 64, 64, 1), torch.\n            float32)\n        get_raw_stream(0)\n        triton_poi_fused_avg_pool2d_0[grid(32768)](arg0_1, buf0, 32768,\n            XBLOCK=128, num_warps=4, num_stages=1)\n        del arg0_1\n    return reinterpret_tensor(buf0, (16, 32, 64), (2048, 64, 1), 0),\n\n\nclass ModelNew(nn.Module):\n    \"\"\"\n    Simple model that performs 1D Average Pooling.\n    \"\"\"\n\n    def __init__(self, kernel_size: 'int', stride: 'int'=1, padding: 'int'=0):\n        \"\"\"\n        Initializes the 1D Average Pooling layer.\n\n        Args:\n            kernel_size (int): Size of the pooling window.\n            stride (int, optional): Stride of the pooling operation. Defaults to 1.\n            padding (int, optional): Padding applied to the input tensor. Defaults to 0.\n        \"\"\"\n        super(ModelNew, self).__init__()\n        self.avg_pool = nn.AvgPool1d(kernel_size=kernel_size, stride=stride,\n            padding=padding)\n\n    def forward(self, input_0):\n        arg0_1 = input_0\n        output = call([arg0_1])\n        return output[0]\n```",
      "ncu_results": {},
      "metadata": {
        "correctness_trials_attempted": 1,
        "max_differences": [
          "0.000000"
        ],
        "avg_differences": [
          "0.000000"
        ],
        "trial_results": [
          {
            "trial": 0,
            "seed": 1608637542,
            "original_output_type": "<class 'torch.Tensor'>",
            "custom_output_type": "<class 'torch.Tensor'>",
            "original_output_shape": "torch.Size([16, 32, 64])",
            "original_output_dtype": "torch.float32",
            "custom_output_shape": "torch.Size([16, 32, 64])",
            "custom_output_dtype": "torch.float32",
            "status": "pass",
            "max_diff": 0.0,
            "avg_diff": 0.0
          }
        ],
        "pass_count": 1,
        "total_trials": 1,
        "correctness_summary": "(1 / 1)",
        "overall_max_diff": 0.0,
        "overall_avg_diff": 0.0
      },
      "compilation_error": null,
      "runtime_error": null,
      "generation_error": null
    },
    {
      "round": 1,
      "compiled": true,
      "correctness": false,
      "max_diff": 0.8046252727508545,
      "avg_diff": 0.13146662712097168,
      "runtime": null,
      "speedup": null,
      "generated_code": "import torch\nimport triton\nimport triton.language as tl\nfrom torch._inductor.runtime.triton_heuristics import grid\nfrom torch._C import _cuda_getCurrentRawStream as get_raw_stream\nimport torch.nn as nn\nassert_size_stride = torch._C._dynamo.guards.assert_size_stride\nempty_strided_cuda = torch._C._dynamo.guards._empty_strided_cuda\nreinterpret_tensor = torch._C._dynamo.guards._reinterpret_tensor\n\n\n@triton.jit\ndef triton_poi_fused_avg_pool2d_0(in_ptr0, out_ptr0, xnumel, XBLOCK: tl.\n    constexpr):\n    xoffset = tl.program_id(0) * XBLOCK\n    xindex = xoffset + tl.arange(0, XBLOCK)[:]\n    tl.full([XBLOCK], True, tl.int1)\n    x0 = xindex % 64\n    x2 = xindex\n    tmp0 = tl.full([1], 0, tl.int64)\n    tmp1 = tmp0 >= tmp0\n    tmp2 = tl.full([1], 1, tl.int64)\n    tmp3 = tmp0 < tmp2\n    tmp4 = tmp1 & tmp3\n    tmp5 = -1 + 2 * x0\n    tmp6 = tmp5 >= tmp0\n    tmp7 = tl.full([1], 128, tl.int64)\n    tmp8 = tmp5 < tmp7\n    tmp9 = tmp6 & tmp8\n    tmp10 = tmp4 & tmp9\n    tmp11 = tl.load(in_ptr0 + (-1 + 2 * x2), tmp10, eviction_policy=\n        'evict_last', other=0.0)\n    tmp12 = 2 * x0\n    tmp13 = tmp12 >= tmp0\n    tmp14 = tmp12 < tmp7\n    tmp15 = tmp13 & tmp14\n    tmp16 = tmp4 & tmp15\n    tmp17 = tl.load(in_ptr0 + 2 * x2, tmp16, eviction_policy='evict_last',\n        other=0.0)\n    tmp18 = tmp17 + tmp11\n    tmp19 = 1 + 2 * x0\n    tmp20 = tmp19 >= tmp0\n    tmp21 = tmp19 < tmp7\n    tmp22 = tmp20 & tmp21\n    tmp23 = tmp4 & tmp22\n    tmp24 = tl.load(in_ptr0 + (1 + 2 * x2), tmp23, eviction_policy=\n        'evict_last', other=0.0)\n    tmp25 = tmp24 + tmp18\n    tmp26 = 2 + 2 * x0\n    tmp27 = tmp26 >= tmp0\n    tmp28 = tmp26 < tmp7\n    tmp29 = tmp27 & tmp28\n    tmp30 = tmp4 & tmp29\n    tmp31 = tl.load(in_ptr0 + (2 + 2 * x2), tmp30, eviction_policy=\n        'evict_last', other=0.0)\n    tmp32 = tmp31 + tmp25\n    tmp33 = 1 + -2 * x0 + (129 * (129 <= 2 + 2 * x0) + (2 + 2 * x0) * (2 + \n        2 * x0 < 129))\n    tmp34 = tmp32 / tmp33\n    tl.store(out_ptr0 + x2, tmp34, None)\n\n\ndef call(args):\n    arg0_1, = args\n    args.clear()\n    assert_size_stride(arg0_1, (16, 32, 128), (4096, 128, 1))\n    with torch.cuda._DeviceGuard(0):\n        torch.cuda.set_device(0)\n        buf0 = empty_strided_cuda((16, 32, 1, 64), (2048, 64, 64, 1), torch.\n            float32)\n        get_raw_stream(0)\n        triton_poi_fused_avg_pool2d_0[grid(32768)](arg0_1, buf0, 32768,\n            XBLOCK=128, num_warps=4, num_stages=1)\n        del arg0_1\n    return reinterpret_tensor(buf0, (16, 32, 64), (2048, 64, 1), 0),\n\n\nclass ModelNew(nn.Module):\n    \"\"\"\n    Simple model that performs 1D Average Pooling.\n    \"\"\"\n\n    def __init__(self, kernel_size: 'int', stride: 'int'=1, padding: 'int'=0):\n        \"\"\"\n        Initializes the 1D Average Pooling layer.\n\n        Args:\n            kernel_size (int): Size of the pooling window.\n            stride (int, optional): Stride of the pooling operation. Defaults to 1.\n            padding (int, optional): Padding applied to the input tensor. Defaults to 0.\n        \"\"\"\n        super(ModelNew, self).__init__()\n        self.avg_pool = nn.AvgPool1d(kernel_size=kernel_size, stride=stride,\n            padding=padding)\n\n    def forward(self, input_0):\n        arg0_1 = input_0\n        output = call([arg0_1])\n        return output[0]\n```",
      "ncu_results": {},
      "metadata": {
        "correctness_trials_attempted": 1,
        "max_differences": [
          "0.804625"
        ],
        "avg_differences": [
          "0.131467"
        ],
        "trial_results": [
          {
            "trial": 0,
            "seed": 1608637542,
            "original_output_type": "<class 'torch.Tensor'>",
            "custom_output_type": "<class 'torch.Tensor'>",
            "original_output_shape": "torch.Size([16, 32, 64])",
            "original_output_dtype": "torch.float32",
            "custom_output_shape": "torch.Size([16, 32, 64])",
            "custom_output_dtype": "torch.float32",
            "status": "fail",
            "max_diff": 0.8046252727508545,
            "avg_diff": 0.13146662712097168
          }
        ],
        "pass_count": 0,
        "total_trials": 1,
        "correctness_summary": "(0 / 1)",
        "overall_max_diff": 0.8046252727508545,
        "overall_avg_diff": 0.13146662712097168
      },
      "compilation_error": null,
      "runtime_error": null,
      "generation_error": null
    },
    {
      "round": 2,
      "compiled": true,
      "correctness": true,
      "max_diff": 0.0,
      "avg_diff": 0.0,
      "runtime": 0.0181536003947258,
      "speedup": 0.46254184733648396,
      "generated_code": "import torch\nimport triton\nimport triton.language as tl\nfrom torch._inductor.runtime.triton_heuristics import grid\nfrom torch._C import _cuda_getCurrentRawStream as get_raw_stream\nimport torch.nn as nn\nassert_size_stride = torch._C._dynamo.guards.assert_size_stride\nempty_strided_cuda = torch._C._dynamo.guards._empty_strided_cuda\nreinterpret_tensor = torch._C._dynamo.guards._reinterpret_tensor\n\n\n@triton.jit\ndef triton_poi_fused_avg_pool2d_0(in_ptr0, out_ptr0, xnumel, XBLOCK: tl.\n    constexpr):\n    xoffset = tl.program_id(0) * XBLOCK\n    xindex = xoffset + tl.arange(0, XBLOCK)[:]\n    tl.full([XBLOCK], True, tl.int1)\n    x0 = xindex % 64\n    x2 = xindex\n    tmp0 = tl.full([1], 0, tl.int64)\n    tmp1 = tmp0 >= tmp0\n    tmp2 = tl.full([1], 1, tl.int64)\n    tmp3 = tmp0 < tmp2\n    tmp4 = tmp1 & tmp3\n    tmp5 = -1 + 2 * x0\n    tmp6 = tmp5 >= tmp0\n    tmp7 = tl.full([1], 128, tl.int64)\n    tmp8 = tmp5 < tmp7\n    tmp9 = tmp6 & tmp8\n    tmp10 = tmp4 & tmp9\n    tmp11 = tl.load(in_ptr0 + (-1 + 2 * x2), tmp10, eviction_policy=\n        'evict_last', other=0.0)\n    tmp12 = 2 * x0\n    tmp13 = tmp12 >= tmp0\n    tmp14 = tmp12 < tmp7\n    tmp15 = tmp13 & tmp14\n    tmp16 = tmp4 & tmp15\n    tmp17 = tl.load(in_ptr0 + 2 * x2, tmp16, eviction_policy='evict_last',\n        other=0.0)\n    tmp18 = tmp17 + tmp11\n    tmp19 = 1 + 2 * x0\n    tmp20 = tmp19 >= tmp0\n    tmp21 = tmp19 < tmp7\n    tmp22 = tmp20 & tmp21\n    tmp23 = tmp4 & tmp22\n    tmp24 = tl.load(in_ptr0 + (1 + 2 * x2), tmp23, eviction_policy=\n        'evict_last', other=0.0)\n    tmp25 = tmp24 + tmp18\n    tmp26 = 2 + 2 * x0\n    tmp27 = tmp26 >= tmp0\n    tmp28 = tmp26 < tmp7\n    tmp29 = tmp27 & tmp28\n    tmp30 = tmp4 & tmp29\n    tmp31 = tl.load(in_ptr0 + (2 + 2 * x2), tmp30, eviction_policy=\n        'evict_last', other=0.0)\n    tmp32 = tmp31 + tmp25\n    tmp33 = 1 + -2 * x0 + (129 * (129 <= 3 + 2 * x0) + (3 + 2 * x0) * (3 + \n        2 * x0 < 129))\n    tmp34 = tmp32 / tmp33\n    tl.store(out_ptr0 + x2, tmp34, None)\n\n\ndef call(args):\n    arg0_1, = args\n    args.clear()\n    assert_size_stride(arg0_1, (16, 32, 128), (4096, 128, 1))\n    with torch.cuda._DeviceGuard(0):\n        torch.cuda.set_device(0)\n        buf0 = empty_strided_cuda((16, 32, 1, 64), (2048, 64, 64, 1), torch.\n            float32)\n        get_raw_stream(0)\n        triton_poi_fused_avg_pool2d_0[grid(32768)](arg0_1, buf0, 32768,\n            XBLOCK=128, num_warps=4, num_stages=1)\n        del arg0_1\n    return reinterpret_tensor(buf0, (16, 32, 64), (2048, 64, 1), 0),\n\n\nclass ModelNew(nn.Module):\n    \"\"\"\n    Simple model that performs 1D Average Pooling.\n    \"\"\"\n\n    def __init__(self, kernel_size: 'int', stride: 'int'=1, padding: 'int'=0):\n        \"\"\"\n        Initializes the 1D Average Pooling layer.\n\n        Args:\n            kernel_size (int): Size of the pooling window.\n            stride (int, optional): Stride of the pooling operation. Defaults to 1.\n            padding (int, optional): Padding applied to the input tensor. Defaults to 0.\n        \"\"\"\n        super(ModelNew, self).__init__()\n        self.avg_pool = nn.AvgPool1d(kernel_size=kernel_size, stride=stride,\n            padding=padding)\n\n    def forward(self, input_0):\n        arg0_1 = input_0\n        output = call([arg0_1])\n        return output[0]\n```",
      "ncu_results": {},
      "metadata": {
        "correctness_trials_attempted": 1,
        "max_differences": [
          "0.000000"
        ],
        "avg_differences": [
          "0.000000"
        ],
        "trial_results": [
          {
            "trial": 0,
            "seed": 1608637542,
            "original_output_type": "<class 'torch.Tensor'>",
            "custom_output_type": "<class 'torch.Tensor'>",
            "original_output_shape": "torch.Size([16, 32, 64])",
            "original_output_dtype": "torch.float32",
            "custom_output_shape": "torch.Size([16, 32, 64])",
            "custom_output_dtype": "torch.float32",
            "status": "pass",
            "max_diff": 0.0,
            "avg_diff": 0.0
          }
        ],
        "pass_count": 1,
        "total_trials": 1,
        "correctness_summary": "(1 / 1)",
        "overall_max_diff": 0.0,
        "overall_avg_diff": 0.0
      },
      "compilation_error": null,
      "runtime_error": null,
      "generation_error": null
    },
    {
      "round": 3,
      "compiled": true,
      "correctness": true,
      "max_diff": 0.0,
      "avg_diff": 0.0,
      "runtime": 0.03399679958820343,
      "speedup": 0.2469879507510585,
      "generated_code": "import torch\nimport triton\nimport triton.language as tl\nfrom torch._inductor.runtime.triton_heuristics import grid\nfrom torch._C import _cuda_getCurrentRawStream as get_raw_stream\nimport torch.nn as nn\nassert_size_stride = torch._C._dynamo.guards.assert_size_stride\nempty_strided_cuda = torch._C._dynamo.guards._empty_strided_cuda\nreinterpret_tensor = torch._C._dynamo.guards._reinterpret_tensor\n\n\n@triton.jit\ndef triton_poi_fused_avg_pool2d_0(in_ptr0, out_ptr0, xnumel, XBLOCK: tl.\n    constexpr):\n    xoffset = tl.program_id(0) * XBLOCK\n    xindex = xoffset + tl.arange(0, XBLOCK)[:]\n    tl.full([XBLOCK], True, tl.int1)\n    x0 = xindex % 64\n    x2 = xindex\n    tmp0 = tl.full([1], 0, tl.int64)\n    tmp1 = tmp0 >= tmp0\n    tmp2 = tl.full([1], 1, tl.int64)\n    tmp3 = tmp0 < tmp2\n    tmp4 = tmp1 & tmp3\n    tmp5 = -1 + 2 * x0\n    tmp6 = tmp5 >= tmp0\n    tmp7 = tl.full([1], 128, tl.int64)\n    tmp8 = tmp5 < tmp7\n    tmp9 = tmp6 & tmp8\n    tmp10 = tmp4 & tmp9\n    tmp11 = tl.load(in_ptr0 + (-1 + 2 * x2), tmp10, eviction_policy=\n        'evict_last', other=0.0)\n    tmp12 = 2 * x0\n    tmp13 = tmp12 >= tmp0\n    tmp14 = tmp12 < tmp7\n    tmp15 = tmp13 & tmp14\n    tmp16 = tmp4 & tmp15\n    tmp17 = tl.load(in_ptr0 + 2 * x2, tmp16, eviction_policy='evict_last',\n        other=0.0)\n    tmp18 = tmp17 + tmp11\n    tmp19 = 1 + 2 * x0\n    tmp20 = tmp19 >= tmp0\n    tmp21 = tmp19 < tmp7\n    tmp22 = tmp20 & tmp21\n    tmp23 = tmp4 & tmp22\n    tmp24 = tl.load(in_ptr0 + (1 + 2 * x2), tmp23, eviction_policy=\n        'evict_last', other=0.0)\n    tmp25 = tmp24 + tmp18\n    tmp26 = 2 + 2 * x0\n    tmp27 = tmp26 >= tmp0\n    tmp28 = tmp26 < tmp7\n    tmp29 = tmp27 & tmp28\n    tmp30 = tmp4 & tmp29\n    tmp31 = tl.load(in_ptr0 + (2 + 2 * x2), tmp30, eviction_policy=\n        'evict_last', other=0.0)\n    tmp32 = tmp31 + tmp25\n    tmp33 = 1 + -2 * x0 + (129 * (129 <= 3 + 2 * x0) + (3 + 2 * x0) * (3 + \n        2 * x0 < 129))\n    tmp34 = tmp32 / tmp33\n    tl.store(out_ptr0 + x2, tmp34, None)\n\n\ndef call(args):\n    arg0_1, = args\n    args.clear()\n    assert_size_stride(arg0_1, (16, 32, 128), (4096, 128, 1))\n    with torch.cuda._DeviceGuard(0):\n        torch.cuda.set_device(0)\n        buf0 = empty_strided_cuda((16, 32, 1, 64), (2048, 64, 64, 1), torch.\n            float32)\n        get_raw_stream(0)\n        triton_poi_fused_avg_pool2d_0[grid(32768)](arg0_1, buf0, 32768,\n            XBLOCK=128, num_warps=4, num_stages=1)\n        del arg0_1\n    return reinterpret_tensor(buf0, (16, 32, 64), (2048, 64, 1), 0),\n\n\nclass ModelNew(nn.Module):\n    \"\"\"\n    Simple model that performs 1D Average Pooling.\n    \"\"\"\n\n    def __init__(self, kernel_size: 'int', stride: 'int'=1, padding: 'int'=0):\n        \"\"\"\n        Initializes the 1D Average Pooling layer.\n\n        Args:\n            kernel_size (int): Size of the pooling window.\n            stride (int, optional): Stride of the pooling operation. Defaults to 1.\n            padding (int, optional): Padding applied to the input tensor. Defaults to 0.\n        \"\"\"\n        super(ModelNew, self).__init__()\n        self.avg_pool = nn.AvgPool1d(kernel_size=kernel_size, stride=stride,\n            padding=padding)\n\n    def forward(self, input_0):\n        arg0_1 = input_0\n        output = call([arg0_1])\n        return output[0]\n```",
      "ncu_results": {},
      "metadata": {
        "correctness_trials_attempted": 1,
        "max_differences": [
          "0.000000"
        ],
        "avg_differences": [
          "0.000000"
        ],
        "trial_results": [
          {
            "trial": 0,
            "seed": 1608637542,
            "original_output_type": "<class 'torch.Tensor'>",
            "custom_output_type": "<class 'torch.Tensor'>",
            "original_output_shape": "torch.Size([16, 32, 64])",
            "original_output_dtype": "torch.float32",
            "custom_output_shape": "torch.Size([16, 32, 64])",
            "custom_output_dtype": "torch.float32",
            "status": "pass",
            "max_diff": 0.0,
            "avg_diff": 0.0
          }
        ],
        "pass_count": 1,
        "total_trials": 1,
        "correctness_summary": "(1 / 1)",
        "overall_max_diff": 0.0,
        "overall_avg_diff": 0.0
      },
      "compilation_error": null,
      "runtime_error": null,
      "generation_error": null
    },
    {
      "round": 4,
      "compiled": true,
      "correctness": false,
      "max_diff": 0.8046252727508545,
      "avg_diff": 0.13146662712097168,
      "runtime": null,
      "speedup": null,
      "generated_code": "import torch\nimport triton\nimport triton.language as tl\nfrom torch._inductor.runtime.triton_heuristics import grid\nfrom torch._C import _cuda_getCurrentRawStream as get_raw_stream\nimport torch.nn as nn\nassert_size_stride = torch._C._dynamo.guards.assert_size_stride\nempty_strided_cuda = torch._C._dynamo.guards._empty_strided_cuda\nreinterpret_tensor = torch._C._dynamo.guards._reinterpret_tensor\n\n\n@triton.jit\ndef triton_poi_fused_avg_pool2d_0(in_ptr0, out_ptr0, xnumel, XBLOCK: tl.\n    constexpr):\n    xoffset = tl.program_id(0) * XBLOCK\n    xindex = xoffset + tl.arange(0, XBLOCK)[:]\n    tl.full([XBLOCK], True, tl.int1)\n    x0 = xindex % 64\n    x2 = xindex\n    tmp0 = tl.full([1], 0, tl.int64)\n    tmp1 = tmp0 >= tmp0\n    tmp2 = tl.full([1], 1, tl.int64)\n    tmp3 = tmp0 < tmp2\n    tmp4 = tmp1 & tmp3\n    tmp5 = -1 + 2 * x0\n    tmp6 = tmp5 >= tmp0\n    tmp7 = tl.full([1], 128, tl.int64)\n    tmp8 = tmp5 < tmp7\n    tmp9 = tmp6 & tmp8\n    tmp10 = tmp4 & tmp9\n    tmp11 = tl.load(in_ptr0 + (-1 + 2 * x2), tmp10, eviction_policy=\n        'evict_last', other=0.0)\n    tmp12 = 2 * x0\n    tmp13 = tmp12 >= tmp0\n    tmp14 = tmp12 < tmp7\n    tmp15 = tmp13 & tmp14\n    tmp16 = tmp4 & tmp15\n    tmp17 = tl.load(in_ptr0 + 2 * x2, tmp16, eviction_policy='evict_last',\n        other=0.0)\n    tmp18 = tmp17 + tmp11\n    tmp19 = 1 + 2 * x0\n    tmp20 = tmp19 >= tmp0\n    tmp21 = tmp19 < tmp7\n    tmp22 = tmp20 & tmp21\n    tmp23 = tmp4 & tmp22\n    tmp24 = tl.load(in_ptr0 + (1 + 2 * x2), tmp23, eviction_policy=\n        'evict_last', other=0.0)\n    tmp25 = tmp24 + tmp18\n    tmp26 = 2 + 2 * x0\n    tmp27 = tmp26 >= tmp0\n    tmp28 = tmp26 < tmp7\n    tmp29 = tmp27 & tmp28\n    tmp30 = tmp4 & tmp29\n    tmp31 = tl.load(in_ptr0 + (2 + 2 * x2), tmp30, eviction_policy=\n        'evict_last', other=0.0)\n    tmp32 = tmp31 + tmp25\n    tmp33 = 1 + -2 * x0 + (129 * (129 <= 2 + 2 * x0) + (2 + 2 * x0) * (2 + \n        2 * x0 < 129))\n    tmp34 = tmp32 / tmp33\n    tl.store(out_ptr0 + x2, tmp34, None)\n\n\ndef call(args):\n    arg0_1, = args\n    args.clear()\n    assert_size_stride(arg0_1, (16, 32, 128), (4096, 128, 1))\n    with torch.cuda._DeviceGuard(0):\n        torch.cuda.set_device(0)\n        buf0 = empty_strided_cuda((16, 32, 1, 64), (2048, 64, 64, 1), torch.\n            float32)\n        get_raw_stream(0)\n        triton_poi_fused_avg_pool2d_0[grid(32768)](arg0_1, buf0, 32768,\n            XBLOCK=128, num_warps=4, num_stages=1)\n        del arg0_1\n    return reinterpret_tensor(buf0, (16, 32, 64), (2048, 64, 1), 0),\n\n\nclass ModelNew(nn.Module):\n    \"\"\"\n    Simple model that performs 1D Average Pooling.\n    \"\"\"\n\n    def __init__(self, kernel_size: 'int', stride: 'int'=1, padding: 'int'=0):\n        \"\"\"\n        Initializes the 1D Average Pooling layer.\n\n        Args:\n            kernel_size (int): Size of the pooling window.\n            stride (int, optional): Stride of the pooling operation. Defaults to 1.\n            padding (int, optional): Padding applied to the input tensor. Defaults to 0.\n        \"\"\"\n        super(ModelNew, self).__init__()\n        self.avg_pool = nn.AvgPool1d(kernel_size=kernel_size, stride=stride,\n            padding=padding)\n\n    def forward(self, input_0):\n        arg0_1 = input_0\n        output = call([arg0_1])\n        return output[0]\n```",
      "ncu_results": {},
      "metadata": {
        "correctness_trials_attempted": 1,
        "max_differences": [
          "0.804625"
        ],
        "avg_differences": [
          "0.131467"
        ],
        "trial_results": [
          {
            "trial": 0,
            "seed": 1608637542,
            "original_output_type": "<class 'torch.Tensor'>",
            "custom_output_type": "<class 'torch.Tensor'>",
            "original_output_shape": "torch.Size([16, 32, 64])",
            "original_output_dtype": "torch.float32",
            "custom_output_shape": "torch.Size([16, 32, 64])",
            "custom_output_dtype": "torch.float32",
            "status": "fail",
            "max_diff": 0.8046252727508545,
            "avg_diff": 0.13146662712097168
          }
        ],
        "pass_count": 0,
        "total_trials": 1,
        "correctness_summary": "(0 / 1)",
        "overall_max_diff": 0.8046252727508545,
        "overall_avg_diff": 0.13146662712097168
      },
      "compilation_error": null,
      "runtime_error": null,
      "generation_error": null
    },
    {
      "round": 5,
      "compiled": true,
      "correctness": true,
      "max_diff": 0.0,
      "avg_diff": 0.0,
      "runtime": 0.03226880133152008,
      "speedup": 0.26021418571203087,
      "generated_code": "import torch\nimport triton\nimport triton.language as tl\nfrom torch._inductor.runtime.triton_heuristics import grid\nfrom torch._C import _cuda_getCurrentRawStream as get_raw_stream\nimport torch.nn as nn\nassert_size_stride = torch._C._dynamo.guards.assert_size_stride\nempty_strided_cuda = torch._C._dynamo.guards._empty_strided_cuda\nreinterpret_tensor = torch._C._dynamo.guards._reinterpret_tensor\n\n\n@triton.jit\ndef triton_poi_fused_avg_pool2d_0(in_ptr0, out_ptr0, xnumel, XBLOCK: tl.\n    constexpr):\n    xoffset = tl.program_id(0) * XBLOCK\n    xindex = xoffset + tl.arange(0, XBLOCK)[:]\n    tl.full([XBLOCK], True, tl.int1)\n    x0 = xindex % 64\n    x2 = xindex\n    tmp0 = tl.full([1], 0, tl.int64)\n    tmp1 = tmp0 >= tmp0\n    tmp2 = tl.full([1], 1, tl.int64)\n    tmp3 = tmp0 < tmp2\n    tmp4 = tmp1 & tmp3\n    tmp5 = -1 + 2 * x0\n    tmp6 = tmp5 >= tmp0\n    tmp7 = tl.full([1], 128, tl.int64)\n    tmp8 = tmp5 < tmp7\n    tmp9 = tmp6 & tmp8\n    tmp10 = tmp4 & tmp9\n    tmp11 = tl.load(in_ptr0 + (-1 + 2 * x2), tmp10, eviction_policy=\n        'evict_last', other=0.0)\n    tmp12 = 2 * x0\n    tmp13 = tmp12 >= tmp0\n    tmp14 = tmp12 < tmp7\n    tmp15 = tmp13 & tmp14\n    tmp16 = tmp4 & tmp15\n    tmp17 = tl.load(in_ptr0 + 2 * x2, tmp16, eviction_policy='evict_last',\n        other=0.0)\n    tmp18 = tmp17 + tmp11\n    tmp19 = 1 + 2 * x0\n    tmp20 = tmp19 >= tmp0\n    tmp21 = tmp19 < tmp7\n    tmp22 = tmp20 & tmp21\n    tmp23 = tmp4 & tmp22\n    tmp24 = tl.load(in_ptr0 + (1 + 2 * x2), tmp23, eviction_policy=\n        'evict_last', other=0.0)\n    tmp25 = tmp24 + tmp18\n    tmp26 = 2 + 2 * x0\n    tmp27 = tmp26 >= tmp0\n    tmp28 = tmp26 < tmp7\n    tmp29 = tmp27 & tmp28\n    tmp30 = tmp4 & tmp29\n    tmp31 = tl.load(in_ptr0 + (2 + 2 * x2), tmp30, eviction_policy=\n        'evict_last', other=0.0)\n    tmp32 = tmp31 + tmp25\n    tmp33 = 0.25\n    tmp34 = tmp32 * tmp33\n    tl.store(out_ptr0 + x2, tmp34, None)\n\n\ndef call(args):\n    arg0_1, = args\n    args.clear()\n    assert_size_stride(arg0_1, (16, 32, 128), (4096, 128, 1))\n    with torch.cuda._DeviceGuard(0):\n        torch.cuda.set_device(0)\n        buf0 = empty_strided_cuda((16, 32, 1, 64), (2048, 64, 64, 1), torch\n            .float32)\n        get_raw_stream(0)\n        triton_poi_fused_avg_pool2d_0[grid(32768)](arg0_1, buf0, 32768,\n            XBLOCK=128, num_warps=4, num_stages=1)\n        del arg0_1\n    return reinterpret_tensor(buf0, (16, 32, 64), (2048, 64, 1), 0),\n\n\nclass ModelNew(nn.Module):\n    \"\"\"\n    Simple model that performs 1D Average Pooling.\n    \"\"\"\n\n    def __init__(self, kernel_size: 'int', stride: 'int'=1, padding: 'int'=0):\n        \"\"\"\n        Initializes the 1D Average Pooling layer.\n\n        Args:\n            kernel_size (int): Size of the pooling window.\n            stride (int, optional): Stride of the pooling operation. Defaults to 1.\n            padding (int, optional): Padding applied to the input tensor. Defaults to 0.\n        \"\"\"\n        super(ModelNew, self).__init__()\n        self.avg_pool = nn.AvgPool1d(kernel_size=kernel_size, stride=stride, padding=padding\n            )\n\n    def forward(self, input_0):\n        arg0_1 = input_0\n        output = call([arg0_1])\n        return output[0]\n```",
      "ncu_results": {},
      "metadata": {
        "correctness_trials_attempted": 1,
        "max_differences": [
          "0.000000"
        ],
        "avg_differences": [
          "0.000000"
        ],
        "trial_results": [
          {
            "trial": 0,
            "seed": 1608637542,
            "original_output_type": "<class 'torch.Tensor'>",
            "custom_output_type": "<class 'torch.Tensor'>",
            "original_output_shape": "torch.Size([16, 32, 64])",
            "original_output_dtype": "torch.float32",
            "custom_output_shape": "torch.Size([16, 32, 64])",
            "custom_output_dtype": "torch.float32",
            "status": "pass",
            "max_diff": 0.0,
            "avg_diff": 0.0
          }
        ],
        "pass_count": 1,
        "total_trials": 1,
        "correctness_summary": "(1 / 1)",
        "overall_max_diff": 0.0,
        "overall_avg_diff": 0.0
      },
      "compilation_error": null,
      "runtime_error": null,
      "generation_error": null
    },
    {
      "round": 6,
      "compiled": true,
      "correctness": false,
      "max_diff": 1.540562391281128,
      "avg_diff": 0.2819850444793701,
      "runtime": null,
      "speedup": null,
      "generated_code": "import torch\nimport triton\nimport triton.language as tl\nfrom torch._inductor.runtime.triton_heuristics import grid\nfrom torch._C import _cuda_getCurrentRawStream as get_raw_stream\nimport torch.nn as nn\nassert_size_stride = torch._C._dynamo.guards.assert_size_stride\nempty_strided_cuda = torch._C._dynamo.guards._empty_strided_cuda\nreinterpret_tensor = torch._C._dynamo.guards._reinterpret_tensor\n\n\n@triton.jit\ndef triton_poi_fused_avg_pool2d_0(in_ptr0, out_ptr0, xnumel, XBLOCK: tl.\n    constexpr):\n    xoffset = tl.program_id(0) * XBLOCK\n    xindex = xoffset + tl.arange(0, XBLOCK)[:]\n    tl.full([XBLOCK], True, tl.int1)\n    x0 = xindex % 64\n    x1 = xindex // 64\n    x2 = xindex\n    tmp0 = tl.load(in_ptr0 + (2 * x0 + 128 * x1), None, eviction_policy=\n        'evict_last')\n    tmp1 = tl.load(in_ptr0 + (1 + 2 * x0 + 128 * x1), None, eviction_policy\n        ='evict_last')\n    tmp3 = tl.load(in_ptr0 + (2 + 2 * x0 + 128 * x1), None,\n        eviction_policy='evict_last')\n    tmp5 = tl.load(in_ptr0 + (3 + 2 * x0 + 128 * x1), None,\n        eviction_policy='evict_last')\n    tmp2 = tmp1 + tmp0\n    tmp4 = tmp3 + tmp2\n    tmp6 = tmp5 + tmp4\n    tmp7 = 0.25\n    tmp8 = tmp6 * tmp7\n    tl.store(out_ptr0 + x2, tmp8, None)\n\n\ndef call(args):\n    arg0_1, = args\n    args.clear()\n    assert_size_stride(arg0_1, (16, 32, 128), (4096, 128, 1))\n    with torch.cuda._DeviceGuard(0):\n        torch.cuda.set_device(0)\n        buf0 = empty_strided_cuda((16, 32, 1, 64), (2048, 64, 64, 1), torch\n            .float32)\n        get_raw_stream(0)\n        triton_poi_fused_avg_pool2d_0[grid(32768)](arg0_1, buf0, 32768,\n            XBLOCK=128, num_warps=4, num_stages=1)\n        del arg0_1\n    return reinterpret_tensor(buf0, (16, 32, 64), (2048, 64, 1), 0),\n\n\nclass ModelNew(nn.Module):\n    \"\"\"\n    Simple model that performs 1D Average Pooling.\n    \"\"\"\n\n    def __init__(self, kernel_size: 'int', stride: 'int'=1, padding: 'int'=0):\n        \"\"\"\n        Initializes the 1D Average Pooling layer.\n\n        Args:\n            kernel_size (int): Size of the pooling window.\n            stride (int, optional): Stride of the pooling operation. Defaults to 1.\n            padding (int, optional): Padding applied to the input tensor. Defaults to 0.\n        \"\"\"\n        super(ModelNew, self).__init__()\n        self.avg_pool = nn.AvgPool1d(kernel_size=kernel_size, stride=stride,\n            padding=padding)\n\n    def forward(self, input_0):\n        arg0_1 = input_0\n        output = call([arg0_1])\n        return output[0]\n```",
      "ncu_results": {},
      "metadata": {
        "correctness_trials_attempted": 1,
        "max_differences": [
          "1.540562"
        ],
        "avg_differences": [
          "0.281985"
        ],
        "trial_results": [
          {
            "trial": 0,
            "seed": 1608637542,
            "original_output_type": "<class 'torch.Tensor'>",
            "custom_output_type": "<class 'torch.Tensor'>",
            "original_output_shape": "torch.Size([16, 32, 64])",
            "original_output_dtype": "torch.float32",
            "custom_output_shape": "torch.Size([16, 32, 64])",
            "custom_output_dtype": "torch.float32",
            "status": "fail",
            "max_diff": 1.540562391281128,
            "avg_diff": 0.2819850444793701
          }
        ],
        "pass_count": 0,
        "total_trials": 1,
        "correctness_summary": "(0 / 1)",
        "overall_max_diff": 1.540562391281128,
        "overall_avg_diff": 0.2819850444793701
      },
      "compilation_error": null,
      "runtime_error": null,
      "generation_error": null
    },
    {
      "round": 7,
      "compiled": true,
      "correctness": false,
      "max_diff": 0.8046252727508545,
      "avg_diff": 0.13146662712097168,
      "runtime": null,
      "speedup": null,
      "generated_code": "import torch\nimport triton\nimport triton.language as tl\nfrom torch._inductor.runtime.triton_heuristics import grid\nfrom torch._C import _cuda_getCurrentRawStream as get_raw_stream\nimport torch.nn as nn\nassert_size_stride = torch._C._dynamo.guards.assert_size_stride\nempty_strided_cuda = torch._C._dynamo.guards._empty_strided_cuda\nreinterpret_tensor = torch._C._dynamo.guards._reinterpret_tensor\n\n\n@triton.jit\ndef triton_poi_fused_avg_pool2d_0(in_ptr0, out_ptr0, xnumel, XBLOCK: tl.\n    constexpr):\n    xoffset = tl.program_id(0) * XBLOCK\n    xindex = xoffset + tl.arange(0, XBLOCK)[:]\n    tl.full([XBLOCK], True, tl.int1)\n    x0 = xindex % 64\n    x2 = xindex\n    tmp0 = tl.full([1], 0, tl.int64)\n    tmp1 = tmp0 >= tmp0\n    tmp2 = tl.full([1], 1, tl.int64)\n    tmp3 = tmp0 < tmp2\n    tmp4 = tmp1 & tmp3\n    tmp5 = -1 + 2 * x0\n    tmp6 = tmp5 >= tmp0\n    tmp7 = tl.full([1], 128, tl.int64)\n    tmp8 = tmp5 < tmp7\n    tmp9 = tmp6 & tmp8\n    tmp10 = tmp4 & tmp9\n    tmp11 = tl.load(in_ptr0 + (-1 + 2 * x2), tmp10, eviction_policy=\n        'evict_last', other=0.0)\n    tmp12 = 2 * x0\n    tmp13 = tmp12 >= tmp0\n    tmp14 = tmp12 < tmp7\n    tmp15 = tmp13 & tmp14\n    tmp16 = tmp4 & tmp15\n    tmp17 = tl.load(in_ptr0 + 2 * x2, tmp16, eviction_policy='evict_last',\n        other=0.0)\n    tmp18 = tmp17 + tmp11\n    tmp19 = 1 + 2 * x0\n    tmp20 = tmp19 >= tmp0\n    tmp21 = tmp19 < tmp7\n    tmp22 = tmp20 & tmp21\n    tmp23 = tmp4 & tmp22\n    tmp24 = tl.load(in_ptr0 + (1 + 2 * x2), tmp23, eviction_policy=\n        'evict_last', other=0.0)\n    tmp25 = tmp24 + tmp18\n    tmp26 = 2 + 2 * x0\n    tmp27 = tmp26 >= tmp0\n    tmp28 = tmp26 < tmp7\n    tmp29 = tmp27 & tmp28\n    tmp30 = tmp4 & tmp29\n    tmp31 = tl.load(in_ptr0 + (2 + 2 * x2), tmp30, eviction_policy=\n        'evict_last', other=0.0)\n    tmp32 = tmp31 + tmp25\n    tmp33 = 1 + -2 * x0 + (129 * (129 <= 2 + 2 * x0) + (2 + 2 * x0) * (2 + \n        2 * x0 < 129))\n    tmp34 = tmp32 / tmp33\n    tl.store(out_ptr0 + x2, tmp34, None)\n\n\ndef call(args):\n    arg0_1, = args\n    args.clear()\n    assert_size_stride(arg0_1, (16, 32, 128), (4096, 128, 1))\n    with torch.cuda._DeviceGuard(0):\n        torch.cuda.set_device(0)\n        buf0 = empty_strided_cuda((16, 32, 1, 64), (2048, 64, 64, 1), torch.\n            float32)\n        get_raw_stream(0)\n        triton_poi_fused_avg_pool2d_0[grid(32768)](arg0_1, buf0, 32768,\n            XBLOCK=128, num_warps=4, num_stages=1)\n        del arg0_1\n    return reinterpret_tensor(buf0, (16, 32, 64), (2048, 64, 1), 0),\n\n\nclass ModelNew(nn.Module):\n    \"\"\"\n    Simple model that performs 1D Average Pooling.\n    \"\"\"\n\n    def __init__(self, kernel_size: 'int', stride: 'int'=1, padding: 'int'=0):\n        \"\"\"\n        Initializes the 1D Average Pooling layer.\n\n        Args:\n            kernel_size (int): Size of the pooling window.\n            stride (int, optional): Stride of the pooling operation. Defaults to 1.\n            padding (int, optional): Padding applied to the input tensor. Defaults to 0.\n        \"\"\"\n        super(ModelNew, self).__init__()\n        self.avg_pool = nn.AvgPool1d(kernel_size=kernel_size, stride=stride, padding\n            =padding)\n\n    def forward(self, input_0):\n        arg0_1 = input_0\n        output = call([arg0_1])\n        return output[0]\n```",
      "ncu_results": {},
      "metadata": {
        "correctness_trials_attempted": 1,
        "max_differences": [
          "0.804625"
        ],
        "avg_differences": [
          "0.131467"
        ],
        "trial_results": [
          {
            "trial": 0,
            "seed": 1608637542,
            "original_output_type": "<class 'torch.Tensor'>",
            "custom_output_type": "<class 'torch.Tensor'>",
            "original_output_shape": "torch.Size([16, 32, 64])",
            "original_output_dtype": "torch.float32",
            "custom_output_shape": "torch.Size([16, 32, 64])",
            "custom_output_dtype": "torch.float32",
            "status": "fail",
            "max_diff": 0.8046252727508545,
            "avg_diff": 0.13146662712097168
          }
        ],
        "pass_count": 0,
        "total_trials": 1,
        "correctness_summary": "(0 / 1)",
        "overall_max_diff": 0.8046252727508545,
        "overall_avg_diff": 0.13146662712097168
      },
      "compilation_error": null,
      "runtime_error": null,
      "generation_error": null
    },
    {
      "round": 8,
      "compiled": true,
      "correctness": false,
      "max_diff": 0.8046252727508545,
      "avg_diff": 0.13146662712097168,
      "runtime": null,
      "speedup": null,
      "generated_code": "import torch\nimport triton\nimport triton.language as tl\nfrom torch._inductor.runtime.triton_heuristics import grid\nfrom torch._C import _cuda_getCurrentRawStream as get_raw_stream\nimport torch.nn as nn\nassert_size_stride = torch._C._dynamo.guards.assert_size_stride\nempty_strided_cuda = torch._C._dynamo.guards._empty_strided_cuda\nreinterpret_tensor = torch._C._dynamo.guards._reinterpret_tensor\n\n\n@triton.jit\ndef triton_poi_fused_avg_pool2d_0(in_ptr0, out_ptr0, xnumel, XBLOCK: tl.\n    constexpr):\n    xoffset = tl.program_id(0) * XBLOCK\n    xindex = xoffset + tl.arange(0, XBLOCK)[:]\n    tl.full([XBLOCK], True, tl.int1)\n    x0 = xindex % 64\n    x2 = xindex\n    tmp0 = tl.full([1], 0, tl.int64)\n    tmp1 = tmp0 >= tmp0\n    tmp2 = tl.full([1], 1, tl.int64)\n    tmp3 = tmp0 < tmp2\n    tmp4 = tmp1 & tmp3\n    tmp5 = -1 + 2 * x0\n    tmp6 = tmp5 >= tmp0\n    tmp7 = tl.full([1], 128, tl.int64)\n    tmp8 = tmp5 < tmp7\n    tmp9 = tmp6 & tmp8\n    tmp10 = tmp4 & tmp9\n    tmp11 = tl.load(in_ptr0 + (-1 + 2 * x2), tmp10, eviction_policy=\n        'evict_last', other=0.0)\n    tmp12 = 2 * x0\n    tmp13 = tmp12 >= tmp0\n    tmp14 = tmp12 < tmp7\n    tmp15 = tmp13 & tmp14\n    tmp16 = tmp4 & tmp15\n    tmp17 = tl.load(in_ptr0 + 2 * x2, tmp16, eviction_policy='evict_last',\n        other=0.0)\n    tmp18 = tmp17 + tmp11\n    tmp19 = 1 + 2 * x0\n    tmp20 = tmp19 >= tmp0\n    tmp21 = tmp19 < tmp7\n    tmp22 = tmp20 & tmp21\n    tmp23 = tmp4 & tmp22\n    tmp24 = tl.load(in_ptr0 + (1 + 2 * x2), tmp23, eviction_policy=\n        'evict_last', other=0.0)\n    tmp25 = tmp24 + tmp18\n    tmp26 = 2 + 2 * x0\n    tmp27 = tmp26 >= tmp0\n    tmp28 = tmp26 < tmp7\n    tmp29 = tmp27 & tmp28\n    tmp30 = tmp4 & tmp29\n    tmp31 = tl.load(in_ptr0 + (2 + 2 * x2), tmp30, eviction_policy=\n        'evict_last', other=0.0)\n    tmp32 = tmp31 + tmp25\n    tmp33 = 1 + -2 * x0 + (129 * (129 <= 2 + 2 * x0) + (2 + 2 * x0) * (2 + \n        2 * x0 < 129))\n    tmp34 = tmp32 / tmp33\n    tl.store(out_ptr0 + x2, tmp34, None)\n\n\ndef call(args):\n    arg0_1, = args\n    args.clear()\n    assert_size_stride(arg0_1, (16, 32, 128), (4096, 128, 1))\n    with torch.cuda._DeviceGuard(0):\n        torch.cuda.set_device(0)\n        buf0 = empty_strided_cuda((16, 32, 1, 64), (2048, 64, 64, 1), torch.\n            float32)\n        get_raw_stream(0)\n        triton_poi_fused_avg_pool2d_0[grid(32768)](arg0_1, buf0, 32768,\n            XBLOCK=128, num_warps=4, num_stages=1)\n        del arg0_1\n    return reinterpret_tensor(buf0, (16, 32, 64), (2048, 64, 1), 0),\n\n\nclass ModelNew(nn.Module):\n    \"\"\"\n    Simple model that performs 1D Average Pooling.\n    \"\"\"\n\n    def __init__(self, kernel_size: 'int', stride: 'int'=1, padding: 'int'=0):\n        \"\"\"\n        Initializes the 1D Average Pooling layer.\n\n        Args:\n            kernel_size (int): Size of the pooling window.\n            stride (int, optional): Stride of the pooling operation. Defaults to 1.\n            padding (int, optional): Padding applied to the input tensor. Defaults to 0.\n        \"\"\"\n        super(ModelNew, self).__init__()\n        self.avg_pool = nn.AvgPool1d(kernel_size=kernel_size, stride=stride,\n            padding=padding)\n\n    def forward(self, input_0):\n        arg0_1 = input_0\n        output = call([arg0_1])\n        return output[0]\n```",
      "ncu_results": {},
      "metadata": {
        "correctness_trials_attempted": 1,
        "max_differences": [
          "0.804625"
        ],
        "avg_differences": [
          "0.131467"
        ],
        "trial_results": [
          {
            "trial": 0,
            "seed": 1608637542,
            "original_output_type": "<class 'torch.Tensor'>",
            "custom_output_type": "<class 'torch.Tensor'>",
            "original_output_shape": "torch.Size([16, 32, 64])",
            "original_output_dtype": "torch.float32",
            "custom_output_shape": "torch.Size([16, 32, 64])",
            "custom_output_dtype": "torch.float32",
            "status": "fail",
            "max_diff": 0.8046252727508545,
            "avg_diff": 0.13146662712097168
          }
        ],
        "pass_count": 0,
        "total_trials": 1,
        "correctness_summary": "(0 / 1)",
        "overall_max_diff": 0.8046252727508545,
        "overall_avg_diff": 0.13146662712097168
      },
      "compilation_error": null,
      "runtime_error": null,
      "generation_error": null
    },
    {
      "round": 9,
      "compiled": true,
      "correctness": false,
      "max_diff": 1.540562391281128,
      "avg_diff": 0.2819850444793701,
      "runtime": null,
      "speedup": null,
      "generated_code": "import torch\nimport triton\nimport triton.language as tl\nfrom torch._inductor.runtime.triton_heuristics import grid\nfrom torch._C import _cuda_getCurrentRawStream as get_raw_stream\nimport torch.nn as nn\nassert_size_stride = torch._C._dynamo.guards.assert_size_stride\nempty_strided_cuda = torch._C._dynamo.guards._empty_strided_cuda\nreinterpret_tensor = torch._C._dynamo.guards._reinterpret_tensor\n\n\n@triton.jit\ndef triton_poi_fused_avg_pool2d_0(in_ptr0, out_ptr0, xnumel, XBLOCK: tl.\n    constexpr):\n    xoffset = tl.program_id(0) * XBLOCK\n    xindex = xoffset + tl.arange(0, XBLOCK)[:]\n    tl.full([XBLOCK], True, tl.int1)\n    x0 = xindex % 64\n    x1 = xindex // 64\n    x2 = xindex\n    tmp0 = tl.load(in_ptr0 + (2 * x0 + 128 * x1), None, eviction_policy=\n        'evict_last')\n    tmp1 = tl.load(in_ptr0 + (1 + 2 * x0 + 128 * x1), None, eviction_policy\n        ='evict_last')\n    tmp3 = tl.load(in_ptr0 + (2 + 2 * x0 + 128 * x1), None,\n        eviction_policy='evict_last')\n    tmp5 = tl.load(in_ptr0 + (3 + 2 * x0 + 128 * x1), None,\n        eviction_policy='evict_last')\n    tmp2 = tmp1 + tmp0\n    tmp4 = tmp3 + tmp2\n    tmp6 = tmp5 + tmp4\n    tmp7 = 0.25\n    tmp8 = tmp6 * tmp7\n    tl.store(out_ptr0 + x2, tmp8, None)\n\n\ndef call(args):\n    arg0_1, = args\n    args.clear()\n    assert_size_stride(arg0_1, (16, 32, 128), (4096, 128, 1))\n    with torch.cuda._DeviceGuard(0):\n        torch.cuda.set_device(0)\n        buf0 = empty_strided_cuda((16, 32, 1, 64), (2048, 64, 64, 1), torch.\n            float32)\n        get_raw_stream(0)\n        triton_poi_fused_avg_pool2d_0[grid(32768)](arg0_1, buf0, 32768,\n            XBLOCK=128, num_warps=4, num_stages=1)\n        del arg0_1\n    return reinterpret_tensor(buf0, (16, 32, 64), (2048, 64, 1), 0),\n\n\nclass ModelNew(nn.Module):\n    \"\"\"\n    Simple model that performs 1D Average Pooling.\n    \"\"\"\n\n    def __init__(self, kernel_size: 'int', stride: 'int'=1, padding: 'int'=0):\n        \"\"\"\n        Initializes the 1D Average Pooling layer.\n\n        Args:\n            kernel_size (int): Size of the pooling window.\n            stride (int, optional): Stride of the pooling operation. Defaults to 1.\n            padding (int, optional): Padding applied to the input tensor. Defaults to 0.\n        \"\"\"\n        super(ModelNew, self).__init__()\n        self.avg_pool = nn.AvgPool1d(kernel_size=kernel_size, stride=stride,\n            padding=padding)\n\n    def forward(self, input_0):\n        arg0_1 = input_0\n        output = call([arg0_1])\n        return output[0]\n```",
      "ncu_results": {},
      "metadata": {
        "correctness_trials_attempted": 1,
        "max_differences": [
          "1.540562"
        ],
        "avg_differences": [
          "0.281985"
        ],
        "trial_results": [
          {
            "trial": 0,
            "seed": 1608637542,
            "original_output_type": "<class 'torch.Tensor'>",
            "custom_output_type": "<class 'torch.Tensor'>",
            "original_output_shape": "torch.Size([16, 32, 64])",
            "original_output_dtype": "torch.float32",
            "custom_output_shape": "torch.Size([16, 32, 64])",
            "custom_output_dtype": "torch.float32",
            "status": "fail",
            "max_diff": 1.540562391281128,
            "avg_diff": 0.2819850444793701
          }
        ],
        "pass_count": 0,
        "total_trials": 1,
        "correctness_summary": "(0 / 1)",
        "overall_max_diff": 1.540562391281128,
        "overall_avg_diff": 0.2819850444793701
      },
      "compilation_error": null,
      "runtime_error": null,
      "generation_error": null
    }
  ]
}