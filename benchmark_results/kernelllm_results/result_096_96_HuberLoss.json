{
  "device_info": {
    "device_name": "NVIDIA GeForce RTX 4090",
    "device_id": 0,
    "device_str": "cuda:0",
    "compute_capability": [
      8,
      9
    ],
    "total_memory": 25386352640,
    "driver_version": "12.4",
    "backend": "triton"
  },
  "kernel_spec": {
    "description_file": "benchmark/level1/96_HuberLoss.py",
    "generator_file": "generators/kernelllm_generator.py",
    "warmup": 5,
    "iterations": 10,
    "max_diff_limit": 1e-05,
    "report_n": 10,
    "correctness_trials": 1,
    "seed": 42,
    "backend": "triton",
    "use_ncu": false
  },
  "baseline_time": 0.014950400590896607,
  "success_rate": 0.0,
  "avg_speedup": 0.0,
  "max_speedup": 0.0,
  "compilation_success_rate": 1.0,
  "correctness_success_rate": 0.0,
  "generations": [
    {
      "round": 0,
      "compiled": true,
      "correctness": false,
      "max_diff": 0.022459745407104492,
      "avg_diff": 0.022459745407104492,
      "runtime": null,
      "speedup": null,
      "generated_code": "import torch\nimport triton\nimport triton.language as tl\nfrom torch._inductor.runtime.triton_heuristics import grid\nfrom torch._C import _cuda_getCurrentRawStream as get_raw_stream\nfrom torch._inductor.runtime import triton_helpers\nfrom torch._inductor.runtime.triton_helpers import math as tl_math\nimport torch.nn as nn\nassert_size_stride = torch._C._dynamo.guards.assert_size_stride\nempty_strided_cuda = torch._C._dynamo.guards._empty_strided_cuda\n\n\n@triton.jit\ndef triton_per_fused_smooth_l1_loss_0(in_out_ptr0, in_ptr0, in_ptr1, xnumel,\n    rnumel):\n    XBLOCK: tl.constexpr = 1\n    RBLOCK: tl.constexpr = 4096\n    xoffset = tl.program_id(0) * XBLOCK\n    tl.full([1], xoffset, tl.int32)\n    tl.full([RBLOCK], True, tl.int1)\n    rindex = tl.arange(0, RBLOCK)[:]\n    tl.full([RBLOCK], True, tl.int1)\n    r0 = rindex\n    tmp0 = tl.load(in_ptr0 + r0, None)\n    tmp1 = tl.load(in_ptr1 + r0, None)\n    tmp2 = tmp0 - tmp1\n    tmp3 = tl_math.abs(tmp2)\n    tmp4 = 1.0\n    tmp5 = tmp3 < tmp4\n    tmp6 = tmp3 * tmp3\n    tmp7 = 0.5\n    tmp8 = tmp6 * tmp7\n    tmp9 = tmp8 * tmp4\n    tmp10 = tmp3 - tmp7\n    tmp11 = tl.where(tmp5, tmp9, tmp10)\n    tmp12 = tl.broadcast_to(tmp11, [RBLOCK])\n    tmp14 = triton_helpers.promote_to_tensor(tl.sum(tmp12, 0))\n    tmp15 = 4096.0\n    tmp16 = tmp14 / tmp15\n    tl.debug_barrier()\n    tl.store(in_out_ptr0 + tl.full([1], 0, tl.int32), tmp16, None)\n\n\ndef call(args):\n    arg0_1, arg1_1 = args\n    args.clear()\n    assert_size_stride(arg0_1, (128, 4096), (4096, 1))\n    assert_size_stride(arg1_1, (128, 4096), (4096, 1))\n    with torch.cuda._DeviceGuard(0):\n        torch.cuda.set_device(0)\n        buf0 = empty_strided_cuda((), (), torch.float32)\n        buf1 = buf0\n        del buf0\n        get_raw_stream(0)\n        triton_per_fused_smooth_l1_loss_0[grid(1)](buf1, arg1_1, arg0_1, 1, \n            4096, num_warps=8, num_stages=1)\n        del arg0_1\n        del arg1_1\n    return buf1,\n\n\nclass ModelNew(nn.Module):\n    \"\"\"\n    A model that computes Smooth L1 (Huber) Loss for regression tasks.\n\n    Parameters:\n        None\n    \"\"\"\n    def __init__(self):\n        super(ModelNew, self).__init__()\n\n    def forward(self, input_0, input_1):\n        arg0_1 = input_0\n        arg1_1 = input_1\n        output = call([arg0_1, arg1_1])\n        return output[0]\n```",
      "ncu_results": {},
      "metadata": {
        "correctness_trials_attempted": 1,
        "max_differences": [
          "0.022460"
        ],
        "avg_differences": [
          "0.022460"
        ],
        "trial_results": [
          {
            "trial": 0,
            "seed": 1608637542,
            "original_output_type": "<class 'torch.Tensor'>",
            "custom_output_type": "<class 'torch.Tensor'>",
            "original_output_shape": "torch.Size([])",
            "original_output_dtype": "torch.float32",
            "custom_output_shape": "torch.Size([])",
            "custom_output_dtype": "torch.float32",
            "status": "fail",
            "max_diff": 0.022459745407104492,
            "avg_diff": 0.022459745407104492
          }
        ],
        "pass_count": 0,
        "total_trials": 1,
        "correctness_summary": "(0 / 1)",
        "overall_max_diff": 0.022459745407104492,
        "overall_avg_diff": 0.022459745407104492
      },
      "compilation_error": null,
      "runtime_error": null,
      "generation_error": null
    },
    {
      "round": 1,
      "compiled": true,
      "correctness": false,
      "max_diff": 0.022459745407104492,
      "avg_diff": 0.022459745407104492,
      "runtime": null,
      "speedup": null,
      "generated_code": "import torch\nimport triton\nimport triton.language as tl\nfrom torch._inductor.runtime.triton_heuristics import grid\nfrom torch._C import _cuda_getCurrentRawStream as get_raw_stream\nfrom torch._inductor.runtime import triton_helpers\nfrom torch._inductor.runtime.triton_helpers import math as tl_math\nimport torch.nn as nn\nassert_size_stride = torch._C._dynamo.guards.assert_size_stride\nempty_strided_cuda = torch._C._dynamo.guards._empty_strided_cuda\n\n\n@triton.jit\ndef triton_per_fused_smooth_l1_loss_0(in_out_ptr0, in_ptr0, in_ptr1, xnumel,\n    rnumel):\n    XBLOCK: tl.constexpr = 1\n    RBLOCK: tl.constexpr = 4096\n    xoffset = tl.program_id(0) * XBLOCK\n    tl.full([1], xoffset, tl.int32)\n    tl.full([RBLOCK], True, tl.int1)\n    rindex = tl.arange(0, RBLOCK)[:]\n    tl.full([RBLOCK], True, tl.int1)\n    r0 = rindex\n    tmp0 = tl.load(in_ptr0 + r0, None)\n    tmp1 = tl.load(in_ptr1 + r0, None)\n    tmp2 = tmp0 - tmp1\n    tmp3 = tl_math.abs(tmp2)\n    tmp4 = 1.0\n    tmp5 = tmp3 < tmp4\n    tmp6 = tmp3 * tmp3\n    tmp7 = 0.5\n    tmp8 = tmp6 * tmp7\n    tmp9 = tmp8 * tmp4\n    tmp10 = tmp3 - tmp7\n    tmp11 = tl.where(tmp5, tmp9, tmp10)\n    tmp12 = tl.broadcast_to(tmp11, [RBLOCK])\n    tmp14 = triton_helpers.promote_to_tensor(tl.sum(tmp12, 0))\n    tmp15 = 4096.0\n    tmp16 = tmp14 / tmp15\n    tl.debug_barrier()\n    tl.store(in_out_ptr0 + tl.full([1], 0, tl.int32), tmp16, None)\n\n\ndef call(args):\n    arg0_1, arg1_1 = args\n    args.clear()\n    assert_size_stride(arg0_1, (128, 4096), (4096, 1))\n    assert_size_stride(arg1_1, (128, 4096), (4096, 1))\n    with torch.cuda._DeviceGuard(0):\n        torch.cuda.set_device(0)\n        buf0 = empty_strided_cuda((), (), torch.float32)\n        buf1 = buf0\n        del buf0\n        get_raw_stream(0)\n        triton_per_fused_smooth_l1_loss_0[grid(1)](buf1, arg1_1, arg0_1, 1, \n            4096, num_warps=8, num_stages=1)\n        del arg0_1\n        del arg1_1\n    return buf1,\n\n\nclass ModelNew(nn.Module):\n    \"\"\"\n    A model that computes Smooth L1 (Huber) Loss for regression tasks.\n\n    Parameters:\n        None\n    \"\"\"\n    def __init__(self):\n        super(ModelNew, self).__init__()\n\n    def forward(self, input_0, input_1):\n        arg0_1 = input_0\n        arg1_1 = input_1\n        output = call([arg0_1, arg1_1])\n        return output[0]\n```",
      "ncu_results": {},
      "metadata": {
        "correctness_trials_attempted": 1,
        "max_differences": [
          "0.022460"
        ],
        "avg_differences": [
          "0.022460"
        ],
        "trial_results": [
          {
            "trial": 0,
            "seed": 1608637542,
            "original_output_type": "<class 'torch.Tensor'>",
            "custom_output_type": "<class 'torch.Tensor'>",
            "original_output_shape": "torch.Size([])",
            "original_output_dtype": "torch.float32",
            "custom_output_shape": "torch.Size([])",
            "custom_output_dtype": "torch.float32",
            "status": "fail",
            "max_diff": 0.022459745407104492,
            "avg_diff": 0.022459745407104492
          }
        ],
        "pass_count": 0,
        "total_trials": 1,
        "correctness_summary": "(0 / 1)",
        "overall_max_diff": 0.022459745407104492,
        "overall_avg_diff": 0.022459745407104492
      },
      "compilation_error": null,
      "runtime_error": null,
      "generation_error": null
    },
    {
      "round": 2,
      "compiled": true,
      "correctness": false,
      "max_diff": 0.022459745407104492,
      "avg_diff": 0.022459745407104492,
      "runtime": null,
      "speedup": null,
      "generated_code": "import torch\nimport triton\nimport triton.language as tl\nfrom torch._inductor.runtime.triton_heuristics import grid\nfrom torch._C import _cuda_getCurrentRawStream as get_raw_stream\nfrom torch._inductor.runtime import triton_helpers\nfrom torch._inductor.runtime.triton_helpers import math as tl_math\nimport torch.nn as nn\nassert_size_stride = torch._C._dynamo.guards.assert_size_stride\nempty_strided_cuda = torch._C._dynamo.guards._empty_strided_cuda\n\n\n@triton.jit\ndef triton_per_fused_smooth_l1_loss_0(in_out_ptr0, in_ptr0, in_ptr1, xnumel,\n    rnumel):\n    XBLOCK: tl.constexpr = 1\n    RBLOCK: tl.constexpr = 4096\n    xoffset = tl.program_id(0) * XBLOCK\n    tl.full([1], xoffset, tl.int32)\n    tl.full([RBLOCK], True, tl.int1)\n    rindex = tl.arange(0, RBLOCK)[:]\n    tl.full([RBLOCK], True, tl.int1)\n    r0 = rindex\n    tmp0 = tl.load(in_ptr0 + r0, None)\n    tmp1 = tl.load(in_ptr1 + r0, None)\n    tmp2 = tmp0 - tmp1\n    tmp3 = tl_math.abs(tmp2)\n    tmp4 = 1.0\n    tmp5 = tmp3 < tmp4\n    tmp6 = tmp3 * tmp3\n    tmp7 = 0.5\n    tmp8 = tmp6 * tmp7\n    tmp9 = tmp8 * tmp4\n    tmp10 = tmp3 - tmp7\n    tmp11 = tl.where(tmp5, tmp9, tmp10)\n    tmp12 = tl.broadcast_to(tmp11, [RBLOCK])\n    tmp14 = triton_helpers.promote_to_tensor(tl.sum(tmp12, 0))\n    tmp15 = 4096.0\n    tmp16 = tmp14 / tmp15\n    tl.debug_barrier()\n    tl.store(in_out_ptr0 + tl.full([1], 0, tl.int32), tmp16, None)\n\n\ndef call(args):\n    arg0_1, arg1_1 = args\n    args.clear()\n    assert_size_stride(arg0_1, (128, 4096), (4096, 1))\n    assert_size_stride(arg1_1, (128, 4096), (4096, 1))\n    with torch.cuda._DeviceGuard(0):\n        torch.cuda.set_device(0)\n        buf0 = empty_strided_cuda((), (), torch.float32)\n        buf1 = buf0\n        del buf0\n        get_raw_stream(0)\n        triton_per_fused_smooth_l1_loss_0[grid(1)](buf1, arg1_1, arg0_1, 1, \n            4096, num_warps=8, num_stages=1)\n        del arg0_1\n        del arg1_1\n    return buf1,\n\n\nclass ModelNew(nn.Module):\n    \"\"\"\n    A model that computes Smooth L1 (Huber) Loss for regression tasks.\n\n    Parameters:\n        None\n    \"\"\"\n    def __init__(self):\n        super(ModelNew, self).__init__()\n\n    def forward(self, input_0, input_1):\n        arg0_1 = input_0\n        arg1_1 = input_1\n        output = call([arg0_1, arg1_1])\n        return output[0]\n```",
      "ncu_results": {},
      "metadata": {
        "correctness_trials_attempted": 1,
        "max_differences": [
          "0.022460"
        ],
        "avg_differences": [
          "0.022460"
        ],
        "trial_results": [
          {
            "trial": 0,
            "seed": 1608637542,
            "original_output_type": "<class 'torch.Tensor'>",
            "custom_output_type": "<class 'torch.Tensor'>",
            "original_output_shape": "torch.Size([])",
            "original_output_dtype": "torch.float32",
            "custom_output_shape": "torch.Size([])",
            "custom_output_dtype": "torch.float32",
            "status": "fail",
            "max_diff": 0.022459745407104492,
            "avg_diff": 0.022459745407104492
          }
        ],
        "pass_count": 0,
        "total_trials": 1,
        "correctness_summary": "(0 / 1)",
        "overall_max_diff": 0.022459745407104492,
        "overall_avg_diff": 0.022459745407104492
      },
      "compilation_error": null,
      "runtime_error": null,
      "generation_error": null
    },
    {
      "round": 3,
      "compiled": true,
      "correctness": false,
      "max_diff": 0.018668532371520996,
      "avg_diff": 0.018668532371520996,
      "runtime": null,
      "speedup": null,
      "generated_code": "import torch\nimport triton\nimport triton.language as tl\nfrom torch._inductor.runtime.triton_heuristics import grid\nfrom torch._C import _cuda_getCurrentRawStream as get_raw_stream\nfrom torch._inductor.runtime import triton_helpers\nfrom torch._inductor.runtime.triton_helpers import math as tl_math\nimport torch.nn as nn\nassert_size_stride = torch._C._dynamo.guards.assert_size_stride\nempty_strided_cuda = torch._C._dynamo.guards._empty_strided_cuda\n\n\n@triton.jit\ndef triton_per_fused_smooth_l1_loss_0(in_out_ptr0, in_ptr0, in_ptr1, xnumel,\n    rnumel):\n    XBLOCK: tl.constexpr = 1\n    RBLOCK: tl.constexpr = 512\n    xoffset = tl.program_id(0) * XBLOCK\n    tl.full([1], xoffset, tl.int32)\n    tl.full([RBLOCK], True, tl.int1)\n    rindex = tl.arange(0, RBLOCK)[:]\n    tl.full([RBLOCK], True, tl.int1)\n    r0 = rindex\n    tmp0 = tl.load(in_ptr0 + r0, None)\n    tmp1 = tl.load(in_ptr1 + r0, None)\n    tmp2 = tmp0 - tmp1\n    tmp3 = tl_math.abs(tmp2)\n    tmp4 = 1.0\n    tmp5 = tmp3 < tmp4\n    tmp6 = tmp3 * tmp3\n    tmp7 = 0.5\n    tmp8 = tmp6 * tmp7\n    tmp9 = tmp8 * tmp4\n    tmp10 = tmp3 - tmp7\n    tmp11 = tl.where(tmp5, tmp9, tmp10)\n    tmp12 = tl.broadcast_to(tmp11, [RBLOCK])\n    tmp14 = triton_helpers.promote_to_tensor(tl.sum(tmp12, 0))\n    tmp15 = 512.0\n    tmp16 = tmp14 / tmp15\n    tl.debug_barrier()\n    tl.store(in_out_ptr0 + tl.full([1], 0, tl.int32), tmp16, None)\n\n\ndef call(args):\n    arg0_1, arg1_1 = args\n    args.clear()\n    assert_size_stride(arg0_1, (128, 4096), (4096, 1))\n    assert_size_stride(arg1_1, (128, 4096), (4096, 1))\n    with torch.cuda._DeviceGuard(0):\n        torch.cuda.set_device(0)\n        buf0 = empty_strided_cuda((), (), torch.float32)\n        buf1 = buf0\n        del buf0\n        get_raw_stream(0)\n        triton_per_fused_smooth_l1_loss_0[grid(1)](buf1, arg1_1, arg0_1, 1, \n            512, num_warps=4, num_stages=1)\n        del arg0_1\n        del arg1_1\n    return buf1,\n\n\nclass ModelNew(nn.Module):\n    \"\"\"\n    A model that computes Smooth L1 (Huber) Loss for regression tasks.\n\n    Parameters:\n        None\n    \"\"\"\n    def __init__(self):\n        super(ModelNew, self).__init__()\n\n    def forward(self, input_0, input_1):\n        arg0_1 = input_0\n        arg1_1 = input_1\n        output = call([arg0_1, arg1_1])\n        return output[0]\n```",
      "ncu_results": {},
      "metadata": {
        "correctness_trials_attempted": 1,
        "max_differences": [
          "0.018669"
        ],
        "avg_differences": [
          "0.018669"
        ],
        "trial_results": [
          {
            "trial": 0,
            "seed": 1608637542,
            "original_output_type": "<class 'torch.Tensor'>",
            "custom_output_type": "<class 'torch.Tensor'>",
            "original_output_shape": "torch.Size([])",
            "original_output_dtype": "torch.float32",
            "custom_output_shape": "torch.Size([])",
            "custom_output_dtype": "torch.float32",
            "status": "fail",
            "max_diff": 0.018668532371520996,
            "avg_diff": 0.018668532371520996
          }
        ],
        "pass_count": 0,
        "total_trials": 1,
        "correctness_summary": "(0 / 1)",
        "overall_max_diff": 0.018668532371520996,
        "overall_avg_diff": 0.018668532371520996
      },
      "compilation_error": null,
      "runtime_error": null,
      "generation_error": null
    },
    {
      "round": 4,
      "compiled": true,
      "correctness": false,
      "max_diff": 0.022459745407104492,
      "avg_diff": 0.022459745407104492,
      "runtime": null,
      "speedup": null,
      "generated_code": "import torch\nimport triton\nimport triton.language as tl\nfrom torch._inductor.runtime.triton_heuristics import grid\nfrom torch._C import _cuda_getCurrentRawStream as get_raw_stream\nfrom torch._inductor.runtime import triton_helpers\nfrom torch._inductor.runtime.triton_helpers import math as tl_math\nimport torch.nn as nn\nassert_size_stride = torch._C._dynamo.guards.assert_size_stride\nempty_strided_cuda = torch._C._dynamo.guards._empty_strided_cuda\n\n\n@triton.jit\ndef triton_per_fused_smooth_l1_loss_0(in_out_ptr0, in_ptr0, in_ptr1, xnumel,\n    rnumel):\n    XBLOCK: tl.constexpr = 1\n    RBLOCK: tl.constexpr = 4096\n    xoffset = tl.program_id(0) * XBLOCK\n    tl.full([1], xoffset, tl.int32)\n    tl.full([RBLOCK], True, tl.int1)\n    rindex = tl.arange(0, RBLOCK)[:]\n    tl.full([RBLOCK], True, tl.int1)\n    r0 = rindex\n    tmp0 = tl.load(in_ptr0 + r0, None)\n    tmp1 = tl.load(in_ptr1 + r0, None)\n    tmp2 = tmp0 - tmp1\n    tmp3 = tl_math.abs(tmp2)\n    tmp4 = 1.0\n    tmp5 = tmp3 < tmp4\n    tmp6 = tmp3 * tmp3\n    tmp7 = 0.5\n    tmp8 = tmp6 * tmp7\n    tmp9 = tmp8 * tmp4\n    tmp10 = tmp3 - tmp7\n    tmp11 = tl.where(tmp5, tmp9, tmp10)\n    tmp12 = tl.broadcast_to(tmp11, [RBLOCK])\n    tmp14 = triton_helpers.promote_to_tensor(tl.sum(tmp12, 0))\n    tmp15 = 4096.0\n    tmp16 = tmp14 / tmp15\n    tl.debug_barrier()\n    tl.store(in_out_ptr0 + tl.full([1], 0, tl.int32), tmp16, None)\n\n\ndef call(args):\n    arg0_1, arg1_1 = args\n    args.clear()\n    assert_size_stride(arg0_1, (128, 4096), (4096, 1))\n    assert_size_stride(arg1_1, (128, 4096), (4096, 1))\n    with torch.cuda._DeviceGuard(0):\n        torch.cuda.set_device(0)\n        buf0 = empty_strided_cuda((), (), torch.float32)\n        buf1 = buf0\n        del buf0\n        get_raw_stream(0)\n        triton_per_fused_smooth_l1_loss_0[grid(1)](buf1, arg1_1, arg0_1, 1, \n            4096, num_warps=8, num_stages=1)\n        del arg0_1\n        del arg1_1\n    return buf1,\n\n\nclass ModelNew(nn.Module):\n    \"\"\"\n    A model that computes Smooth L1 (Huber) Loss for regression tasks.\n\n    Parameters:\n        None\n    \"\"\"\n    def __init__(self):\n        super(ModelNew, self).__init__()\n\n    def forward(self, input_0, input_1):\n        arg0_1 = input_0\n        arg1_1 = input_1\n        output = call([arg0_1, arg1_1])\n        return output[0]\n```",
      "ncu_results": {},
      "metadata": {
        "correctness_trials_attempted": 1,
        "max_differences": [
          "0.022460"
        ],
        "avg_differences": [
          "0.022460"
        ],
        "trial_results": [
          {
            "trial": 0,
            "seed": 1608637542,
            "original_output_type": "<class 'torch.Tensor'>",
            "custom_output_type": "<class 'torch.Tensor'>",
            "original_output_shape": "torch.Size([])",
            "original_output_dtype": "torch.float32",
            "custom_output_shape": "torch.Size([])",
            "custom_output_dtype": "torch.float32",
            "status": "fail",
            "max_diff": 0.022459745407104492,
            "avg_diff": 0.022459745407104492
          }
        ],
        "pass_count": 0,
        "total_trials": 1,
        "correctness_summary": "(0 / 1)",
        "overall_max_diff": 0.022459745407104492,
        "overall_avg_diff": 0.022459745407104492
      },
      "compilation_error": null,
      "runtime_error": null,
      "generation_error": null
    },
    {
      "round": 5,
      "compiled": true,
      "correctness": false,
      "max_diff": 0.022459745407104492,
      "avg_diff": 0.022459745407104492,
      "runtime": null,
      "speedup": null,
      "generated_code": "import torch\nimport triton\nimport triton.language as tl\nfrom torch._inductor.runtime.triton_heuristics import grid\nfrom torch._C import _cuda_getCurrentRawStream as get_raw_stream\nfrom torch._inductor.runtime import triton_helpers\nfrom torch._inductor.runtime.triton_helpers import math as tl_math\nimport torch.nn as nn\nassert_size_stride = torch._C._dynamo.guards.assert_size_stride\nempty_strided_cuda = torch._C._dynamo.guards._empty_strided_cuda\n\n\n@triton.jit\ndef triton_per_fused_smooth_l1_loss_0(in_out_ptr0, in_ptr0, in_ptr1, xnumel,\n    rnumel):\n    XBLOCK: tl.constexpr = 1\n    RBLOCK: tl.constexpr = 4096\n    xoffset = tl.program_id(0) * XBLOCK\n    tl.full([1], xoffset, tl.int32)\n    tl.full([RBLOCK], True, tl.int1)\n    rindex = tl.arange(0, RBLOCK)[:]\n    tl.full([RBLOCK], True, tl.int1)\n    r0 = rindex\n    tmp0 = tl.load(in_ptr0 + r0, None)\n    tmp1 = tl.load(in_ptr1 + r0, None)\n    tmp2 = tmp0 - tmp1\n    tmp3 = tl_math.abs(tmp2)\n    tmp4 = 1.0\n    tmp5 = tmp3 < tmp4\n    tmp6 = tmp3 * tmp3\n    tmp7 = 0.5\n    tmp8 = tmp6 * tmp7\n    tmp9 = tmp8 * tmp4\n    tmp10 = tmp3 - tmp7\n    tmp11 = tl.where(tmp5, tmp9, tmp10)\n    tmp12 = tl.broadcast_to(tmp11, [RBLOCK])\n    tmp14 = triton_helpers.promote_to_tensor(tl.sum(tmp12, 0))\n    tmp15 = 4096.0\n    tmp16 = tmp14 / tmp15\n    tl.debug_barrier()\n    tl.store(in_out_ptr0 + tl.full([1], 0, tl.int32), tmp16, None)\n\n\ndef call(args):\n    arg0_1, arg1_1 = args\n    args.clear()\n    assert_size_stride(arg0_1, (128, 4096), (4096, 1))\n    assert_size_stride(arg1_1, (128, 4096), (4096, 1))\n    with torch.cuda._DeviceGuard(0):\n        torch.cuda.set_device(0)\n        buf0 = empty_strided_cuda((), (), torch.float32)\n        buf1 = buf0\n        del buf0\n        get_raw_stream(0)\n        triton_per_fused_smooth_l1_loss_0[grid(1)](buf1, arg1_1, arg0_1, 1, \n            4096, num_warps=8, num_stages=1)\n        del arg0_1\n        del arg1_1\n    return buf1,\n\n\nclass ModelNew(nn.Module):\n    \"\"\"\n    A model that computes Smooth L1 (Huber) Loss for regression tasks.\n\n    Parameters:\n        None\n    \"\"\"\n    def __init__(self):\n        super(ModelNew, self).__init__()\n\n    def forward(self, input_0, input_1):\n        arg0_1 = input_0\n        arg1_1 = input_1\n        output = call([arg0_1, arg1_1])\n        return output[0]\n```",
      "ncu_results": {},
      "metadata": {
        "correctness_trials_attempted": 1,
        "max_differences": [
          "0.022460"
        ],
        "avg_differences": [
          "0.022460"
        ],
        "trial_results": [
          {
            "trial": 0,
            "seed": 1608637542,
            "original_output_type": "<class 'torch.Tensor'>",
            "custom_output_type": "<class 'torch.Tensor'>",
            "original_output_shape": "torch.Size([])",
            "original_output_dtype": "torch.float32",
            "custom_output_shape": "torch.Size([])",
            "custom_output_dtype": "torch.float32",
            "status": "fail",
            "max_diff": 0.022459745407104492,
            "avg_diff": 0.022459745407104492
          }
        ],
        "pass_count": 0,
        "total_trials": 1,
        "correctness_summary": "(0 / 1)",
        "overall_max_diff": 0.022459745407104492,
        "overall_avg_diff": 0.022459745407104492
      },
      "compilation_error": null,
      "runtime_error": null,
      "generation_error": null
    },
    {
      "round": 6,
      "compiled": true,
      "correctness": false,
      "max_diff": 0.022459745407104492,
      "avg_diff": 0.022459745407104492,
      "runtime": null,
      "speedup": null,
      "generated_code": "import torch\nimport triton\nimport triton.language as tl\nfrom torch._inductor.runtime.triton_heuristics import grid\nfrom torch._C import _cuda_getCurrentRawStream as get_raw_stream\nfrom torch._inductor.runtime import triton_helpers\nfrom torch._inductor.runtime.triton_helpers import math as tl_math\nimport torch.nn as nn\nassert_size_stride = torch._C._dynamo.guards.assert_size_stride\nempty_strided_cuda = torch._C._dynamo.guards._empty_strided_cuda\n\n\n@triton.jit\ndef triton_per_fused_smooth_l1_loss_0(in_out_ptr0, in_ptr0, in_ptr1, xnumel,\n    rnumel):\n    XBLOCK: tl.constexpr = 1\n    RBLOCK: tl.constexpr = 4096\n    xoffset = tl.program_id(0) * XBLOCK\n    tl.full([1], xoffset, tl.int32)\n    tl.full([RBLOCK], True, tl.int1)\n    rindex = tl.arange(0, RBLOCK)[:]\n    tl.full([RBLOCK], True, tl.int1)\n    r0 = rindex\n    tmp0 = tl.load(in_ptr0 + r0, None)\n    tmp1 = tl.load(in_ptr1 + r0, None)\n    tmp2 = tmp0 - tmp1\n    tmp3 = tl_math.abs(tmp2)\n    tmp4 = 1.0\n    tmp5 = tmp3 < tmp4\n    tmp6 = tmp3 * tmp3\n    tmp7 = 0.5\n    tmp8 = tmp6 * tmp7\n    tmp9 = tmp8 * tmp4\n    tmp10 = tmp3 - tmp7\n    tmp11 = tl.where(tmp5, tmp9, tmp10)\n    tmp12 = tl.broadcast_to(tmp11, [RBLOCK])\n    tmp14 = triton_helpers.promote_to_tensor(tl.sum(tmp12, 0))\n    tmp15 = 4096.0\n    tmp16 = tmp14 / tmp15\n    tl.debug_barrier()\n    tl.store(in_out_ptr0 + tl.full([1], 0, tl.int32), tmp16, None)\n\n\ndef call(args):\n    arg0_1, arg1_1 = args\n    args.clear()\n    assert_size_stride(arg0_1, (128, 4096), (4096, 1))\n    assert_size_stride(arg1_1, (128, 4096), (4096, 1))\n    with torch.cuda._DeviceGuard(0):\n        torch.cuda.set_device(0)\n        buf0 = empty_strided_cuda((), (), torch.float32)\n        buf1 = buf0\n        del buf0\n        get_raw_stream(0)\n        triton_per_fused_smooth_l1_loss_0[grid(1)](buf1, arg1_1, arg0_1, 1, \n            4096, num_warps=8, num_stages=1)\n        del arg0_1\n        del arg1_1\n    return buf1,\n\n\nclass ModelNew(nn.Module):\n    \"\"\"\n    A model that computes Smooth L1 (Huber) Loss for regression tasks.\n\n    Parameters:\n        None\n    \"\"\"\n    def __init__(self):\n        super(ModelNew, self).__init__()\n\n    def forward(self, input_0, input_1):\n        arg0_1 = input_0\n        arg1_1 = input_1\n        output = call([arg0_1, arg1_1])\n        return output[0]\n```",
      "ncu_results": {},
      "metadata": {
        "correctness_trials_attempted": 1,
        "max_differences": [
          "0.022460"
        ],
        "avg_differences": [
          "0.022460"
        ],
        "trial_results": [
          {
            "trial": 0,
            "seed": 1608637542,
            "original_output_type": "<class 'torch.Tensor'>",
            "custom_output_type": "<class 'torch.Tensor'>",
            "original_output_shape": "torch.Size([])",
            "original_output_dtype": "torch.float32",
            "custom_output_shape": "torch.Size([])",
            "custom_output_dtype": "torch.float32",
            "status": "fail",
            "max_diff": 0.022459745407104492,
            "avg_diff": 0.022459745407104492
          }
        ],
        "pass_count": 0,
        "total_trials": 1,
        "correctness_summary": "(0 / 1)",
        "overall_max_diff": 0.022459745407104492,
        "overall_avg_diff": 0.022459745407104492
      },
      "compilation_error": null,
      "runtime_error": null,
      "generation_error": null
    },
    {
      "round": 7,
      "compiled": true,
      "correctness": false,
      "max_diff": 0.022459745407104492,
      "avg_diff": 0.022459745407104492,
      "runtime": null,
      "speedup": null,
      "generated_code": "import torch\nimport triton\nimport triton.language as tl\nfrom torch._inductor.runtime.triton_heuristics import grid\nfrom torch._C import _cuda_getCurrentRawStream as get_raw_stream\nfrom torch._inductor.runtime import triton_helpers\nfrom torch._inductor.runtime.triton_helpers import math as tl_math\nimport torch.nn as nn\nassert_size_stride = torch._C._dynamo.guards.assert_size_stride\nempty_strided_cuda = torch._C._dynamo.guards._empty_strided_cuda\n\n\n@triton.jit\ndef triton_per_fused_smooth_l1_loss_0(in_out_ptr0, in_ptr0, in_ptr1, xnumel,\n    rnumel):\n    XBLOCK: tl.constexpr = 1\n    RBLOCK: tl.constexpr = 4096\n    xoffset = tl.program_id(0) * XBLOCK\n    tl.full([1], xoffset, tl.int32)\n    tl.full([RBLOCK], True, tl.int1)\n    rindex = tl.arange(0, RBLOCK)[:]\n    tl.full([RBLOCK], True, tl.int1)\n    r0 = rindex\n    tmp0 = tl.load(in_ptr0 + r0, None)\n    tmp1 = tl.load(in_ptr1 + r0, None)\n    tmp2 = tmp0 - tmp1\n    tmp3 = tl_math.abs(tmp2)\n    tmp4 = 1.0\n    tmp5 = tmp3 < tmp4\n    tmp6 = tmp3 * tmp3\n    tmp7 = 0.5\n    tmp8 = tmp6 * tmp7\n    tmp9 = tmp8 * tmp4\n    tmp10 = tmp3 - tmp7\n    tmp11 = tl.where(tmp5, tmp9, tmp10)\n    tmp12 = tl.broadcast_to(tmp11, [RBLOCK])\n    tmp14 = triton_helpers.promote_to_tensor(tl.sum(tmp12, 0))\n    tmp15 = 4096.0\n    tmp16 = tmp14 / tmp15\n    tl.debug_barrier()\n    tl.store(in_out_ptr0 + tl.full([1], 0, tl.int32), tmp16, None)\n\n\ndef call(args):\n    arg0_1, arg1_1 = args\n    args.clear()\n    assert_size_stride(arg0_1, (128, 4096), (4096, 1))\n    assert_size_stride(arg1_1, (128, 4096), (4096, 1))\n    with torch.cuda._DeviceGuard(0):\n        torch.cuda.set_device(0)\n        buf0 = empty_strided_cuda((), (), torch.float32)\n        buf1 = buf0\n        del buf0\n        get_raw_stream(0)\n        triton_per_fused_smooth_l1_loss_0[grid(1)](buf1, arg1_1, arg0_1, 1, \n            4096, num_warps=8, num_stages=1)\n        del arg0_1\n        del arg1_1\n    return buf1,\n\n\nclass ModelNew(nn.Module):\n    \"\"\"\n    A model that computes Smooth L1 (Huber) Loss for regression tasks.\n\n    Parameters:\n        None\n    \"\"\"\n    def __init__(self):\n        super(ModelNew, self).__init__()\n\n    def forward(self, input_0, input_1):\n        arg0_1 = input_0\n        arg1_1 = input_1\n        output = call([arg0_1, arg1_1])\n        return output[0]\n```",
      "ncu_results": {},
      "metadata": {
        "correctness_trials_attempted": 1,
        "max_differences": [
          "0.022460"
        ],
        "avg_differences": [
          "0.022460"
        ],
        "trial_results": [
          {
            "trial": 0,
            "seed": 1608637542,
            "original_output_type": "<class 'torch.Tensor'>",
            "custom_output_type": "<class 'torch.Tensor'>",
            "original_output_shape": "torch.Size([])",
            "original_output_dtype": "torch.float32",
            "custom_output_shape": "torch.Size([])",
            "custom_output_dtype": "torch.float32",
            "status": "fail",
            "max_diff": 0.022459745407104492,
            "avg_diff": 0.022459745407104492
          }
        ],
        "pass_count": 0,
        "total_trials": 1,
        "correctness_summary": "(0 / 1)",
        "overall_max_diff": 0.022459745407104492,
        "overall_avg_diff": 0.022459745407104492
      },
      "compilation_error": null,
      "runtime_error": null,
      "generation_error": null
    },
    {
      "round": 8,
      "compiled": true,
      "correctness": false,
      "max_diff": 0.022459745407104492,
      "avg_diff": 0.022459745407104492,
      "runtime": null,
      "speedup": null,
      "generated_code": "import torch\nimport triton\nimport triton.language as tl\nfrom torch._inductor.runtime.triton_heuristics import grid\nfrom torch._C import _cuda_getCurrentRawStream as get_raw_stream\nfrom torch._inductor.runtime import triton_helpers\nfrom torch._inductor.runtime.triton_helpers import math as tl_math\nimport torch.nn as nn\nassert_size_stride = torch._C._dynamo.guards.assert_size_stride\nempty_strided_cuda = torch._C._dynamo.guards._empty_strided_cuda\n\n\n@triton.jit\ndef triton_per_fused_smooth_l1_loss_0(in_out_ptr0, in_ptr0, in_ptr1, xnumel,\n    rnumel):\n    XBLOCK: tl.constexpr = 1\n    RBLOCK: tl.constexpr = 4096\n    xoffset = tl.program_id(0) * XBLOCK\n    tl.full([1], xoffset, tl.int32)\n    tl.full([RBLOCK], True, tl.int1)\n    rindex = tl.arange(0, RBLOCK)[:]\n    tl.full([RBLOCK], True, tl.int1)\n    r0 = rindex\n    tmp0 = tl.load(in_ptr0 + r0, None)\n    tmp1 = tl.load(in_ptr1 + r0, None)\n    tmp2 = tmp0 - tmp1\n    tmp3 = tl_math.abs(tmp2)\n    tmp4 = 1.0\n    tmp5 = tmp3 < tmp4\n    tmp6 = tmp3 * tmp3\n    tmp7 = 0.5\n    tmp8 = tmp6 * tmp7\n    tmp9 = tmp8 * tmp4\n    tmp10 = tmp3 - tmp7\n    tmp11 = tl.where(tmp5, tmp9, tmp10)\n    tmp12 = tl.broadcast_to(tmp11, [RBLOCK])\n    tmp14 = triton_helpers.promote_to_tensor(tl.sum(tmp12, 0))\n    tmp15 = 4096.0\n    tmp16 = tmp14 / tmp15\n    tl.debug_barrier()\n    tl.store(in_out_ptr0 + tl.full([1], 0, tl.int32), tmp16, None)\n\n\ndef call(args):\n    arg0_1, arg1_1 = args\n    args.clear()\n    assert_size_stride(arg0_1, (128, 4096), (4096, 1))\n    assert_size_stride(arg1_1, (128, 4096), (4096, 1))\n    with torch.cuda._DeviceGuard(0):\n        torch.cuda.set_device(0)\n        buf0 = empty_strided_cuda((), (), torch.float32)\n        buf1 = buf0\n        del buf0\n        get_raw_stream(0)\n        triton_per_fused_smooth_l1_loss_0[grid(1)](buf1, arg1_1, arg0_1, 1, \n            4096, num_warps=8, num_stages=1)\n        del arg0_1\n        del arg1_1\n    return buf1,\n\n\nclass ModelNew(nn.Module):\n    \"\"\"\n    A model that computes Smooth L1 (Huber) Loss for regression tasks.\n\n    Parameters:\n        None\n    \"\"\"\n    def __init__(self):\n        super(ModelNew, self).__init__()\n\n    def forward(self, input_0, input_1):\n        arg0_1 = input_0\n        arg1_1 = input_1\n        output = call([arg0_1, arg1_1])\n        return output[0]\n```",
      "ncu_results": {},
      "metadata": {
        "correctness_trials_attempted": 1,
        "max_differences": [
          "0.022460"
        ],
        "avg_differences": [
          "0.022460"
        ],
        "trial_results": [
          {
            "trial": 0,
            "seed": 1608637542,
            "original_output_type": "<class 'torch.Tensor'>",
            "custom_output_type": "<class 'torch.Tensor'>",
            "original_output_shape": "torch.Size([])",
            "original_output_dtype": "torch.float32",
            "custom_output_shape": "torch.Size([])",
            "custom_output_dtype": "torch.float32",
            "status": "fail",
            "max_diff": 0.022459745407104492,
            "avg_diff": 0.022459745407104492
          }
        ],
        "pass_count": 0,
        "total_trials": 1,
        "correctness_summary": "(0 / 1)",
        "overall_max_diff": 0.022459745407104492,
        "overall_avg_diff": 0.022459745407104492
      },
      "compilation_error": null,
      "runtime_error": null,
      "generation_error": null
    },
    {
      "round": 9,
      "compiled": true,
      "correctness": false,
      "max_diff": 0.022459745407104492,
      "avg_diff": 0.022459745407104492,
      "runtime": null,
      "speedup": null,
      "generated_code": "import torch\nimport triton\nimport triton.language as tl\nfrom torch._inductor.runtime.triton_heuristics import grid\nfrom torch._C import _cuda_getCurrentRawStream as get_raw_stream\nfrom torch._inductor.runtime import triton_helpers\nfrom torch._inductor.runtime.triton_helpers import math as tl_math\nimport torch.nn as nn\nassert_size_stride = torch._C._dynamo.guards.assert_size_stride\nempty_strided_cuda = torch._C._dynamo.guards._empty_strided_cuda\n\n\n@triton.jit\ndef triton_per_fused_smooth_l1_loss_0(in_out_ptr0, in_ptr0, in_ptr1, xnumel,\n    rnumel):\n    XBLOCK: tl.constexpr = 1\n    RBLOCK: tl.constexpr = 4096\n    xoffset = tl.program_id(0) * XBLOCK\n    tl.full([1], xoffset, tl.int32)\n    tl.full([RBLOCK], True, tl.int1)\n    rindex = tl.arange(0, RBLOCK)[:]\n    tl.full([RBLOCK], True, tl.int1)\n    r0 = rindex\n    tmp0 = tl.load(in_ptr0 + r0, None)\n    tmp1 = tl.load(in_ptr1 + r0, None)\n    tmp2 = tmp0 - tmp1\n    tmp3 = tl_math.abs(tmp2)\n    tmp4 = 1.0\n    tmp5 = tmp3 < tmp4\n    tmp6 = tmp3 * tmp3\n    tmp7 = 0.5\n    tmp8 = tmp6 * tmp7\n    tmp9 = tmp8 * tmp4\n    tmp10 = tmp3 - tmp7\n    tmp11 = tl.where(tmp5, tmp9, tmp10)\n    tmp12 = tl.broadcast_to(tmp11, [RBLOCK])\n    tmp14 = triton_helpers.promote_to_tensor(tl.sum(tmp12, 0))\n    tmp15 = 4096.0\n    tmp16 = tmp14 / tmp15\n    tl.debug_barrier()\n    tl.store(in_out_ptr0 + tl.full([1], 0, tl.int32), tmp16, None)\n\n\ndef call(args):\n    arg0_1, arg1_1 = args\n    args.clear()\n    assert_size_stride(arg0_1, (128, 4096), (4096, 1))\n    assert_size_stride(arg1_1, (128, 4096), (4096, 1))\n    with torch.cuda._DeviceGuard(0):\n        torch.cuda.set_device(0)\n        buf0 = empty_strided_cuda((), (), torch.float32)\n        buf1 = buf0\n        del buf0\n        get_raw_stream(0)\n        triton_per_fused_smooth_l1_loss_0[grid(1)](buf1, arg1_1, arg0_1, 1, \n            4096, num_warps=8, num_stages=1)\n        del arg0_1\n        del arg1_1\n    return buf1,\n\n\nclass ModelNew(nn.Module):\n    \"\"\"\n    A model that computes Smooth L1 (Huber) Loss for regression tasks.\n\n    Parameters:\n        None\n    \"\"\"\n    def __init__(self):\n        super(ModelNew, self).__init__()\n\n    def forward(self, input_0, input_1):\n        arg0_1 = input_0\n        arg1_1 = input_1\n        output = call([arg0_1, arg1_1])\n        return output[0]\n```",
      "ncu_results": {},
      "metadata": {
        "correctness_trials_attempted": 1,
        "max_differences": [
          "0.022460"
        ],
        "avg_differences": [
          "0.022460"
        ],
        "trial_results": [
          {
            "trial": 0,
            "seed": 1608637542,
            "original_output_type": "<class 'torch.Tensor'>",
            "custom_output_type": "<class 'torch.Tensor'>",
            "original_output_shape": "torch.Size([])",
            "original_output_dtype": "torch.float32",
            "custom_output_shape": "torch.Size([])",
            "custom_output_dtype": "torch.float32",
            "status": "fail",
            "max_diff": 0.022459745407104492,
            "avg_diff": 0.022459745407104492
          }
        ],
        "pass_count": 0,
        "total_trials": 1,
        "correctness_summary": "(0 / 1)",
        "overall_max_diff": 0.022459745407104492,
        "overall_avg_diff": 0.022459745407104492
      },
      "compilation_error": null,
      "runtime_error": null,
      "generation_error": null
    }
  ]
}