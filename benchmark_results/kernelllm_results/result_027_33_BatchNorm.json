{
  "device_info": {
    "device_name": "NVIDIA GeForce RTX 4090",
    "device_id": 0,
    "device_str": "cuda:0",
    "compute_capability": [
      8,
      9
    ],
    "total_memory": 25386352640,
    "driver_version": "12.4",
    "backend": "triton"
  },
  "kernel_spec": {
    "description_file": "benchmark/level1/33_BatchNorm.py",
    "generator_file": "generators/kernelllm_generator.py",
    "warmup": 5,
    "iterations": 10,
    "max_diff_limit": 1e-05,
    "report_n": 10,
    "correctness_trials": 1,
    "seed": 42,
    "backend": "triton",
    "use_ncu": false
  },
  "baseline_time": 0.6142975807189941,
  "success_rate": 0.0,
  "avg_speedup": 0.0,
  "max_speedup": 0.0,
  "compilation_success_rate": 1.0,
  "correctness_success_rate": 0.0,
  "generations": [
    {
      "round": 0,
      "compiled": true,
      "correctness": false,
      "max_diff": Infinity,
      "avg_diff": NaN,
      "runtime": null,
      "speedup": null,
      "generated_code": "import torch\nimport triton\nimport triton.language as tl\nfrom torch._inductor.runtime.triton_heuristics import grid\nfrom torch._C import _cuda_getCurrentRawStream as get_raw_stream\nfrom torch._inductor.runtime import triton_helpers\nfrom torch._inductor.runtime.triton_helpers import libdevice\nimport torch.nn as nn\nassert_size_stride = torch._C._dynamo.guards.assert_size_stride\nempty_strided_cuda = torch._C._dynamo.guards._empty_strided_cuda\n\n\n@triton.jit\ndef triton_per_fused__native_batch_norm_legit_0(in_ptr0, out_ptr2, xnumel,\n    rnumel, XBLOCK: tl.constexpr):\n    xnumel = 1024\n    RBLOCK: tl.constexpr = 64\n    xoffset = tl.program_id(0) * XBLOCK\n    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]\n    xmask = xindex < xnumel\n    rindex = tl.arange(0, RBLOCK)[None, :]\n    tl.full([XBLOCK, RBLOCK], True, tl.int1)\n    r1 = rindex\n    x0 = xindex\n    tmp0 = tl.load(in_ptr0 + (r1 + 64 * x0), xmask, other=0.0)\n    tmp1 = tl.broadcast_to(tmp0, [XBLOCK, RBLOCK])\n    tl.where(xmask, tmp1, 0)\n    tmp4 = tl.broadcast_to(tmp1, [XBLOCK, RBLOCK])\n    tmp6 = tl.where(xmask, tmp4, 0)\n    tmp7 = tl.sum(tmp6, 1)[:, None]\n    tmp8 = tl.full([XBLOCK, 1], 64, tl.int32)\n    tmp9 = tmp8.to(tl.float32)\n    tmp10 = tmp7 / tmp9\n    tmp11 = tmp1 - tmp10\n    tmp12 = tmp11 * tmp11\n    tmp13 = tl.broadcast_to(tmp12, [XBLOCK, RBLOCK])\n    tmp15 = tl.where(xmask, tmp13, 0)\n    tmp16 = tl.sum(tmp15, 1)[:, None]\n    tmp17 = tmp0 - tmp10\n    tmp18 = 64.0\n    tmp19 = tmp16 / tmp18\n    tmp20 = 1e-05\n    tmp21 = tmp19 + tmp20\n    tmp22 = libdevice.rsqrt(tmp21)\n    tmp23 = tmp17 * tmp22\n    tl.store(out_ptr2 + (r1 + 64 * x0), tmp23, xmask)\n\n\n@triton.jit\ndef triton_poi_fused_relu_1(in_ptr0, out_ptr1, xnumel, XBLOCK: tl.constexpr):\n    xoffset = tl.program_id(0) * XBLOCK\n    xindex = xoffset + tl.arange(0, XBLOCK)[:]\n    tl.full([XBLOCK], True, tl.int1)\n    x0 = xindex\n    tmp0 = tl.load(in_ptr0 + x0, None)\n    tmp1 = tl.full([1], 0, tl.int32)\n    tmp2 = triton_helpers.maximum(tmp1, tmp0)\n    tl.store(out_ptr1 + x0, tmp2, None)\n\n\ndef call(args):\n    arg0_1, = args\n    args.clear()\n    assert_size_stride(arg0_1, (16, 64, 256, 256), (524288, 65536, 256, 1))\n    with torch.cuda._DeviceGuard(0):\n        torch.cuda.set_device(0)\n        buf3 = empty_strided_cuda((1, 1024, 256, 256), (2097152, 2048, 8, \n            1), torch.float32)\n        get_raw_stream(0)\n        triton_per_fused__native_batch_norm_legit_0[grid(1024)](arg0_1,\n            buf3, 1024, 64, XBLOCK=8, num_warps=4, num_stages=1)\n        del arg0_1\n        buf4 = torch.ops.aten.max_pool3d_with_indices.default(buf3, [2, 2, 2],\n            [2, 2, 2])\n        del buf3\n        buf5 = buf4[0]\n        del buf4\n        buf9 = empty_strided_cuda((16, 64, 128, 128), (262144, 4096, 32, 1),\n            torch.float32)\n        triton_poi_fused_relu_1[grid(4194304)](buf5, buf9, 4194304, XBLOCK=\n            1024, num_warps=4, num_stages=1)\n        del buf5\n    return buf9,\n\n\nclass ModelNew(nn.Module):\n    \"\"\"\n    Simple model that performs Batch Normalization.\n    \"\"\"\n    def __init__(self, num_features: int):\n        \"\"\"\n        Initializes the BatchNorm layer.\n\n        Args:\n            num_features (int): Number of features in the input tensor.\n        \"\"\"\n        super(ModelNew, self).__init__()\n        self.bn = nn.BatchNorm2d(num_features=num_features)\n\n    def forward(self, input_0):\n        arg0_1 = input_0\n        output = call([arg0_1])\n        return output[0]\n```",
      "ncu_results": {},
      "metadata": {
        "correctness_trials_attempted": 1,
        "max_differences": [
          "inf"
        ],
        "avg_differences": [
          "inf"
        ],
        "trial_results": [
          {
            "trial": 0,
            "seed": 1608637542,
            "status": "runtime_error",
            "error": "expected size 16==16, stride 4194304==524288 at dim=0",
            "error_type": "AssertionError"
          }
        ],
        "pass_count": 0,
        "total_trials": 1,
        "correctness_summary": "(0 / 1)",
        "overall_max_diff": Infinity,
        "overall_avg_diff": NaN
      },
      "compilation_error": null,
      "runtime_error": null,
      "generation_error": null
    },
    {
      "round": 1,
      "compiled": true,
      "correctness": false,
      "max_diff": Infinity,
      "avg_diff": NaN,
      "runtime": null,
      "speedup": null,
      "generated_code": "import torch\nimport triton\nimport triton.language as tl\nfrom torch._inductor.runtime.triton_heuristics import grid\nfrom torch._C import _cuda_getCurrentRawStream as get_raw_stream\nfrom torch._inductor.runtime import triton_helpers\nfrom torch._inductor.runtime.triton_helpers import libdevice\nimport torch.nn as nn\nassert_size_stride = torch._C._dynamo.guards.assert_size_stride\nempty_strided_cuda = torch._C._dynamo.guards._empty_strided_cuda\n\n\n@triton.jit\ndef triton_per_fused__native_batch_norm_legit_0(in_ptr0, out_ptr2, xnumel,\n    rnumel, XBLOCK: tl.constexpr):\n    xnumel = 1024\n    RBLOCK: tl.constexpr = 64\n    xoffset = tl.program_id(0) * XBLOCK\n    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]\n    xmask = xindex < xnumel\n    rindex = tl.arange(0, RBLOCK)[None, :]\n    tl.full([XBLOCK, RBLOCK], True, tl.int1)\n    r1 = rindex\n    x0 = xindex\n    tmp0 = tl.load(in_ptr0 + (r1 + 64 * x0), xmask, other=0.0)\n    tmp1 = tl.broadcast_to(tmp0, [XBLOCK, RBLOCK])\n    tl.where(xmask, tmp1, 0)\n    tmp4 = tl.broadcast_to(tmp1, [XBLOCK, RBLOCK])\n    tmp6 = tl.where(xmask, tmp4, 0)\n    tmp7 = tl.sum(tmp6, 1)[:, None]\n    tmp8 = tl.full([XBLOCK, 1], 64, tl.int32)\n    tmp9 = tmp8.to(tl.float32)\n    tmp10 = tmp7 / tmp9\n    tmp11 = tmp1 - tmp10\n    tmp12 = tmp11 * tmp11\n    tmp13 = tl.broadcast_to(tmp12, [XBLOCK, RBLOCK])\n    tmp15 = tl.where(xmask, tmp13, 0)\n    tmp16 = tl.sum(tmp15, 1)[:, None]\n    tmp17 = tmp0 - tmp10\n    tmp18 = 64.0\n    tmp19 = tmp16 / tmp18\n    tmp20 = 1e-05\n    tmp21 = tmp19 + tmp20\n    tmp22 = libdevice.rsqrt(tmp21)\n    tmp23 = tmp17 * tmp22\n    tl.store(out_ptr2 + (r1 + 64 * x0), tmp23, xmask)\n\n\n@triton.jit\ndef triton_poi_fused_relu_threshold_backward_1(in_ptr0, out_ptr0, out_ptr1,\n    xnumel, XBLOCK: tl.constexpr):\n    xoffset = tl.program_id(0) * XBLOCK\n    xindex = xoffset + tl.arange(0, XBLOCK)[:]\n    tl.full([XBLOCK], True, tl.int1)\n    x0 = xindex\n    tmp0 = tl.load(in_ptr0 + x0, None)\n    tmp1 = tl.full([1], 0, tl.int32)\n    tmp2 = triton_helpers.maximum(tmp1, tmp0)\n    tmp3 = 0.0\n    tmp4 = tmp2 <= tmp3\n    tl.store(out_ptr0 + x0, tmp2, None)\n    tl.store(out_ptr1 + x0, tmp4, None)\n\n\ndef call(args):\n    arg0_1, = args\n    args.clear()\n    assert_size_stride(arg0_1, (16, 64, 256, 256), (524288, 65536, 256, 1))\n    with torch.cuda._DeviceGuard(0):\n        torch.cuda.set_device(0)\n        buf3 = empty_strided_cuda((1, 1024, 256, 256), (8388608, 8192, 256, \n            1), torch.float32)\n        get_raw_stream(0)\n        triton_per_fused__native_batch_norm_legit_0[grid(1024)](arg0_1,\n            buf3, 1024, 64, XBLOCK=32, num_warps=8, num_stages=1)\n        del arg0_1\n        buf4 = torch.ops.aten.max_pool3d_with_indices.default(buf3, [2, 2, 2],\n            [2, 2, 2])\n        del buf3\n        buf5 = buf4[0]\n        del buf4\n        buf9 = empty_strided_cuda((16, 64, 128, 128), (262144, 4096, 128, 1),\n            torch.float32)\n        buf10 = empty_strided_cuda((16, 64, 128, 128), (262144, 4096, 128, 1\n            ), torch.bool)\n        triton_poi_fused_relu_threshold_backward_1[grid(4194304)](buf5, buf9,\n            buf10, 4194304, XBLOCK=1024, num_warps=4, num_stages=1)\n        del buf5\n    return buf9, buf10\n\n\nclass ModelNew(nn.Module):\n    \"\"\"\n    Simple model that performs Batch Normalization.\n    \"\"\"\n    def __init__(self, num_features: int):\n        \"\"\"\n        Initializes the BatchNorm layer.\n\n        Args:\n            num_features (int): Number of features in the input tensor.\n        \"\"\"\n        super(ModelNew, self).__init__()\n        self.bn = nn.BatchNorm2d(num_features=num_features)\n\n    def forward(self, input_0):\n        arg0_1 = input_0\n        output = call([arg0_1])\n        return output[0]\n```",
      "ncu_results": {},
      "metadata": {
        "correctness_trials_attempted": 1,
        "max_differences": [
          "inf"
        ],
        "avg_differences": [
          "inf"
        ],
        "trial_results": [
          {
            "trial": 0,
            "seed": 1608637542,
            "status": "runtime_error",
            "error": "expected size 16==16, stride 4194304==524288 at dim=0",
            "error_type": "AssertionError"
          }
        ],
        "pass_count": 0,
        "total_trials": 1,
        "correctness_summary": "(0 / 1)",
        "overall_max_diff": Infinity,
        "overall_avg_diff": NaN
      },
      "compilation_error": null,
      "runtime_error": null,
      "generation_error": null
    },
    {
      "round": 2,
      "compiled": true,
      "correctness": false,
      "max_diff": Infinity,
      "avg_diff": NaN,
      "runtime": null,
      "speedup": null,
      "generated_code": "import torch\nimport triton\nimport triton.language as tl\nfrom torch._inductor.runtime.triton_heuristics import grid\nfrom torch._C import _cuda_getCurrentRawStream as get_raw_stream\nfrom torch._inductor.runtime import triton_helpers\nfrom torch._inductor.runtime.triton_helpers import libdevice\nimport torch.nn as nn\nassert_size_stride = torch._C._dynamo.guards.assert_size_stride\nempty_strided_cuda = torch._C._dynamo.guards._empty_strided_cuda\nreinterpret_tensor = torch._C._dynamo.guards._reinterpret_tensor\n\n\n@triton.jit\ndef triton_per_fused__native_batch_norm_legit_0(in_ptr0, out_ptr0, out_ptr1,\n    out_ptr2, xnumel, rnumel):\n    XBLOCK: tl.constexpr = 1\n    RBLOCK: tl.constexpr = 256\n    xoffset = tl.program_id(0) * XBLOCK\n    xindex = tl.full([1], xoffset, tl.int32)\n    tl.full([RBLOCK], True, tl.int1)\n    rindex = tl.arange(0, RBLOCK)[:]\n    tl.full([RBLOCK], True, tl.int1)\n    r1 = rindex\n    x0 = xindex\n    tmp0 = tl.load(in_ptr0 + (r1 + 256 * x0), None)\n    tmp1 = tl.broadcast_to(tmp0, [RBLOCK])\n    tmp3 = tl.broadcast_to(tmp1, [RBLOCK])\n    tmp5 = triton_helpers.promote_to_tensor(tl.sum(tmp3, 0))\n    tmp6 = tl.full([1], 256, tl.int32)\n    tmp7 = tmp6.to(tl.float32)\n    tmp8 = tmp5 / tmp7\n    tmp9 = tmp1 - tmp8\n    tmp10 = tmp9 * tmp9\n    tmp11 = tl.broadcast_to(tmp10, [RBLOCK])\n    tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))\n    tmp14 = 256.0\n    tmp15 = tmp13 / tmp14\n    tmp16 = 1e-05\n    tmp17 = tmp15 + tmp16\n    tmp18 = libdevice.rsqrt(tmp17)\n    tl.store(out_ptr2 + x0, tmp18, None)\n    tl.store(out_ptr0 + x0, tmp8, None)\n    tl.store(out_ptr1 + x0, tmp13, None)\n\n\n@triton.jit\ndef triton_poi_fused__native_batch_norm_legit_1(in_ptr0, in_ptr1, in_ptr2,\n    in_ptr3, in_ptr4, out_ptr0, xnumel, XBLOCK: tl.constexpr):\n    xoffset = tl.program_id(0) * XBLOCK\n    xindex = xoffset + tl.arange(0, XBLOCK)[:]\n    tl.full([XBLOCK], True, tl.int1)\n    x2 = xindex\n    x1 = xindex // 256\n    tmp0 = tl.load(in_ptr0 + x2, None)\n    tmp1 = tl.load(in_ptr1 + x1, None, eviction_policy='evict_last')\n    tmp3 = tl.load(in_ptr2 + x1, None, eviction_policy='evict_last')\n    tmp10 = tl.load(in_ptr3 + x1, None, eviction_policy='evict_last')\n    tmp12 = tl.load(in_ptr4 + x1, None, eviction_policy='evict_last')\n    tmp2 = tmp0 - tmp1\n    tmp4 = 256.0\n    tmp5 = tmp3 / tmp4\n    tmp6 = 1e-05\n    tmp7 = tmp5 + tmp6\n    tmp8 = libdevice.rsqrt(tmp7)\n    tmp9 = tmp2 * tmp8\n    tmp11 = tmp9 * tmp10\n    tmp13 = tmp11 + tmp12\n    tl.store(out_ptr0 + x2, tmp13, None)\n\n\ndef call(args):\n    primals_1, primals_2, primals_3 = args\n    args.clear()\n    assert_size_stride(primals_1, (64, 64, 1, 1), (64, 1, 1, 1))\n    assert_size_stride(primals_2, (64, 64, 256, 256), (524288, 8192, 256, 1))\n    assert_size_stride(primals_3, (64, 64, 256, 256), (524288, 8192, 256, 1))\n    with torch.cuda._DeviceGuard(0):\n        torch.cuda.set_device(0)\n        buf0 = empty_strided_cuda((1, 64, 1, 1), (64, 1, 64, 64), torch.float32\n            )\n        buf1 = empty_strided_cuda((1, 64, 1, 1), (64, 1, 64, 64), torch.float32\n            )\n        buf3 = empty_strided_cuda((1, 64, 1, 1), (64, 1, 64, 64), torch.float32\n            )\n        get_raw_stream(0)\n        triton_per_fused__native_batch_norm_legit_0[grid(64)](primals_1,\n            buf0, buf1, buf3, 64, 256, num_warps=2, num_stages=1)\n        buf4 = empty_strided_cuda((64, 64, 256, 256), (524288, 8192, 256, 1),\n            torch.float32)\n        triton_poi_fused__native_batch_norm_legit_1[grid(33554432)](primals_1,\n            buf0, buf1, primals_2, primals_3, buf4, 33554432, XBLOCK=1024,\n            num_warps=4, num_stages=1)\n        del buf1\n        del primals_2\n        del primals_3\n    return buf4, primals_1, reinterpret_tensor(buf3, (64,), (1,), 0\n        ), reinterpret_tensor(buf0, (1, 64, 1, 1), (64, 1, 1, 1), 0)\n\n\nclass ModelNew(nn.Module):\n    \"\"\"\n    Simple model that performs Batch Normalization.\n    \"\"\"\n\n    def __init__(self, num_features: 'int'):\n        \"\"\"\n        Initializes the BatchNorm layer.\n\n        Args:\n            num_features (int): Number of features in the input tensor.\n        \"\"\"\n        super(ModelNew, self).__init__()\n        self.bn = nn.BatchNorm2d(num_features=num_features)\n\n    def forward(self, input_0):\n        primals_2 = self.bn.weight\n        primals_3 = self.bn.bias\n        primals_1 = input_0\n        output = call([primals_1, primals_2, primals_3])\n        return output[0]\n```",
      "ncu_results": {},
      "metadata": {
        "correctness_trials_attempted": 1,
        "max_differences": [
          "inf"
        ],
        "avg_differences": [
          "inf"
        ],
        "trial_results": [
          {
            "trial": 0,
            "seed": 1608637542,
            "status": "runtime_error",
            "error": "expected size 16==64, stride 4194304==64 at dim=0; expected size 64==64, stride 65536==1 at dim=1; expected size 256==1, stride 256==1 at dim=2; expected size 256==1, stride 1==1 at dim=3",
            "error_type": "AssertionError"
          }
        ],
        "pass_count": 0,
        "total_trials": 1,
        "correctness_summary": "(0 / 1)",
        "overall_max_diff": Infinity,
        "overall_avg_diff": NaN
      },
      "compilation_error": null,
      "runtime_error": null,
      "generation_error": null
    },
    {
      "round": 3,
      "compiled": true,
      "correctness": false,
      "max_diff": Infinity,
      "avg_diff": NaN,
      "runtime": null,
      "speedup": null,
      "generated_code": "import torch\nimport triton\nimport triton.language as tl\nfrom torch._inductor.runtime.triton_heuristics import grid\nfrom torch._C import _cuda_getCurrentRawStream as get_raw_stream\nfrom torch._inductor.runtime import triton_helpers\nfrom torch._inductor.runtime.triton_helpers import libdevice\nimport torch.nn as nn\nassert_size_stride = torch._C._dynamo.guards.assert_size_stride\nempty_strided_cuda = torch._C._dynamo.guards._empty_strided_cuda\n\n\n@triton.jit\ndef triton_per_fused__native_batch_norm_legit_0(in_ptr0, out_ptr2, xnumel,\n    rnumel, XBLOCK: tl.constexpr):\n    xnumel = 1024\n    RBLOCK: tl.constexpr = 256\n    xoffset = tl.program_id(0) * XBLOCK\n    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]\n    xmask = xindex < xnumel\n    rindex = tl.arange(0, RBLOCK)[None, :]\n    tl.full([XBLOCK, RBLOCK], True, tl.int1)\n    r1 = rindex\n    x0 = xindex\n    tmp0 = tl.load(in_ptr0 + (r1 + 256 * x0), xmask, other=0.0)\n    tmp1 = tl.broadcast_to(tmp0, [XBLOCK, RBLOCK])\n    tl.where(xmask, tmp1, 0)\n    tmp4 = tl.broadcast_to(tmp1, [XBLOCK, RBLOCK])\n    tmp6 = tl.where(xmask, tmp4, 0)\n    tmp7 = tl.sum(tmp6, 1)[:, None]\n    tmp8 = tl.full([XBLOCK, 1], 256, tl.int32)\n    tmp9 = tmp8.to(tl.float32)\n    tmp10 = tmp7 / tmp9\n    tmp11 = tmp1 - tmp10\n    tmp12 = tmp11 * tmp11\n    tmp13 = tl.broadcast_to(tmp12, [XBLOCK, RBLOCK])\n    tmp15 = tl.where(xmask, tmp13, 0)\n    tmp16 = tl.sum(tmp15, 1)[:, None]\n    tmp17 = tmp0 - tmp10\n    tmp18 = 256.0\n    tmp19 = tmp16 / tmp18\n    tmp20 = 1e-05\n    tmp21 = tmp19 + tmp20\n    tmp22 = libdevice.rsqrt(tmp21)\n    tmp23 = tmp17 * tmp22\n    tl.store(out_ptr2 + (r1 + 256 * x0), tmp23, xmask)\n\n\n@triton.jit\ndef triton_red_fused__native_batch_norm_legit_1(in_ptr0, out_ptr0, out_ptr1,\n    out_ptr2, xnumel, rnumel, XBLOCK: tl.constexpr, RBLOCK: tl.constexpr):\n    xnumel = 64\n    rnumel = 8192\n    xoffset = tl.program_id(0) * XBLOCK\n    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]\n    xmask = xindex < xnumel\n    rbase = tl.arange(0, RBLOCK)[None, :]\n    x0 = xindex\n    tmp2_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)\n    tmp2_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)\n    tmp2_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)\n    for roffset in range(0, rnumel, RBLOCK):\n        rindex = roffset + rbase\n        rmask = rindex < rnumel\n        r1 = rindex\n        tmp0 = tl.load(in_ptr0 + (r1 + 8192 * x0), rmask & xmask,\n            eviction_policy='evict_last', other=0.0)\n        tmp1 = tl.broadcast_to(tmp0, [XBLOCK, RBLOCK])\n        tmp2_mean_next, tmp2_m2_next, tmp2_weight_next = (triton_helpers.\n            welford_reduce(tmp1, tmp2_mean, tmp2_m2, tmp2_weight, roffset == 0)\n            )\n        tmp2_mean = tl.where(rmask & xmask, tmp2_mean_next, tmp2_mean)\n        tmp2_m2 = tl.where(rmask & xmask, tmp2_m2_next, tmp2_m2)\n        tmp2_weight = tl.where(rmask & xmask, tmp2_weight_next, tmp2_weight)\n    tmp2_tmp, tmp3_tmp, tmp4_tmp = triton_helpers.welford(tmp2_mean,\n        tmp2_m2, tmp2_weight, 1)\n    tmp2 = tmp2_tmp[:, None]\n    tmp3 = tmp3_tmp[:, None]\n    tmp4_tmp[:, None]\n    tl.store(out_ptr0 + x0, tmp2, xmask)\n    tl.store(out_ptr1 + x0, tmp3, xmask)\n    tmp5 = 8192.0\n    tmp6 = tmp3 / tmp5\n    tmp7 = 1e-05\n    tmp8 = tmp6 + tmp7\n    tmp9 = libdevice.rsqrt(tmp8)\n    tl.store(out_ptr2 + x0, tmp9, xmask)\n\n\n@triton.jit\ndef triton_poi_fused__native_batch_norm_legit_2(in_ptr0, in_ptr1, in_ptr2,\n    out_ptr0, xnumel, XBLOCK: tl.constexpr):\n    xoffset = tl.program_id(0) * XBLOCK\n    xindex = xoffset + tl.arange(0, XBLOCK)[:]\n    tl.full([XBLOCK], True, tl.int1)\n    x2 = xindex\n    x1 = xindex // 8192\n    tmp0 = tl.load(in_ptr0 + x2, None)\n    tmp1 = tl.load(in_ptr1 + x1, None, eviction_policy='evict_last')\n    tmp3 = tl.load(in_ptr2 + x1, None, eviction_policy='evict_last')\n    tmp2 = tmp0 - tmp1\n    tmp4 = 8192.0\n    tmp5 = tmp3 / tmp4\n    tmp6 = 1e-05\n    tmp7 = tmp5 + tmp6\n    tmp8 = libdevice.rsqrt(tmp7)\n    tmp9 = tmp2 * tmp8\n    tl.store(out_ptr0 + x2, tmp9, None)\n\n\ndef call(args):\n    arg0_1, = args\n    args.clear()\n    assert_size_stride(arg0_1, (16, 64, 256, 256), (524288, 65536, 256, 1))\n    with torch.cuda._DeviceGuard(0):\n        torch.cuda.set_device(0)\n        buf0 = empty_strided_cuda((1, 1024, 256, 256), (2621440, 2560, 256, \n            1), torch.float32)\n        get_raw_stream(0)\n        triton_per_fused__native_batch_norm_legit_0[grid(1024)](arg0_1,\n            buf0, 1024, 256, XBLOCK=8, num_warps=8, num_stages=1)\n        buf1 = empty_strided_cuda((1, 1024, 1, 1), (1024, 1, 1024, 1024),\n            torch.float32)\n        buf2 = empty_strided_cuda((1, 1024, 1, 1), (1024, 1, 1024, 1024),\n            torch.float32)\n        buf4 = empty_strided_cuda((1, 1024, 1, 1), (1024, 1, 1024, 1024),\n            torch.float32)\n        triton_red_fused__native_batch_norm_legit_1[grid(64)](arg0_1, buf1,\n            buf2, buf4, 64, 8192, XBLOCK=1, RBLOCK=2048, num_warps=16,\n            num_stages=1)\n        buf5 = empty_strided_cuda((16, 64, 256, 256), (524288, 8192, 256, 1),\n            torch.float32)\n        triton_poi_fused__native_batch_norm_legit_2[grid(8388608)](arg0_1,\n            buf1, buf2, buf5, 8388608, XBLOCK=1024, num_warps=4, num_stages=1)\n        del arg0_1\n        del buf2\n    return buf5,\n\n\nclass ModelNew(nn.Module):\n    \"\"\"\n    Simple model that performs Batch Normalization.\n    \"\"\"\n    def __init__(self, num_features: int):\n        \"\"\"\n        Initializes the BatchNorm layer.\n\n        Args:\n            num_features (int): Number of features in the input tensor.\n        \"\"\"\n        super(ModelNew, self).__init__()\n        self.bn = nn.BatchNorm2d(num_features=num_features)\n\n    def forward(self, input_0):\n        arg0_1 = input_0\n        output = call([arg0_1])\n        return output[0]\n```",
      "ncu_results": {},
      "metadata": {
        "correctness_trials_attempted": 1,
        "max_differences": [
          "inf"
        ],
        "avg_differences": [
          "inf"
        ],
        "trial_results": [
          {
            "trial": 0,
            "seed": 1608637542,
            "status": "runtime_error",
            "error": "expected size 16==16, stride 4194304==524288 at dim=0",
            "error_type": "AssertionError"
          }
        ],
        "pass_count": 0,
        "total_trials": 1,
        "correctness_summary": "(0 / 1)",
        "overall_max_diff": Infinity,
        "overall_avg_diff": NaN
      },
      "compilation_error": null,
      "runtime_error": null,
      "generation_error": null
    },
    {
      "round": 4,
      "compiled": true,
      "correctness": false,
      "max_diff": Infinity,
      "avg_diff": NaN,
      "runtime": null,
      "speedup": null,
      "generated_code": "import torch\nimport triton\nimport triton.language as tl\nfrom torch._inductor.runtime.triton_heuristics import grid\nfrom torch._C import _cuda_getCurrentRawStream as get_raw_stream\nfrom torch._inductor.runtime import triton_helpers\nfrom torch._inductor.runtime.triton_helpers import libdevice\nimport torch.nn as nn\nassert_size_stride = torch._C._dynamo.guards.assert_size_stride\nempty_strided_cuda = torch._C._dynamo.guards._empty_strided_cuda\nreinterpret_tensor = torch._C._dynamo.guards._reinterpret_tensor\n\n\n@triton.jit\ndef triton_per_fused__native_batch_norm_legit_0(in_ptr0, out_ptr0, out_ptr1,\n    out_ptr2, xnumel, rnumel, XBLOCK: tl.constexpr):\n    xnumel = 1024\n    RBLOCK: tl.constexpr = 64\n    xoffset = tl.program_id(0) * XBLOCK\n    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]\n    xmask = xindex < xnumel\n    rindex = tl.arange(0, RBLOCK)[None, :]\n    tl.full([XBLOCK, RBLOCK], True, tl.int1)\n    r1 = rindex\n    x0 = xindex\n    tmp0 = tl.load(in_ptr0 + (r1 + 64 * x0), xmask, other=0.0)\n    tmp1 = tl.broadcast_to(tmp0, [XBLOCK, RBLOCK])\n    tl.where(xmask, tmp1, 0)\n    tmp4 = tl.broadcast_to(tmp1, [XBLOCK, RBLOCK])\n    tmp6 = tl.where(xmask, tmp4, 0)\n    tmp7 = tl.sum(tmp6, 1)[:, None]\n    tmp8 = tl.full([XBLOCK, 1], 64, tl.int32)\n    tmp9 = tmp8.to(tl.float32)\n    tmp10 = tmp7 / tmp9\n    tmp11 = tmp1 - tmp10\n    tmp12 = tmp11 * tmp11\n    tmp13 = tl.broadcast_to(tmp12, [XBLOCK, RBLOCK])\n    tmp15 = tl.where(xmask, tmp13, 0)\n    tmp16 = tl.sum(tmp15, 1)[:, None]\n    tmp17 = 64.0\n    tmp18 = tmp16 / tmp17\n    tmp19 = 1e-05\n    tmp20 = tmp18 + tmp19\n    tmp21 = libdevice.rsqrt(tmp20)\n    tl.store(out_ptr2 + x0, tmp21, xmask)\n    tl.store(out_ptr0 + x0, tmp10, xmask)\n    tl.store(out_ptr1 + x0, tmp16, xmask)\n\n\n@triton.jit\ndef triton_poi_fused__native_batch_norm_legit_1(in_ptr0, in_ptr1, in_ptr2,\n    in_ptr3, in_ptr4, out_ptr0, xnumel, XBLOCK: tl.constexpr):\n    xoffset = tl.program_id(0) * XBLOCK\n    xindex = xoffset + tl.arange(0, XBLOCK)[:]\n    tl.full([XBLOCK], True, tl.int1)\n    x2 = xindex\n    x1 = xindex // 64\n    tmp0 = tl.load(in_ptr0 + x2, None)\n    tmp1 = tl.load(in_ptr1 + x1, None, eviction_policy='evict_last')\n    tmp3 = tl.load(in_ptr2 + x1, None, eviction_policy='evict_last')\n    tmp10 = tl.load(in_ptr3 + x1, None, eviction_policy='evict_last')\n    tmp12 = tl.load(in_ptr4 + x1, None, eviction_policy='evict_last')\n    tmp2 = tmp0 - tmp1\n    tmp4 = 64.0\n    tmp5 = tmp3 / tmp4\n    tmp6 = 1e-05\n    tmp7 = tmp5 + tmp6\n    tmp8 = libdevice.rsqrt(tmp7)\n    tmp9 = tmp2 * tmp8\n    tmp11 = tmp9 * tmp10\n    tmp13 = tmp11 + tmp12\n    tl.store(out_ptr0 + x2, tmp13, None)\n\n\n@triton.jit\ndef triton_red_fused_max_2(in_ptr0, out_ptr0, xnumel, rnumel, XBLOCK: tl.\n    constexpr, RBLOCK: tl.constexpr):\n    rnumel = 256\n    xoffset = tl.program_id(0) * XBLOCK\n    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]\n    tl.full([XBLOCK, RBLOCK], True, tl.int1)\n    rbase = tl.arange(0, RBLOCK)[None, :]\n    x0 = xindex % 256\n    x1 = xindex // 256\n    _tmp2 = tl.full([XBLOCK, RBLOCK], float('-inf'), tl.float32)\n    _tmp2_index = tl.full([XBLOCK, RBLOCK], 9223372036854775807, tl.int64)\n    x3 = xindex\n    for roffset in range(0, rnumel, RBLOCK):\n        rindex = roffset + rbase\n        rmask = rindex < rnumel\n        r2 = rindex\n        tmp0 = tl.load(in_ptr0 + (x0 + 256 * r2 + 65536 * x1), rmask,\n            eviction_policy='evict_first', other=0.0)\n        tmp1 = tl.broadcast_to(tmp0, [XBLOCK, RBLOCK])\n        _tmp2_next, _tmp2_index_next = triton_helpers.maximum_with_index(_tmp2,\n            _tmp2_index, tmp1, rindex)\n        _tmp2 = tl.where(rmask, _tmp2_next, _tmp2)\n        _tmp2_index = tl.where(rmask, _tmp2_index_next, _tmp2_index)\n    _, tmp2_tmp = triton_helpers.max_with_index(_tmp2, _tmp2_index, 1)\n    tmp2 = tmp2_tmp[:, None]\n    tl.store(out_ptr0 + x3, tmp2, None)\n\n\ndef call(args):\n    arg0_1, = args\n    args.clear()\n    assert_size_stride(arg0_1, (16, 64, 256, 256), (524288, 8192, 256, 1))\n    with torch.cuda._DeviceGuard(0):\n        torch.cuda.set_device(0)\n        buf0 = empty_strided_cuda((1, 1024, 1, 1), (1024, 1, 1024, 1024),\n            torch.float32)\n        buf1 = empty_strided_cuda((1, 1024, 1, 1), (1024, 1, 1024, 1024),\n            torch.float32)\n        buf3 = empty_strided_cuda((1, 1024, 1, 1), (1024, 1, 1024, 1024),\n            torch.float32)\n        get_raw_stream(0)\n        triton_per_fused__native_batch_norm_legit_0[grid(1024)](arg0_1,\n            buf0, buf1, buf3, 1024, 64, XBLOCK=32, num_warps=8, num_stages=1)\n        buf4 = empty_strided_cuda((16, 64, 256, 256), (524288, 8192, 256, 1),\n            torch.float32)\n        triton_poi_fused__native_batch_norm_legit_1[grid(8388608)](arg0_1,\n            buf0, buf1, buf3, buf4, 8388608, XBLOCK=1024, num_warps=4,\n            num_stages=1)\n        del arg0_1\n        del buf0\n        del buf1\n        del buf3\n        buf5 = empty_strided_cuda((16, 64, 256, 256), (524288, 8192, 256, 1),\n            torch.float32)\n        triton_red_fused_max_2[grid(4096)](buf4, buf5, 4096, 256, XBLOCK=2,\n            RBLOCK=256, num_warps=4, num_stages=1)\n        del buf4\n    return buf5,\n\n\nclass ModelNew(nn.Module):\n    \"\"\"\n    Simple model that performs Batch Normalization.\n    \"\"\"\n    def __init__(self, num_features: int):\n        \"\"\"\n        Initializes the BatchNorm layer.\n\n        Args:\n            num_features (int): Number of features in the input tensor.\n        \"\"\"\n        super(ModelNew, self).__init__()\n        self.bn = nn.BatchNorm2d(num_features=num_features)\n\n    def forward(self, input_0):\n        arg0_1 = input_0\n        output = call([arg0_1])\n        return output[0]\n```",
      "ncu_results": {},
      "metadata": {
        "correctness_trials_attempted": 1,
        "max_differences": [
          "inf"
        ],
        "avg_differences": [
          "inf"
        ],
        "trial_results": [
          {
            "trial": 0,
            "seed": 1608637542,
            "status": "runtime_error",
            "error": "expected size 16==16, stride 4194304==524288 at dim=0; expected size 64==64, stride 65536==8192 at dim=1",
            "error_type": "AssertionError"
          }
        ],
        "pass_count": 0,
        "total_trials": 1,
        "correctness_summary": "(0 / 1)",
        "overall_max_diff": Infinity,
        "overall_avg_diff": NaN
      },
      "compilation_error": null,
      "runtime_error": null,
      "generation_error": null
    },
    {
      "round": 5,
      "compiled": true,
      "correctness": false,
      "max_diff": Infinity,
      "avg_diff": NaN,
      "runtime": null,
      "speedup": null,
      "generated_code": "import torch\nimport triton\nimport triton.language as tl\nfrom torch._inductor.runtime.triton_heuristics import grid\nfrom torch._C import _cuda_getCurrentRawStream as get_raw_stream\nfrom torch._inductor.runtime import triton_helpers\nfrom torch._inductor.runtime.triton_helpers import libdevice\nimport torch.nn as nn\nassert_size_stride = torch._C._dynamo.guards.assert_size_stride\nempty_strided_cuda = torch._C._dynamo.guards._empty_strided_cuda\nreinterpret_tensor = torch._C._dynamo.guards._reinterpret_tensor\n\n\n@triton.jit\ndef triton_per_fused__native_batch_norm_legit_0(in_ptr0, out_ptr2, xnumel,\n    rnumel):\n    XBLOCK: tl.constexpr = 1\n    RBLOCK: tl.constexpr = 256\n    xoffset = tl.program_id(0) * XBLOCK\n    xindex = tl.full([1], xoffset, tl.int32)\n    tl.full([RBLOCK], True, tl.int1)\n    rindex = tl.arange(0, RBLOCK)[:]\n    tl.full([RBLOCK], True, tl.int1)\n    r1 = rindex\n    x0 = xindex\n    tmp0 = tl.load(in_ptr0 + (r1 + 256 * x0), None)\n    tmp1 = tl.broadcast_to(tmp0, [RBLOCK])\n    tmp3 = tl.broadcast_to(tmp1, [RBLOCK])\n    tmp5 = triton_helpers.promote_to_tensor(tl.sum(tmp3, 0))\n    tmp6 = tl.full([1], 256, tl.int32)\n    tmp7 = tmp6.to(tl.float32)\n    tmp8 = tmp5 / tmp7\n    tmp9 = tmp1 - tmp8\n    tmp10 = tmp9 * tmp9\n    tmp11 = tl.broadcast_to(tmp10, [RBLOCK])\n    tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))\n    tmp14 = tmp0 - tmp8\n    tmp15 = 256.0\n    tmp16 = tmp13 / tmp15\n    tmp17 = 1e-05\n    tmp18 = tmp16 + tmp17\n    tmp19 = libdevice.rsqrt(tmp18)\n    tmp20 = tmp14 * tmp19\n    tl.store(out_ptr2 + (r1 + 256 * x0), tmp20, None)\n\n\ndef call(args):\n    arg0_1, = args\n    args.clear()\n    assert_size_stride(arg0_1, (16, 64, 256, 256), (524288, 8192, 256, 1))\n    with torch.cuda._DeviceGuard(0):\n        torch.cuda.set_device(0)\n        buf3 = empty_strided_cuda((1, 1024, 256, 256), (2621440, 2560, 256, \n            1), torch.float32)\n        get_raw_stream(0)\n        triton_per_fused__native_batch_norm_legit_0[grid(1024)](arg0_1,\n            buf3, 1024, 256, num_warps=2, num_stages=1)\n        del arg0_1\n    return reinterpret_tensor(buf3, (16, 64, 256, 256), (524288, 8192, 256, \n        1), 0),\n\n\nclass ModelNew(nn.Module):\n    \"\"\"\n    Simple model that performs Batch Normalization.\n    \"\"\"\n    def __init__(self, num_features: int):\n        \"\"\"\n        Initializes the BatchNorm layer.\n\n        Args:\n            num_features (int): Number of features in the input tensor.\n        \"\"\"\n        super(ModelNew, self).__init__()\n        self.bn = nn.BatchNorm2d(num_features=num_features)\n\n    def forward(self, input_0):\n        arg0_1 = input_0\n        output = call([arg0_1])\n        return output[0]\n```",
      "ncu_results": {},
      "metadata": {
        "correctness_trials_attempted": 1,
        "max_differences": [
          "inf"
        ],
        "avg_differences": [
          "inf"
        ],
        "trial_results": [
          {
            "trial": 0,
            "seed": 1608637542,
            "status": "runtime_error",
            "error": "expected size 16==16, stride 4194304==524288 at dim=0; expected size 64==64, stride 65536==8192 at dim=1",
            "error_type": "AssertionError"
          }
        ],
        "pass_count": 0,
        "total_trials": 1,
        "correctness_summary": "(0 / 1)",
        "overall_max_diff": Infinity,
        "overall_avg_diff": NaN
      },
      "compilation_error": null,
      "runtime_error": null,
      "generation_error": null
    },
    {
      "round": 6,
      "compiled": true,
      "correctness": false,
      "max_diff": Infinity,
      "avg_diff": NaN,
      "runtime": null,
      "speedup": null,
      "generated_code": "import torch\nimport triton\nimport triton.language as tl\nfrom torch._inductor.runtime.triton_heuristics import grid\nfrom torch._C import _cuda_getCurrentRawStream as get_raw_stream\nfrom torch._inductor.runtime import triton_helpers\nfrom torch._inductor.runtime.triton_helpers import libdevice\nimport torch.nn as nn\nassert_size_stride = torch._C._dynamo.guards.assert_size_stride\nempty_strided_cuda = torch._C._dynamo.guards._empty_strided_cuda\n\n\n@triton.jit\ndef triton_per_fused__native_batch_norm_legit_0(in_ptr0, out_ptr2, xnumel,\n    rnumel, XBLOCK: tl.constexpr):\n    xnumel = 1024\n    RBLOCK: tl.constexpr = 16\n    xoffset = tl.program_id(0) * XBLOCK\n    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]\n    xmask = xindex < xnumel\n    rindex = tl.arange(0, RBLOCK)[None, :]\n    tl.full([XBLOCK, RBLOCK], True, tl.int1)\n    r1 = rindex\n    x0 = xindex\n    tmp0 = tl.load(in_ptr0 + (r1 + 16 * x0), xmask, other=0.0)\n    tmp1 = tl.broadcast_to(tmp0, [XBLOCK, RBLOCK])\n    tl.where(xmask, tmp1, 0)\n    tmp4 = tl.broadcast_to(tmp1, [XBLOCK, RBLOCK])\n    tmp6 = tl.where(xmask, tmp4, 0)\n    tmp7 = tl.sum(tmp6, 1)[:, None]\n    tmp8 = tl.full([XBLOCK, 1], 16, tl.int32)\n    tmp9 = tmp8.to(tl.float32)\n    tmp10 = tmp7 / tmp9\n    tmp11 = tmp1 - tmp10\n    tmp12 = tmp11 * tmp11\n    tmp13 = tl.broadcast_to(tmp12, [XBLOCK, RBLOCK])\n    tmp15 = tl.where(xmask, tmp13, 0)\n    tmp16 = tl.sum(tmp15, 1)[:, None]\n    tmp17 = tmp0 - tmp10\n    tmp18 = 16.0\n    tmp19 = tmp16 / tmp18\n    tmp20 = 1e-05\n    tmp21 = tmp19 + tmp20\n    tmp22 = libdevice.rsqrt(tmp21)\n    tmp23 = tmp17 * tmp22\n    tl.store(out_ptr2 + (r1 + 16 * x0), tmp23, xmask)\n\n\ndef call(args):\n    arg0_1, = args\n    args.clear()\n    assert_size_stride(arg0_1, (16, 64, 256, 256), (524288, 65536, 256, 1))\n    with torch.cuda._DeviceGuard(0):\n        torch.cuda.set_device(0)\n        buf3 = empty_strided_cuda((16, 64, 256, 256), (524288, 65536, 256, \n            1), torch.float32)\n        get_raw_stream(0)\n        triton_per_fused__native_batch_norm_legit_0[grid(1024)](arg0_1,\n            buf3, 1024, 16, XBLOCK=32, num_warps=4, num_stages=1)\n        del arg0_1\n    return buf3,\n\n\nclass ModelNew(nn.Module):\n    \"\"\"\n    Simple model that performs Batch Normalization.\n    \"\"\"\n    def __init__(self, num_features: int):\n        \"\"\"\n        Initializes the BatchNorm layer.\n\n        Args:\n            num_features (int): Number of features in the input tensor.\n        \"\"\"\n        super(ModelNew, self).__init__()\n        self.bn = nn.BatchNorm2d(num_features=num_features)\n\n    def forward(self, input_0):\n        arg0_1 = input_0\n        output = call([arg0_1])\n        return output[0]\n```",
      "ncu_results": {},
      "metadata": {
        "correctness_trials_attempted": 1,
        "max_differences": [
          "inf"
        ],
        "avg_differences": [
          "inf"
        ],
        "trial_results": [
          {
            "trial": 0,
            "seed": 1608637542,
            "status": "runtime_error",
            "error": "expected size 16==16, stride 4194304==524288 at dim=0",
            "error_type": "AssertionError"
          }
        ],
        "pass_count": 0,
        "total_trials": 1,
        "correctness_summary": "(0 / 1)",
        "overall_max_diff": Infinity,
        "overall_avg_diff": NaN
      },
      "compilation_error": null,
      "runtime_error": null,
      "generation_error": null
    },
    {
      "round": 7,
      "compiled": true,
      "correctness": false,
      "max_diff": Infinity,
      "avg_diff": NaN,
      "runtime": null,
      "speedup": null,
      "generated_code": "import torch\nimport triton\nimport triton.language as tl\nfrom torch._inductor.runtime.triton_heuristics import grid\nfrom torch._C import _cuda_getCurrentRawStream as get_raw_stream\nfrom torch._inductor.runtime import triton_helpers\nfrom torch._inductor.runtime.triton_helpers import libdevice\nimport torch.nn as nn\nassert_size_stride = torch._C._dynamo.guards.assert_size_stride\nempty_strided_cuda = torch._C._dynamo.guards._empty_strided_cuda\n\n\n@triton.jit\ndef triton_per_fused__native_batch_norm_legit_0(in_ptr0, out_ptr2, xnumel,\n    rnumel):\n    XBLOCK: tl.constexpr = 1\n    RBLOCK: tl.constexpr = 256\n    xoffset = tl.program_id(0) * XBLOCK\n    xindex = tl.full([1], xoffset, tl.int32)\n    tl.full([RBLOCK], True, tl.int1)\n    rindex = tl.arange(0, RBLOCK)[:]\n    tl.full([RBLOCK], True, tl.int1)\n    r1 = rindex\n    x0 = xindex\n    tmp0 = tl.load(in_ptr0 + (r1 + 256 * x0), None)\n    tmp1 = tl.broadcast_to(tmp0, [RBLOCK])\n    tmp3 = tl.broadcast_to(tmp1, [RBLOCK])\n    tmp5 = triton_helpers.promote_to_tensor(tl.sum(tmp3, 0))\n    tmp6 = tl.full([1], 256, tl.int32)\n    tmp7 = tmp6.to(tl.float32)\n    tmp8 = tmp5 / tmp7\n    tmp9 = tmp1 - tmp8\n    tmp10 = tmp9 * tmp9\n    tmp11 = tl.broadcast_to(tmp10, [RBLOCK])\n    tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))\n    tmp14 = tmp0 - tmp8\n    tmp15 = 256.0\n    tmp16 = tmp13 / tmp15\n    tmp17 = 1e-05\n    tmp18 = tmp16 + tmp17\n    tmp19 = libdevice.rsqrt(tmp18)\n    tmp20 = tmp14 * tmp19\n    tl.store(out_ptr2 + (r1 + 256 * x0), tmp20, None)\n\n\ndef call(args):\n    arg0_1, = args\n    args.clear()\n    assert_size_stride(arg0_1, (16, 64, 256, 256), (524288, 8192, 256, 1))\n    with torch.cuda._DeviceGuard(0):\n        torch.cuda.set_device(0)\n        buf3 = empty_strided_cuda((1, 1024, 256, 256), (2621440, 2560, 256, \n            1), torch.float32)\n        get_raw_stream(0)\n        triton_per_fused__native_batch_norm_legit_0[grid(1024)](arg0_1,\n            buf3, 1024, 256, num_warps=2, num_stages=1)\n        del arg0_1\n    return buf3,\n\n\nclass ModelNew(nn.Module):\n    \"\"\"\n    Simple model that performs Batch Normalization.\n    \"\"\"\n    def __init__(self, num_features: int):\n        \"\"\"\n        Initializes the BatchNorm layer.\n\n        Args:\n            num_features (int): Number of features in the input tensor.\n        \"\"\"\n        super(ModelNew, self).__init__()\n        self.bn = nn.BatchNorm2d(num_features=num_features)\n\n    def forward(self, input_0):\n        arg0_1 = input_0\n        output = call([arg0_1])\n        return output[0]\n```",
      "ncu_results": {},
      "metadata": {
        "correctness_trials_attempted": 1,
        "max_differences": [
          "inf"
        ],
        "avg_differences": [
          "inf"
        ],
        "trial_results": [
          {
            "trial": 0,
            "seed": 1608637542,
            "status": "runtime_error",
            "error": "expected size 16==16, stride 4194304==524288 at dim=0; expected size 64==64, stride 65536==8192 at dim=1",
            "error_type": "AssertionError"
          }
        ],
        "pass_count": 0,
        "total_trials": 1,
        "correctness_summary": "(0 / 1)",
        "overall_max_diff": Infinity,
        "overall_avg_diff": NaN
      },
      "compilation_error": null,
      "runtime_error": null,
      "generation_error": null
    },
    {
      "round": 8,
      "compiled": true,
      "correctness": false,
      "max_diff": Infinity,
      "avg_diff": NaN,
      "runtime": null,
      "speedup": null,
      "generated_code": "import torch\nimport triton\nimport triton.language as tl\nfrom torch._inductor.runtime.triton_heuristics import grid\nfrom torch._C import _cuda_getCurrentRawStream as get_raw_stream\nfrom torch._inductor.runtime import triton_helpers\nfrom torch._inductor.runtime.triton_helpers import libdevice\nimport torch.nn as nn\nassert_size_stride = torch._C._dynamo.guards.assert_size_stride\nempty_strided_cuda = torch._C._dynamo.guards._empty_strided_cuda\n\n\n@triton.jit\ndef triton_per_fused__native_batch_norm_legit_0(in_ptr0, out_ptr0, out_ptr1,\n    out_ptr2, xnumel, rnumel):\n    XBLOCK: tl.constexpr = 1\n    RBLOCK: tl.constexpr = 256\n    xoffset = tl.program_id(0) * XBLOCK\n    xindex = tl.full([1], xoffset, tl.int32)\n    tl.full([RBLOCK], True, tl.int1)\n    rindex = tl.arange(0, RBLOCK)[:]\n    tl.full([RBLOCK], True, tl.int1)\n    r1 = rindex\n    x0 = xindex\n    tmp0 = tl.load(in_ptr0 + (r1 + 256 * x0), None)\n    tmp1 = tl.broadcast_to(tmp0, [RBLOCK])\n    tmp3 = tl.broadcast_to(tmp1, [RBLOCK])\n    tmp5 = triton_helpers.promote_to_tensor(tl.sum(tmp3, 0))\n    tmp6 = tl.full([1], 256, tl.int32)\n    tmp7 = tmp6.to(tl.float32)\n    tmp8 = tmp5 / tmp7\n    tmp9 = tmp1 - tmp8\n    tmp10 = tmp9 * tmp9\n    tmp11 = tl.broadcast_to(tmp10, [RBLOCK])\n    tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))\n    tmp14 = 256.0\n    tmp15 = tmp13 / tmp14\n    tmp16 = 1e-05\n    tmp17 = tmp15 + tmp16\n    tmp18 = libdevice.rsqrt(tmp17)\n    tl.store(out_ptr2 + x0, tmp18, None)\n    tl.store(out_ptr0 + x0, tmp8, None)\n    tl.store(out_ptr1 + x0, tmp13, None)\n\n\n@triton.jit\ndef triton_poi_fused__native_batch_norm_legit_1(in_ptr0, in_ptr1, in_ptr2,\n    in_ptr3, in_ptr4, out_ptr0, xnumel, XBLOCK: tl.constexpr):\n    xoffset = tl.program_id(0) * XBLOCK\n    xindex = xoffset + tl.arange(0, XBLOCK)[:]\n    tl.full([XBLOCK], True, tl.int1)\n    x2 = xindex\n    x1 = xindex // 256\n    tmp0 = tl.load(in_ptr0 + x2, None)\n    tmp1 = tl.load(in_ptr1 + x1, None, eviction_policy='evict_last')\n    tmp3 = tl.load(in_ptr2 + x1, None, eviction_policy='evict_last')\n    tmp10 = tl.load(in_ptr3 + x1, None, eviction_policy='evict_last')\n    tmp12 = tl.load(in_ptr4 + x1, None, eviction_policy='evict_last')\n    tmp2 = tmp0 - tmp1\n    tmp4 = 256.0\n    tmp5 = tmp3 / tmp4\n    tmp6 = 1e-05\n    tmp7 = tmp5 + tmp6\n    tmp8 = libdevice.rsqrt(tmp7)\n    tmp9 = tmp2 * tmp8\n    tmp11 = tmp9 * tmp10\n    tmp13 = tmp11 + tmp12\n    tl.store(out_ptr0 + x2, tmp13, None)\n\n\ndef call(args):\n    primals_1, primals_2, primals_3 = args\n    args.clear()\n    assert_size_stride(primals_1, (64,), (1,))\n    assert_size_stride(primals_2, (64,), (1,))\n    assert_size_stride(primals_3, (16, 64, 256, 256), (524288, 65536, 256, 1))\n    with torch.cuda._DeviceGuard(0):\n        torch.cuda.set_device(0)\n        buf0 = empty_strided_cuda((1, 1024, 1, 1), (1024, 1, 1024, 1024),\n            torch.float32)\n        buf1 = empty_strided_cuda((1, 1024, 1, 1), (1024, 1, 1024, 1024),\n            torch.float32)\n        buf3 = empty_strided_cuda((1, 1024, 1, 1), (1024, 1, 1024, 1024),\n            torch.float32)\n        get_raw_stream(0)\n        triton_per_fused__native_batch_norm_legit_0[grid(1024)](primals_3,\n            buf0, buf1, buf3, 1024, 256, num_warps=2, num_stages=1)\n        buf4 = empty_strided_cuda((16, 64, 256, 256), (524288, 8192, 256, 1),\n            torch.float32)\n        triton_poi_fused__native_batch_norm_legit_1[grid(8388608)](primals_3,\n            buf0, buf1, primals_1, primals_2, buf4, 8388608, XBLOCK=512,\n            num_warps=8, num_stages=1)\n        del buf1\n        del primals_1\n        del primals_2\n    return buf4, primals_3, buf0, buf3\n\n\nclass ModelNew(nn.Module):\n    \"\"\"\n    Simple model that performs Batch Normalization.\n    \"\"\"\n    def __init__(self, num_features: 'int'):\n        \"\"\"\n        Initializes the BatchNorm layer.\n\n        Args:\n            num_features (int): Number of features in the input tensor.\n        \"\"\"\n        super(ModelNew, self).__init__()\n        self.bn = nn.BatchNorm2d(num_features=num_features)\n\n    def forward(self, input_0):\n        primals_1 = self.bn.weight\n        primals_2 = self.bn.bias\n        primals_3 = input_0\n        output = call([primals_1, primals_2, primals_3])\n        return output[0]\n```",
      "ncu_results": {},
      "metadata": {
        "correctness_trials_attempted": 1,
        "max_differences": [
          "inf"
        ],
        "avg_differences": [
          "inf"
        ],
        "trial_results": [
          {
            "trial": 0,
            "seed": 1608637542,
            "status": "runtime_error",
            "error": "expected size 16==16, stride 4194304==524288 at dim=0",
            "error_type": "AssertionError"
          }
        ],
        "pass_count": 0,
        "total_trials": 1,
        "correctness_summary": "(0 / 1)",
        "overall_max_diff": Infinity,
        "overall_avg_diff": NaN
      },
      "compilation_error": null,
      "runtime_error": null,
      "generation_error": null
    },
    {
      "round": 9,
      "compiled": true,
      "correctness": false,
      "max_diff": Infinity,
      "avg_diff": NaN,
      "runtime": null,
      "speedup": null,
      "generated_code": "import torch\nimport triton\nimport triton.language as tl\nfrom torch._inductor.runtime.triton_heuristics import grid\nfrom torch._C import _cuda_getCurrentRawStream as get_raw_stream\nfrom torch._inductor.runtime import triton_helpers\nfrom torch._inductor.runtime.triton_helpers import libdevice\nimport torch.nn as nn\nassert_size_stride = torch._C._dynamo.guards.assert_size_stride\nempty_strided_cuda = torch._C._dynamo.guards._empty_strided_cuda\n\n\n@triton.jit\ndef triton_per_fused__native_batch_norm_legit_0(in_ptr0, out_ptr0, out_ptr1,\n    out_ptr2, xnumel, rnumel):\n    XBLOCK: tl.constexpr = 1\n    RBLOCK: tl.constexpr = 256\n    xoffset = tl.program_id(0) * XBLOCK\n    xindex = tl.full([1], xoffset, tl.int32)\n    tl.full([RBLOCK], True, tl.int1)\n    rindex = tl.arange(0, RBLOCK)[:]\n    tl.full([RBLOCK], True, tl.int1)\n    r1 = rindex\n    x0 = xindex\n    tmp0 = tl.load(in_ptr0 + (r1 + 256 * x0), None)\n    tmp1 = tl.broadcast_to(tmp0, [RBLOCK])\n    tmp3 = tl.broadcast_to(tmp1, [RBLOCK])\n    tmp5 = triton_helpers.promote_to_tensor(tl.sum(tmp3, 0))\n    tmp6 = tl.full([1], 256, tl.int32)\n    tmp7 = tmp6.to(tl.float32)\n    tmp8 = tmp5 / tmp7\n    tmp9 = tmp1 - tmp8\n    tmp10 = tmp9 * tmp9\n    tmp11 = tl.broadcast_to(tmp10, [RBLOCK])\n    tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp11, 0))\n    tmp14 = 256.0\n    tmp15 = tmp13 / tmp14\n    tmp16 = 1e-05\n    tmp17 = tmp15 + tmp16\n    tmp18 = libdevice.rsqrt(tmp17)\n    tl.store(out_ptr2 + x0, tmp18, None)\n    tl.store(out_ptr0 + x0, tmp8, None)\n    tl.store(out_ptr1 + x0, tmp13, None)\n\n\n@triton.jit\ndef triton_poi_fused__native_batch_norm_legit_1(in_ptr0, in_ptr1, in_ptr2,\n    in_ptr3, in_ptr4, out_ptr0, xnumel, XBLOCK: tl.constexpr):\n    xoffset = tl.program_id(0) * XBLOCK\n    xindex = xoffset + tl.arange(0, XBLOCK)[:]\n    tl.full([XBLOCK], True, tl.int1)\n    x2 = xindex\n    x1 = xindex // 256\n    tmp0 = tl.load(in_ptr0 + x2, None)\n    tmp1 = tl.load(in_ptr1 + x1, None, eviction_policy='evict_last')\n    tmp3 = tl.load(in_ptr2 + x1, None, eviction_policy='evict_last')\n    tmp10 = tl.load(in_ptr3 + x1, None, eviction_policy='evict_last')\n    tmp12 = tl.load(in_ptr4 + x1, None, eviction_policy='evict_last')\n    tmp2 = tmp0 - tmp1\n    tmp4 = 256.0\n    tmp5 = tmp3 / tmp4\n    tmp6 = 1e-05\n    tmp7 = tmp5 + tmp6\n    tmp8 = libdevice.rsqrt(tmp7)\n    tmp9 = tmp2 * tmp8\n    tmp11 = tmp9 * tmp10\n    tmp13 = tmp11 + tmp12\n    tl.store(out_ptr0 + x2, tmp13, None)\n\n\ndef call(args):\n    primals_1, primals_2, primals_3 = args\n    args.clear()\n    assert_size_stride(primals_1, (64,), (1,))\n    assert_size_stride(primals_2, (64,), (1,))\n    assert_size_stride(primals_3, (16, 64, 256, 256), (524288, 65536, 256, 1))\n    with torch.cuda._DeviceGuard(0):\n        torch.cuda.set_device(0)\n        buf0 = empty_strided_cuda((1, 1024, 1, 1), (1024, 1, 1024, 1024),\n            torch.float32)\n        buf1 = empty_strided_cuda((1, 1024, 1, 1), (1024, 1, 1024, 1024),\n            torch.float32)\n        buf3 = empty_strided_cuda((1, 1024, 1, 1), (1024, 1, 1024, 1024),\n            torch.float32)\n        get_raw_stream(0)\n        triton_per_fused__native_batch_norm_legit_0[grid(1024)](primals_3,\n            buf0, buf1, buf3, 1024, 256, num_warps=2, num_stages=1)\n        buf4 = empty_strided_cuda((16, 64, 256, 256), (524288, 8192, 256, 1),\n            torch.float32)\n        triton_poi_fused__native_batch_norm_legit_1[grid(8388608)](primals_3,\n            buf0, buf1, primals_1, primals_2, buf4, 8388608, XBLOCK=1024,\n            num_warps=4, num_stages=1)\n        del buf1\n        del primals_1\n        del primals_2\n    return buf4, primals_3, buf0, buf3\n\n\nclass ModelNew(nn.Module):\n    \"\"\"\n    Simple model that performs Batch Normalization.\n    \"\"\"\n    def __init__(self, num_features: 'int'):\n        \"\"\"\n        Initializes the BatchNorm layer.\n\n        Args:\n            num_features (int): Number of features in the input tensor.\n        \"\"\"\n        super(ModelNew, self).__init__()\n        self.bn = nn.BatchNorm2d(num_features=num_features)\n\n    def forward(self, input_0):\n        primals_1 = self.bn.weight\n        primals_2 = self.bn.bias\n        primals_3 = input_0\n        output = call([primals_1, primals_2, primals_3])\n        return output[0]\n```",
      "ncu_results": {},
      "metadata": {
        "correctness_trials_attempted": 1,
        "max_differences": [
          "inf"
        ],
        "avg_differences": [
          "inf"
        ],
        "trial_results": [
          {
            "trial": 0,
            "seed": 1608637542,
            "status": "runtime_error",
            "error": "expected size 16==16, stride 4194304==524288 at dim=0",
            "error_type": "AssertionError"
          }
        ],
        "pass_count": 0,
        "total_trials": 1,
        "correctness_summary": "(0 / 1)",
        "overall_max_diff": Infinity,
        "overall_avg_diff": NaN
      },
      "compilation_error": null,
      "runtime_error": null,
      "generation_error": null
    }
  ]
}